
TFMiniS_LiDar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007040  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008528  08008528  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000068  08008598  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000bc8  08008598  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001874b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb7  00000000  00000000  00038826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fa  00000000  00000000  0003cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020031  00000000  00000000  0003de7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a57b  00000000  00000000  0005deab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfbe7  00000000  00000000  00078426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000619c  00000000  00000000  00148010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007208 	.word	0x08007208

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007208 	.word	0x08007208

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <HAL_UART_RxCpltCallback>:
uint8_t leitura_buffer(void);
void trata_uart(void);
void inicializa_tfmini(void);
void trata_string(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_UART_RxCpltCallback+0x54>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d11c      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x4c>
		lidar_rx_buff[auxbuff] = rcv_byte;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x5c>)
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_UART_RxCpltCallback+0x60>)
 80005ea:	5499      	strb	r1, [r3, r2]
		auxbuff++;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005f6:	701a      	strb	r2, [r3, #0]
		if(auxbuff>=9){
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d906      	bls.n	800060e <HAL_UART_RxCpltCallback+0x42>
			flag_pacote_completo = 1;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_UART_RxCpltCallback+0x64>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
			auxbuff = 0;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
		}
		else
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
	}
}
 800060c:	e004      	b.n	8000618 <HAL_UART_RxCpltCallback+0x4c>
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
 800060e:	2201      	movs	r2, #1
 8000610:	4905      	ldr	r1, [pc, #20]	; (8000628 <HAL_UART_RxCpltCallback+0x5c>)
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <HAL_UART_RxCpltCallback+0x68>)
 8000614:	f003 fe86 	bl	8004324 <HAL_UART_Receive_IT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004800 	.word	0x40004800
 8000624:	2000024b 	.word	0x2000024b
 8000628:	20000249 	.word	0x20000249
 800062c:	20000240 	.word	0x20000240
 8000630:	2000024a 	.word	0x2000024a
 8000634:	2000014c 	.word	0x2000014c

08000638 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){//ENDEREÇO DE HTIM COMO PARAMETRO
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){ 										/*IR�? LER O MEMBRO DA ESTRUTURA APONTADO PELO PONTEIRO PASSADO COMO ARGUMENTO (*htim/nome da estrutura) DA FUNC CALL BACK*/
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d111      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x36>
		/*FUNÇÃO DE TRATAMENTO DE INTERRUPÇÃO POR OVERFLOW TIMER3*/ /*Instance É A FLAG QUE INDICA QUAL TIMER GEROU A INTERRUPÇÃO*/
		/*DELAYS POR INTERRUPÇÃO - CONTADORES*/
		/*------------------INCREMENTO DOS CONTADORES--------------------*/
		cont[0]++;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000654:	801a      	strh	r2, [r3, #0]
		if(cont[0]>=250){
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2bf9      	cmp	r3, #249	; 0xf9
 800065c:	d907      	bls.n	800066e <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000664:	f001 fa80 	bl	8001b68 <HAL_GPIO_TogglePin>
			cont[0] = 0;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40000400 	.word	0x40000400
 800067c:	20000250 	.word	0x20000250
 8000680:	48000400 	.word	0x48000400

08000684 <leitura_buffer>:
uint8_t leitura_buffer(void){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	for(int i = 0; i<7; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e020      	b.n	80006d2 <leitura_buffer+0x4e>
		if(lidar_rx_buff[i] == 0x59 && lidar_rx_buff[i+1] == 0x59){
 8000690:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <leitura_buffer+0x64>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b59      	cmp	r3, #89	; 0x59
 800069a:	d117      	bne.n	80006cc <leitura_buffer+0x48>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <leitura_buffer+0x64>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	2b59      	cmp	r3, #89	; 0x59
 80006a6:	d111      	bne.n	80006cc <leitura_buffer+0x48>
			altura_sensor = (lidar_rx_buff[i+3] << 8) | lidar_rx_buff[i+2];
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3303      	adds	r3, #3
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <leitura_buffer+0x64>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3302      	adds	r3, #2
 80006b8:	490b      	ldr	r1, [pc, #44]	; (80006e8 <leitura_buffer+0x64>)
 80006ba:	5ccb      	ldrb	r3, [r1, r3]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <leitura_buffer+0x68>)
 80006c6:	801a      	strh	r2, [r3, #0]
			return 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e006      	b.n	80006da <leitura_buffer+0x56>
	for(int i = 0; i<7; i++){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	dddb      	ble.n	8000690 <leitura_buffer+0xc>
		}
	}
	return 1;
 80006d8:	2301      	movs	r3, #1
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000240 	.word	0x20000240
 80006ec:	2000024c 	.word	0x2000024c

080006f0 <trata_uart>:
void trata_uart(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	leitura_buffer();
 80006f4:	f7ff ffc6 	bl	8000684 <leitura_buffer>
	flag_pacote_completo = 0;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <trata_uart+0x14>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000024a 	.word	0x2000024a

08000708 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800070c:	f000 fc75 	bl	8000ffa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000710:	f000 f85a 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000714:	f000 f9d6 	bl	8000ac4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000718:	f000 f9aa 	bl	8000a70 <MX_DMA_Init>
	MX_I2C3_Init();
 800071c:	f000 f8a2 	bl	8000864 <MX_I2C3_Init>
	MX_TIM3_Init();
 8000720:	f000 f90c 	bl	800093c <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8000724:	f000 f958 	bl	80009d8 <MX_USART3_UART_Init>
	MX_RTC_Init();
 8000728:	f000 f8dc 	bl	80008e4 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3); //INCIA TIMER3 COM INTERRUPÇÃO NO OVERFLOW
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x98>)
 800072e:	f003 f8cd 	bl	80038cc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	491b      	ldr	r1, [pc, #108]	; (80007a4 <main+0x9c>)
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <main+0xa0>)
 8000738:	f003 fdf4 	bl	8004324 <HAL_UART_Receive_IT>
	OLED_Init(&hi2c3); //INICIANDO DISPLAY
 800073c:	481b      	ldr	r0, [pc, #108]	; (80007ac <main+0xa4>)
 800073e:	f005 fe5f 	bl	8006400 <OLED_Init>
	OLED_Clear(0);
 8000742:	2000      	movs	r0, #0
 8000744:	f005 fec4 	bl	80064d0 <OLED_Clear>
	OLED_UpdateScreen();
 8000748:	f006 f846 	bl	80067d8 <OLED_UpdateScreen>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(flag_pacote_completo)
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <main+0xa8>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <main+0x50>
			trata_uart();
 8000754:	f7ff ffcc 	bl	80006f0 <trata_uart>

		OLED_Clear(0);
 8000758:	2000      	movs	r0, #0
 800075a:	f005 feb9 	bl	80064d0 <OLED_Clear>
		FontSet(Lucida_14);
 800075e:	4815      	ldr	r0, [pc, #84]	; (80007b4 <main+0xac>)
 8000760:	f006 f880 	bl	8006864 <FontSet>
		OLED_DrawStr("TF Mini Plus", CENTER, 1, 1);
 8000764:	2301      	movs	r3, #1
 8000766:	2201      	movs	r2, #1
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	4813      	ldr	r0, [pc, #76]	; (80007b8 <main+0xb0>)
 800076c:	f005 ffcc 	bl	8006708 <OLED_DrawStr>
		sprintf(buff, "%04d cm", altura_sensor);
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0xb4>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4912      	ldr	r1, [pc, #72]	; (80007c0 <main+0xb8>)
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0xbc>)
 800077a:	f006 f8a1 	bl	80068c0 <siprintf>
		OLED_DrawStr(buff, CENTER, 40,1);
 800077e:	2301      	movs	r3, #1
 8000780:	2228      	movs	r2, #40	; 0x28
 8000782:	21ff      	movs	r1, #255	; 0xff
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <main+0xbc>)
 8000786:	f005 ffbf 	bl	8006708 <OLED_DrawStr>
		OLED_UpdateScreen();
 800078a:	f006 f825 	bl	80067d8 <OLED_UpdateScreen>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
 800078e:	2201      	movs	r2, #1
 8000790:	4904      	ldr	r1, [pc, #16]	; (80007a4 <main+0x9c>)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <main+0xa0>)
 8000794:	f003 fdc6 	bl	8004324 <HAL_UART_Receive_IT>
		HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f000 fc9f 	bl	80010dc <HAL_Delay>
		if(flag_pacote_completo)
 800079e:	e7d5      	b.n	800074c <main+0x44>
 80007a0:	20000100 	.word	0x20000100
 80007a4:	20000249 	.word	0x20000249
 80007a8:	2000014c 	.word	0x2000014c
 80007ac:	20000084 	.word	0x20000084
 80007b0:	2000024a 	.word	0x2000024a
 80007b4:	08007288 	.word	0x08007288
 80007b8:	08007230 	.word	0x08007230
 80007bc:	2000024c 	.word	0x2000024c
 80007c0:	08007240 	.word	0x08007240
 80007c4:	20000000 	.word	0x20000000

080007c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	2238      	movs	r2, #56	; 0x38
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 f892 	bl	8006900 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f001 ff27 	bl	8002640 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007f2:	230a      	movs	r3, #10
 80007f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4618      	mov	r0, r3
 8000826:	f001 ffbf 	bl	80027a8 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x6c>
	{
		Error_Handler();
 8000830:	f000 f994 	bl	8000b5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2102      	movs	r1, #2
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fabd 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000858:	f000 f980 	bl	8000b5c <Error_Handler>
	}
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C3_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C3_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00602173;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C3_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C3_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C3_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_I2C3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C3_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_I2C3_Init+0x74>)
 80008a0:	f001 f97c 	bl	8001b9c <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 80008aa:	f000 f957 	bl	8000b5c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C3_Init+0x74>)
 80008b2:	f001 fe2d 	bl	8002510 <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 80008bc:	f000 f94e 	bl	8000b5c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2C3_Init+0x74>)
 80008c4:	f001 fe6f 	bl	80025a6 <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 80008ce:	f000 f945 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000084 	.word	0x20000084
 80008dc:	40007800 	.word	0x40007800
 80008e0:	00602173 	.word	0x00602173

080008e4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_RTC_Init+0x50>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_RTC_Init+0x54>)
 80008ec:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_RTC_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_RTC_Init+0x50>)
 80008f6:	227f      	movs	r2, #127	; 0x7f
 80008f8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_RTC_Init+0x50>)
 80008fc:	22ff      	movs	r2, #255	; 0xff
 80008fe:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_RTC_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_RTC_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_RTC_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_RTC_Init+0x50>)
 8000914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000918:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_RTC_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_RTC_Init+0x50>)
 8000922:	f002 fe5f 	bl	80035e4 <HAL_RTC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_RTC_Init+0x4c>
	{
		Error_Handler();
 800092c:	f000 f916 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000d8 	.word	0x200000d8
 8000938:	40002800 	.word	0x40002800

0800093c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM3_Init+0x94>)
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_TIM3_Init+0x98>)
 800095e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 199;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_TIM3_Init+0x94>)
 8000962:	22c7      	movs	r2, #199	; 0xc7
 8000964:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_TIM3_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 239;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM3_Init+0x94>)
 800096e:	22ef      	movs	r2, #239	; 0xef
 8000970:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_TIM3_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_TIM3_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800097e:	4814      	ldr	r0, [pc, #80]	; (80009d0 <MX_TIM3_Init+0x94>)
 8000980:	f002 ff4d 	bl	800381e <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800098a:	f000 f8e7 	bl	8000b5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_TIM3_Init+0x94>)
 800099c:	f003 f950 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80009a6:	f000 f8d9 	bl	8000b5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_TIM3_Init+0x94>)
 80009b8:	f003 fb9c 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80009c2:	f000 f8cb 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000100 	.word	0x20000100
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART3_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a22:	f003 fc2f 	bl	8004284 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000a2c:	f000 f896 	bl	8000b5c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a34:	f005 fbc9 	bl	80061ca <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000a3e:	f000 f88d 	bl	8000b5c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a46:	f005 fbfe 	bl	8006246 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000a50:	f000 f884 	bl	8000b5c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a56:	f005 fb7f 	bl	8006158 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000a60:	f000 f87c 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000014c 	.word	0x2000014c
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6493      	str	r3, [r2, #72]	; 0x48
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6493      	str	r3, [r2, #72]	; 0x48
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_DMA_Init+0x50>)
 8000a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200b      	movs	r0, #11
 8000aac:	f000 fc13 	bl	80012d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab0:	200b      	movs	r0, #11
 8000ab2:	f000 fc2a 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_GPIO_Init+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x94>)
 8000b2a:	f001 f805 	bl	8001b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b34:	2311      	movs	r3, #17
 8000b36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_GPIO_Init+0x94>)
 8000b48:	f000 fe74 	bl	8001834 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400

08000b5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b9e:	f001 fdf3 	bl	8002788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09a      	sub	sp, #104	; 0x68
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	2244      	movs	r2, #68	; 0x44
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 fe95 	bl	8006900 <memset>
  if(hi2c->Instance==I2C3)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <HAL_I2C_MspInit+0xa8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d137      	bne.n	8000c50 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fb08 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff ffaf 	bl	8000b5c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c30:	4619      	mov	r1, r3
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <HAL_I2C_MspInit+0xb0>)
 8000c34:	f000 fdfe 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c42:	6593      	str	r3, [r2, #88]	; 0x58
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3768      	adds	r7, #104	; 0x68
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40007800 	.word	0x40007800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000800 	.word	0x48000800

08000c64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2244      	movs	r2, #68	; 0x44
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fe43 	bl	8006900 <memset>
  if(hrtc->Instance==RTC)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_RTC_MspInit+0x70>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d123      	bne.n	8000ccc <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c88:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fab5 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ca0:	f7ff ff5c 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_RTC_MspInit+0x74>)
 8000ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_RTC_MspInit+0x74>)
 8000cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_RTC_MspInit+0x74>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_RTC_MspInit+0x74>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_RTC_MspInit+0x74>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3750      	adds	r7, #80	; 0x50
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40002800 	.word	0x40002800
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_TIM_Base_MspInit+0x44>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d113      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	201d      	movs	r0, #29
 8000d0c:	f000 fae3 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d10:	201d      	movs	r0, #29
 8000d12:	f000 fafa 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40000400 	.word	0x40000400
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	; 0x70
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	2244      	movs	r2, #68	; 0x44
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f005 fdd9 	bl	8006900 <memset>
  if(huart->Instance==USART3)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_UART_MspInit+0x148>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 8086 	bne.w	8000e66 <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fa4c 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d72:	f7ff fef3 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <HAL_UART_MspInit+0x14c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PB9     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4827      	ldr	r0, [pc, #156]	; (8000e78 <HAL_UART_MspInit+0x150>)
 8000ddc:	f000 fd2a 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df2:	2307      	movs	r3, #7
 8000df4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0x154>)
 8000dfe:	f000 fd19 	bl	8001834 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_UART_MspInit+0x15c>)
 8000e06:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e0a:	221c      	movs	r2, #28
 8000e0c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e3a:	f000 fa81 	bl	8001340 <HAL_DMA_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8000e44:	f7ff fe8a 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_UART_MspInit+0x158>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2027      	movs	r0, #39	; 0x27
 8000e5c:	f000 fa3b 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e60:	2027      	movs	r0, #39	; 0x27
 8000e62:	f000 fa52 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3770      	adds	r7, #112	; 0x70
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	200001e0 	.word	0x200001e0
 8000e84:	40020008 	.word	0x40020008

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f8e4 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Channel1_IRQHandler+0x10>)
 8000ee2:	f000 fb95 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001e0 	.word	0x200001e0

08000ef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM3_IRQHandler+0x10>)
 8000ef6:	f002 fd53 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000100 	.word	0x20000100

08000f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USART3_IRQHandler+0x10>)
 8000f0a:	f003 fa57 	bl	80043bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000014c 	.word	0x2000014c

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f005 fce2 	bl	8006910 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20008000 	.word	0x20008000
 8000f78:	00000600 	.word	0x00000600
 8000f7c:	20000260 	.word	0x20000260
 8000f80:	20000bc8 	.word	0x20000bc8

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f005 fca1 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fb95 	bl	8000708 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fec:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8000ff0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ff4:	20000bc8 	.word	0x20000bc8

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f95b 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fda4 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d022      	beq.n	8001086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_InitTick+0x6c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f966 	bl	8001326 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	f000 f932 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000014 	.word	0x20000014
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000010 	.word	0x20000010

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x1c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x1c>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000264 	.word	0x20000264
 80010c0:	20000014 	.word	0x20000014

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000264 	.word	0x20000264

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d004      	beq.n	8001100 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	bf00      	nop
 8001102:	f7ff ffdf 	bl	80010c4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f7      	bhi.n	8001102 <HAL_Delay+0x26>
  {
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000014 	.word	0x20000014

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff40 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa4 	bl	800127c <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e08d      	b.n	800146e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_DMA_Init+0x138>)
 800135a:	429a      	cmp	r2, r3
 800135c:	d80f      	bhi.n	800137e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_DMA_Init+0x13c>)
 8001366:	4413      	add	r3, r2
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_DMA_Init+0x140>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	009a      	lsls	r2, r3, #2
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a42      	ldr	r2, [pc, #264]	; (8001484 <HAL_DMA_Init+0x144>)
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	e00e      	b.n	800139c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_DMA_Init+0x148>)
 8001386:	4413      	add	r3, r2
 8001388:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <HAL_DMA_Init+0x140>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	009a      	lsls	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a3c      	ldr	r2, [pc, #240]	; (800148c <HAL_DMA_Init+0x14c>)
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f9be 	bl	8001770 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013fc:	d102      	bne.n	8001404 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001418:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d010      	beq.n	8001444 <HAL_DMA_Init+0x104>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d80c      	bhi.n	8001444 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9de 	bl	80017ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e008      	b.n	8001456 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020407 	.word	0x40020407
 800147c:	bffdfff8 	.word	0xbffdfff8
 8001480:	cccccccd 	.word	0xcccccccd
 8001484:	40020000 	.word	0x40020000
 8001488:	bffdfbf8 	.word	0xbffdfbf8
 800148c:	40020400 	.word	0x40020400

08001490 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d005      	beq.n	80014b4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e037      	b.n	8001524 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 020e 	bic.w	r2, r2, #14
 80014c2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001500:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001518:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001522:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d00d      	beq.n	8001576 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e047      	b.n	8001606 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 020e 	bic.w	r2, r2, #14
 8001584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f003 021f 	and.w	r2, r3, #31
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
    }
  }
  return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2204      	movs	r2, #4
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d026      	beq.n	800168a <HAL_DMA_IRQHandler+0x7a>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d021      	beq.n	800168a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2104      	movs	r1, #4
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	2b00      	cmp	r3, #0
 800167e:	d071      	beq.n	8001764 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001688:	e06c      	b.n	8001764 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2202      	movs	r2, #2
 8001694:	409a      	lsls	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d02e      	beq.n	80016fc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d029      	beq.n	80016fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10b      	bne.n	80016ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020a 	bic.w	r2, r2, #10
 80016c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f003 021f 	and.w	r2, r3, #31
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2102      	movs	r1, #2
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d038      	beq.n	8001764 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016fa:	e033      	b.n	8001764 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2208      	movs	r2, #8
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d02a      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d025      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 020e 	bic.w	r2, r2, #14
 8001728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 021f 	and.w	r2, r3, #31
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001764:	bf00      	nop
 8001766:	bf00      	nop
}
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001780:	429a      	cmp	r2, r3
 8001782:	d802      	bhi.n	800178a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e001      	b.n	800178e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800178c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3b08      	subs	r3, #8
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2201      	movs	r2, #1
 80017c4:	409a      	lsls	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40020407 	.word	0x40020407
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020820 	.word	0x40020820
 80017e4:	cccccccd 	.word	0xcccccccd
 80017e8:	40020880 	.word	0x40020880

080017ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800180e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2201      	movs	r2, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	1000823f 	.word	0x1000823f
 8001830:	40020940 	.word	0x40020940

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001842:	e15a      	b.n	8001afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 814c 	beq.w	8001af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d005      	beq.n	8001874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001870:	2b02      	cmp	r3, #2
 8001872:	d130      	bne.n	80018d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018aa:	2201      	movs	r2, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 0201 	and.w	r2, r3, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d017      	beq.n	8001912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d123      	bne.n	8001966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6613      	str	r3, [r2, #96]	; 0x60
 80019b4:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ea:	d01f      	beq.n	8001a2c <HAL_GPIO_Init+0x1f8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d019      	beq.n	8001a28 <HAL_GPIO_Init+0x1f4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1f0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2f8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2fc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a14:	2305      	movs	r3, #5
 8001a16:	e00a      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3e:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a70:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9a:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f ae9d 	bne.w	8001844 <HAL_GPIO_Init+0x10>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	48001000 	.word	0x48001000
 8001b30:	48001400 	.word	0x48001400
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43d9      	mvns	r1, r3
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	400b      	ands	r3, r1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e08d      	b.n	8001cca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fff4 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e006      	b.n	8001c24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d108      	bne.n	8001c3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	e007      	b.n	8001c4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69d9      	ldr	r1, [r3, #28]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1a      	ldr	r2, [r3, #32]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	817b      	strh	r3, [r7, #10]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	f040 80fd 	bne.w	8001ef0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x30>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0f6      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f9da 	bl	80010c4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2319      	movs	r3, #25
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fa00 	bl	8002124 <I2C_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e1      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2bff      	cmp	r3, #255	; 0xff
 8001d5e:	d906      	bls.n	8001d6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	22ff      	movs	r2, #255	; 0xff
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e007      	b.n	8001d7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	8979      	ldrh	r1, [r7, #10]
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <HAL_I2C_Master_Transmit+0x228>)
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fb6f 	bl	80024ac <I2C_TransferConfig>
 8001dce:	e066      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <HAL_I2C_Master_Transmit+0x228>)
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fb64 	bl	80024ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001de4:	e05b      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f9f3 	bl	80021d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07b      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d034      	beq.n	8001e9e <HAL_I2C_Master_Transmit+0x1ca>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d130      	bne.n	8001e9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	2200      	movs	r2, #0
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f96c 	bl	8002124 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e04d      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2bff      	cmp	r3, #255	; 0xff
 8001e5e:	d90e      	bls.n	8001e7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	22ff      	movs	r2, #255	; 0xff
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fb18 	bl	80024ac <I2C_TransferConfig>
 8001e7c:	e00f      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	8979      	ldrh	r1, [r7, #10]
 8001e90:	2300      	movs	r3, #0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fb07 	bl	80024ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d19e      	bne.n	8001de6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	6a39      	ldr	r1, [r7, #32]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f9d9 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01a      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_I2C_Master_Transmit+0x22c>)
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	80002000 	.word	0x80002000
 8001f00:	fe00e800 	.word	0xfe00e800

08001f04 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	f040 80d6 	bne.w	80020d2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0cc      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2C_IsDeviceReady+0x44>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e0c5      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_IsDeviceReady+0x72>
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f74:	e006      	b.n	8001f84 <HAL_I2C_IsDeviceReady+0x80>
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f80:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f89b 	bl	80010c4 <HAL_GetTick>
 8001f8e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001fbc:	e034      	b.n	8002028 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d01a      	beq.n	8001ffc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f87d 	bl	80010c4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <HAL_I2C_IsDeviceReady+0xd8>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e06b      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b20      	cmp	r3, #32
 8002008:	bf0c      	ite	eq
 800200a:	2301      	moveq	r3, #1
 800200c:	2300      	movne	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_I2C_IsDeviceReady+0x130>
 800202e:	7fbb      	ldrb	r3, [r7, #30]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0c4      	beq.n	8001fbe <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d01a      	beq.n	8002078 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	2120      	movs	r1, #32
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f869 	bl	8002124 <I2C_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e03b      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e02d      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	2120      	movs	r1, #32
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f84e 	bl	8002124 <I2C_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2220      	movs	r2, #32
 80020a0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f63f af56 	bhi.w	8001f5e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0220 	orr.w	r2, r3, #32
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d103      	bne.n	80020fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d007      	beq.n	8002118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	619a      	str	r2, [r3, #24]
  }
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002134:	e03b      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f8d6 	bl	80022ec <I2C_IsErrorOccurred>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e041      	b.n	80021ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d02d      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7fe ffb7 	bl	80010c4 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d122      	bne.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	429a      	cmp	r2, r3
 8002184:	d113      	bne.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4013      	ands	r3, r2
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d0b4      	beq.n	8002136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e2:	e033      	b.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f87f 	bl	80022ec <I2C_IsErrorOccurred>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e031      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d025      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7fe ff60 	bl	80010c4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11a      	bne.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d013      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e007      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d1c4      	bne.n	80021e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002270:	e02f      	b.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f838 	bl	80022ec <I2C_IsErrorOccurred>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02d      	b.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002286:	f7fe ff1d 	bl	80010c4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d302      	bcc.n	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11a      	bne.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d013      	beq.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d1c8      	bne.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d068      	beq.n	80023ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2210      	movs	r2, #16
 800231e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002320:	e049      	b.n	80023b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d045      	beq.n	80023b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fecb 	bl	80010c4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_IsErrorOccurred+0x54>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13a      	bne.n	80023b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002352:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002362:	d121      	bne.n	80023a8 <I2C_IsErrorOccurred+0xbc>
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800236a:	d01d      	beq.n	80023a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b20      	cmp	r3, #32
 8002370:	d01a      	beq.n	80023a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002380:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002382:	f7fe fe9f 	bl	80010c4 <HAL_GetTick>
 8002386:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002388:	e00e      	b.n	80023a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800238a:	f7fe fe9b 	bl	80010c4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b19      	cmp	r3, #25
 8002396:	d907      	bls.n	80023a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f043 0320 	orr.w	r3, r3, #32
 800239e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80023a6:	e006      	b.n	80023b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d1e9      	bne.n	800238a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d003      	beq.n	80023cc <I2C_IsErrorOccurred+0xe0>
 80023c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0aa      	beq.n	8002322 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01c      	beq.n	800249a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fe3b 	bl	80020dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <I2C_IsErrorOccurred+0x1bc>)
 8002472:	400b      	ands	r3, r1
 8002474:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800249a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	fe00e800 	.word	0xfe00e800

080024ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	817b      	strh	r3, [r7, #10]
 80024ba:	4613      	mov	r3, r2
 80024bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024c4:	7a7b      	ldrb	r3, [r7, #9]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	0d5b      	lsrs	r3, r3, #21
 80024e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <I2C_TransferConfig+0x60>)
 80024ec:	430b      	orrs	r3, r1
 80024ee:	43db      	mvns	r3, r3
 80024f0:	ea02 0103 	and.w	r1, r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	03ff63ff 	.word	0x03ff63ff

08002510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	d138      	bne.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002530:	2302      	movs	r3, #2
 8002532:	e032      	b.n	800259a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d139      	bne.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e033      	b.n	8002632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2224      	movs	r2, #36	; 0x24
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d141      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800264e:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d131      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800265c:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002662:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002674:	4a41      	ldr	r2, [pc, #260]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2232      	movs	r2, #50	; 0x32
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a3f      	ldr	r2, [pc, #252]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	3301      	adds	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002692:	e002      	b.n	800269a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3b01      	subs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d102      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f2      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ae:	4b33      	ldr	r3, [pc, #204]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d158      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e057      	b.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026d0:	e04d      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d141      	bne.n	800275e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d131      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2232      	movs	r2, #50	; 0x32
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271e:	e002      	b.n	8002726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b01      	subs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d102      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f2      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d112      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e011      	b.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800275c:	e007      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40007000 	.word	0x40007000
 8002780:	2000000c 	.word	0x2000000c
 8002784:	431bde83 	.word	0x431bde83

08002788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e2fe      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b97      	ldr	r3, [pc, #604]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3e>
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e2d9      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a84      	ldr	r2, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7b      	ldr	r2, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b78      	ldr	r3, [pc, #480]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a74      	ldr	r2, [pc, #464]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fc30 	bl	80010c4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fc2c 	bl	80010c4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e29e      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fc1c 	bl	80010c4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fc18 	bl	80010c4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e28a      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a2:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d075      	beq.n	80029aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d102      	bne.n	80028de <HAL_RCC_OscConfig+0x136>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_OscConfig+0x13c>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d11f      	bne.n	8002924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x154>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e25d      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	4946      	ldr	r1, [pc, #280]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002910:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fb89 	bl	800102c <HAL_InitTick>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d043      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e249      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fbc4 	bl	80010c4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe fbc0 	bl	80010c4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e232      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	492d      	ldr	r1, [pc, #180]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
 8002972:	e01a      	b.n	80029aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800297a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fba0 	bl	80010c4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fb9c 	bl	80010c4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e20e      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1e0>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d041      	beq.n	8002a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fb79 	bl	80010c4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe fb75 	bl	80010c4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1e7      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ef      	beq.n	80029d6 <HAL_RCC_OscConfig+0x22e>
 80029f6:	e020      	b.n	8002a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fb5c 	bl	80010c4 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0e:	e00d      	b.n	8002a2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fb58 	bl	80010c4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d906      	bls.n	8002a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1ca      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ea      	bne.n	8002a10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80a6 	beq.w	8002b94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a4c:	4b84      	ldr	r3, [pc, #528]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2b4>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2b6>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	4a7e      	ldr	r2, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <HAL_RCC_OscConfig+0x4bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x4bc>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7fe fb15 	bl	80010c4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fb11 	bl	80010c4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e183      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x4bc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d108      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x32e>
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad4:	e024      	b.n	8002b20 <HAL_RCC_OscConfig+0x378>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d110      	bne.n	8002b00 <HAL_RCC_OscConfig+0x358>
 8002ade:	4b60      	ldr	r3, [pc, #384]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	4a5a      	ldr	r2, [pc, #360]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afe:	e00f      	b.n	8002b20 <HAL_RCC_OscConfig+0x378>
 8002b00:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	4a56      	ldr	r2, [pc, #344]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b10:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d016      	beq.n	8002b56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe facc 	bl	80010c4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fac8 	bl	80010c4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e138      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ed      	beq.n	8002b30 <HAL_RCC_OscConfig+0x388>
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe fab5 	bl	80010c4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fab1 	bl	80010c4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e121      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ed      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d03c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fa84 	bl	80010c4 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bc0:	f7fe fa80 	bl	80010c4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0f2      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ef      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x418>
 8002be0:	e01b      	b.n	8002c1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fa67 	bl	80010c4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfa:	f7fe fa63 	bl	80010c4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0d5      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ef      	bne.n	8002bfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80c9 	beq.w	8002db6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	f000 8083 	beq.w	8002d38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d15e      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x4b8>)
 8002c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fa3d 	bl	80010c4 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4c:	e00c      	b.n	8002c68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fa39 	bl	80010c4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d905      	bls.n	8002c68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0ab      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ec      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c74:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <HAL_RCC_OscConfig+0x61c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6a11      	ldr	r1, [r2, #32]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c8e:	0212      	lsls	r2, r2, #8
 8002c90:	4311      	orrs	r1, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c96:	0852      	lsrs	r2, r2, #1
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0552      	lsls	r2, r2, #21
 8002c9c:	4311      	orrs	r1, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca2:	0852      	lsrs	r2, r2, #1
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0652      	lsls	r2, r2, #25
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cae:	06d2      	lsls	r2, r2, #27
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4943      	ldr	r1, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc4:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f9f8 	bl	80010c4 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f9f4 	bl	80010c4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e066      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x530>
 8002cf6:	e05e      	b.n	8002db6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe f9de 	bl	80010c4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f9da 	bl	80010c4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04c      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	4924      	ldr	r1, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_OscConfig+0x620>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	60cb      	str	r3, [r1, #12]
 8002d36:	e03e      	b.n	8002db6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e039      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCC_OscConfig+0x618>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0203 	and.w	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d12c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d123      	bne.n	8002db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d11b      	bne.n	8002db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d113      	bne.n	8002db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	019f800c 	.word	0x019f800c
 8002dc8:	feeefffc 	.word	0xfeeefffc

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e11e      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b8e      	ldr	r3, [pc, #568]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	498c      	ldr	r1, [pc, #560]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e106      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d073      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d129      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0f4      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e38:	f000 f99e 	bl	8003178 <RCC_GetSysClockFreqFromPLLSource>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCC_ClockConfig+0x268>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d93f      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e46:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d033      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12f      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e024      	b.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0c6      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e94:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0be      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ea4:	f000 f8ce 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <HAL_RCC_ClockConfig+0x268>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d909      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eba:	4a5d      	ldr	r2, [pc, #372]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4957      	ldr	r1, [pc, #348]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f8f4 	bl	80010c4 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe f8f0 	bl	80010c4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e095      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4936      	ldr	r1, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f62:	4b33      	ldr	r3, [pc, #204]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4a32      	ldr	r2, [pc, #200]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d21d      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 020f 	bic.w	r2, r3, #15
 8002f84:	4929      	ldr	r1, [pc, #164]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe f89a 	bl	80010c4 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fe f896 	bl	80010c4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e03b      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1ed      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4917      	ldr	r1, [pc, #92]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff6:	f000 f825 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490c      	ldr	r1, [pc, #48]	; (8003038 <HAL_RCC_ClockConfig+0x26c>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x270>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f806 	bl	800102c <HAL_InitTick>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	04c4b400 	.word	0x04c4b400
 8003038:	08007248 	.word	0x08007248
 800303c:	2000000c 	.word	0x2000000c
 8003040:	20000010 	.word	0x20000010

08003044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d102      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e047      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d102      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e03e      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d136      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3301      	adds	r3, #1
 8003090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a2:	68d2      	ldr	r2, [r2, #12]
 80030a4:	0a12      	lsrs	r2, r2, #8
 80030a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
      break;
 80030b0:	e00c      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	0a12      	lsrs	r2, r2, #8
 80030c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
      break;
 80030ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0e5b      	lsrs	r3, r3, #25
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e001      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030ec:	693b      	ldr	r3, [r7, #16]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200

08003108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003124:	f7ff fff0 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4904      	ldr	r1, [pc, #16]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	08007258 	.word	0x08007258

0800314c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003150:	f7ff ffda 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0adb      	lsrs	r3, r3, #11
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08007258 	.word	0x08007258

08003178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d10c      	bne.n	80031b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a6:	68d2      	ldr	r2, [r2, #12]
 80031a8:	0a12      	lsrs	r2, r2, #8
 80031aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	617b      	str	r3, [r7, #20]
    break;
 80031b4:	e00c      	b.n	80031d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	0a12      	lsrs	r2, r2, #8
 80031c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031c8:	fb02 f303 	mul.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    break;
 80031ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0e5b      	lsrs	r3, r3, #25
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	3301      	adds	r3, #1
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031ea:	687b      	ldr	r3, [r7, #4]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	00f42400 	.word	0x00f42400

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003210:	2300      	movs	r3, #0
 8003212:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8098 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	2301      	movs	r3, #1
 800324c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800325a:	f7fd ff33 	bl	80010c4 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003260:	e009      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd ff2f 	bl	80010c4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d902      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	74fb      	strb	r3, [r7, #19]
        break;
 8003274:	e005      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ef      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d159      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d019      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd feef 	bl	80010c4 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	e00b      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fd feeb 	bl	80010c4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d902      	bls.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003300:	e006      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ec      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	4903      	ldr	r1, [pc, #12]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800332c:	e008      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
 8003332:	e005      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003340:	7c7b      	ldrb	r3, [r7, #17]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003346:	4ba6      	ldr	r3, [pc, #664]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4aa5      	ldr	r2, [pc, #660]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335e:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	499c      	ldr	r1, [pc, #624]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003380:	4b97      	ldr	r3, [pc, #604]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 020c 	bic.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4994      	ldr	r1, [pc, #592]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a2:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	498b      	ldr	r1, [pc, #556]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4983      	ldr	r1, [pc, #524]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e6:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	497a      	ldr	r1, [pc, #488]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	4972      	ldr	r1, [pc, #456]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4969      	ldr	r1, [pc, #420]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800344c:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4961      	ldr	r1, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	4958      	ldr	r1, [pc, #352]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4950      	ldr	r1, [pc, #320]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c8:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4942      	ldr	r1, [pc, #264]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a3c      	ldr	r2, [pc, #240]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4934      	ldr	r1, [pc, #208]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	4926      	ldr	r1, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003562:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4918      	ldr	r1, [pc, #96]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d070      	beq.n	80036d8 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fb2a 	bl	8000c64 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d04f      	beq.n	80036c6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	22ca      	movs	r2, #202	; 0xca
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2253      	movs	r2, #83	; 0x53
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f878 	bl	800372c <RTC_EnterInitMode>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d126      	bne.n	8003694 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003658:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6999      	ldr	r1, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f884 	bl	8003798 <RTC_ExitInitMode>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d110      	bne.n	80036bc <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
 80036c4:	e001      	b.n	80036ca <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_RTC_WaitForSynchro+0x44>)
 80036f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80036f4:	f7fd fce6 	bl	80010c4 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80036fa:	e009      	b.n	8003710 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036fc:	f7fd fce2 	bl	80010c4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	d901      	bls.n	8003710 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e007      	b.n	8003720 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ee      	beq.n	80036fc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	0001005f 	.word	0x0001005f

0800372c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d123      	bne.n	800378e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003754:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003756:	f7fd fcb5 	bl	80010c4 <HAL_GetTick>
 800375a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800375c:	e00d      	b.n	800377a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800375e:	f7fd fcb1 	bl	80010c4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800376c:	d905      	bls.n	800377a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2203      	movs	r2, #3
 8003776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <RTC_EnterInitMode+0x62>
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d1e7      	bne.n	800375e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff8e 	bl	80036e4 <HAL_RTC_WaitForSynchro>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d022      	beq.n	8003814 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e01b      	b.n	8003814 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0220 	bic.w	r2, r2, #32
 80037ea:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff79 	bl	80036e4 <HAL_RTC_WaitForSynchro>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2203      	movs	r2, #3
 80037fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e049      	b.n	80038c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fa49 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f000 fb11 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d001      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e04a      	b.n	800397a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a21      	ldr	r2, [pc, #132]	; (8003988 <HAL_TIM_Base_Start_IT+0xbc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d013      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_TIM_Base_Start_IT+0xc0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_TIM_Base_Start_IT+0xc4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <HAL_TIM_Base_Start_IT+0xc8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_TIM_Base_Start_IT+0xcc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d115      	bne.n	8003964 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_TIM_Base_Start_IT+0xd0>)
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d015      	beq.n	8003976 <HAL_TIM_Base_Start_IT+0xaa>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d011      	beq.n	8003976 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003962:	e008      	b.n	8003976 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e000      	b.n	8003978 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	00010007 	.word	0x00010007

080039a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0202 	mvn.w	r2, #2
 80039d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa2c 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa1e 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa2f 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d020      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa06 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9f8 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa09 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d020      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0208 	mvn.w	r2, #8
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2204      	movs	r2, #4
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9e0 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9d2 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9e3 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0210 	mvn.w	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9ba 	bl	8003e48 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9ac 	bl	8003e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9bd 	bl	8003e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0201 	mvn.w	r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fc fd96 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb69 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb61 	bl	8004220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f977 	bl	8003e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0220 	mvn.w	r2, #32
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb29 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fb35 	bl	8004234 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb2d 	bl	8004248 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fb25 	bl	800425c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb1d 	bl	8004270 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_ConfigClockSource+0x1c>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0de      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x1da>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a63      	ldr	r2, [pc, #396]	; (8003e24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	f000 80a9 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003c9c:	4a61      	ldr	r2, [pc, #388]	; (8003e24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	f200 80ae 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f000 80a1 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003cac:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f200 80a6 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb4:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	f000 8099 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003cbc:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	f200 809e 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f000 8091 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f200 8096 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003cd8:	f000 8089 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003cdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ce0:	f200 808e 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce8:	d03e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x128>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	f200 8087 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	f000 8086 	beq.w	8003e06 <HAL_TIM_ConfigClockSource+0x1c6>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d87f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d01a      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xfa>
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d87b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d050      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x16e>
 8003d0c:	2b60      	cmp	r3, #96	; 0x60
 8003d0e:	d877      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d10:	2b50      	cmp	r3, #80	; 0x50
 8003d12:	d03c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x14e>
 8003d14:	2b50      	cmp	r3, #80	; 0x50
 8003d16:	d873      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d058      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x18e>
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d86f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d064      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d86b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d060      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d867      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d05a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x1ae>
 8003d38:	e062      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	f000 f9b3 	bl	80040b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04f      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	f000 f99c 	bl	80040b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e03c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f90e 	bl	8003fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	; 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f967 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003dac:	e02c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 f92d 	bl	800401a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	; 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f957 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8ee 	bl	8003fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f947 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f93e 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	00100070 	.word	0x00100070
 8003e28:	00100040 	.word	0x00100040
 8003e2c:	00100030 	.word	0x00100030
 8003e30:	00100020 	.word	0x00100020

08003e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3f      	ldr	r2, [pc, #252]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a33      	ldr	r2, [pc, #204]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00f      	beq.n	8003f6c <TIM_Base_SetConfig+0xe8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0xe8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0xe8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0xe8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]
  }
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40013400 	.word	0x40013400
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800

08003fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 030a 	bic.w	r3, r3, #10
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 0210 	bic.w	r2, r3, #16
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e065      	b.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d013      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10c      	bne.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40014000 	.word	0x40014000

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e042      	b.n	800431c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc fd3d 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2224      	movs	r2, #36	; 0x24
 80042b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fe84 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fbb5 	bl	8004a44 <UART_SetConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01b      	b.n	800431c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 ff03 	bl	8005120 <UART_CheckIdleState>
 800431a:	4603      	mov	r3, r0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	2b20      	cmp	r3, #32
 800433a:	d137      	bne.n	80043ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_UART_Receive_IT+0x24>
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e030      	b.n	80043ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_UART_Receive_IT+0x94>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01f      	beq.n	800439c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	613b      	str	r3, [r7, #16]
   return(result);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	623b      	str	r3, [r7, #32]
 800438a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69f9      	ldr	r1, [r7, #28]
 800438e:	6a3a      	ldr	r2, [r7, #32]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	61bb      	str	r3, [r7, #24]
   return(result);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	461a      	mov	r2, r3
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 ffd4 	bl	8005350 <UART_Start_Receive_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40008000 	.word	0x40008000

080043bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b0ba      	sub	sp, #232	; 0xe8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80043ea:	4013      	ands	r3, r2
 80043ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11b      	bne.n	8004430 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 82e3 	beq.w	80049ec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
      }
      return;
 800442e:	e2dd      	b.n	80049ec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8123 	beq.w	8004680 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800443a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800443e:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <HAL_UART_IRQHandler+0x2b8>)
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800444a:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_UART_IRQHandler+0x2bc>)
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8116 	beq.w	8004680 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <HAL_UART_IRQHandler+0xc8>
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0xf8>
 8004490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2202      	movs	r2, #2
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f043 0204 	orr.w	r2, r3, #4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0x128>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2204      	movs	r2, #4
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f043 0202 	orr.w	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004500:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <HAL_UART_IRQHandler+0x2b8>)
 8004502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2208      	movs	r2, #8
 800450e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f043 0208 	orr.w	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_UART_IRQHandler+0x196>
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8249 	beq.w	80049f0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d054      	beq.n	8004660 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 ffec 	bl	8005594 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d146      	bne.n	8004658 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800460e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1d9      	bne.n	80045ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <HAL_UART_IRQHandler+0x2c0>)
 8004628:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc ff86 	bl	8001542 <HAL_DMA_Abort_IT>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d019      	beq.n	8004670 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800464a:	4610      	mov	r0, r2
 800464c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464e:	e00f      	b.n	8004670 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f9e1 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004656:	e00b      	b.n	8004670 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9dd 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465e:	e007      	b.n	8004670 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9d9 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800466e:	e1bf      	b.n	80049f0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	bf00      	nop
    return;
 8004672:	e1bd      	b.n	80049f0 <HAL_UART_IRQHandler+0x634>
 8004674:	10000001 	.word	0x10000001
 8004678:	04000120 	.word	0x04000120
 800467c:	08005661 	.word	0x08005661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 8153 	bne.w	8004930 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 814c 	beq.w	8004930 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8145 	beq.w	8004930 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2210      	movs	r2, #16
 80046ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	f040 80bb 	bne.w	8004834 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 818f 	beq.w	80049f4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f080 8187 	bcs.w	80049f4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8087 	bne.w	8004812 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800472e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004732:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800473a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1da      	bne.n	8004704 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800475e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800477a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e1      	bne.n	800474e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e3      	bne.n	800478a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	f023 0310 	bic.w	r3, r3, #16
 80047e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e4      	bne.n	80047d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc fe3f 	bl	8001490 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004824:	b29b      	uxth	r3, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8fd 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004832:	e0df      	b.n	80049f4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004840:	b29b      	uxth	r3, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80d1 	beq.w	80049f8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80cc 	beq.w	80049f8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
 8004884:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e4      	bne.n	8004860 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	623b      	str	r3, [r7, #32]
   return(result);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048be:	633a      	str	r2, [r7, #48]	; 0x30
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e1      	bne.n	8004896 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	617b      	str	r3, [r7, #20]
   return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e4      	bne.n	80048e6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f87f 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800492e:	e063      	b.n	80049f8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <HAL_UART_IRQHandler+0x59e>
 800493c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fbe2 	bl	800611c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004958:	e051      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d014      	beq.n	8004990 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004982:	2b00      	cmp	r3, #0
 8004984:	d03a      	beq.n	80049fc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
    }
    return;
 800498e:	e035      	b.n	80049fc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_UART_IRQHandler+0x5f4>
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fe6f 	bl	800568c <UART_EndTransmit_IT>
    return;
 80049ae:	e026      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_UART_IRQHandler+0x614>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 fbbb 	bl	8006144 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ce:	e016      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_UART_IRQHandler+0x642>
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da0c      	bge.n	80049fe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fba3 	bl	8006130 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ea:	e008      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
      return;
 80049ec:	bf00      	nop
 80049ee:	e006      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
    return;
 80049f0:	bf00      	nop
 80049f2:	e004      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
      return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
      return;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_UART_IRQHandler+0x642>
    return;
 80049fc:	bf00      	nop
  }
}
 80049fe:	37e8      	adds	r7, #232	; 0xe8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b08c      	sub	sp, #48	; 0x30
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4bab      	ldr	r3, [pc, #684]	; (8004d20 <UART_SetConfig+0x2dc>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4aa0      	ldr	r2, [pc, #640]	; (8004d24 <UART_SetConfig+0x2e0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aac:	4313      	orrs	r3, r2
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f023 010f 	bic.w	r1, r3, #15
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a91      	ldr	r2, [pc, #580]	; (8004d28 <UART_SetConfig+0x2e4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d125      	bne.n	8004b34 <UART_SetConfig+0xf0>
 8004ae8:	4b90      	ldr	r3, [pc, #576]	; (8004d2c <UART_SetConfig+0x2e8>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d81a      	bhi.n	8004b2c <UART_SetConfig+0xe8>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xb8>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b1d 	.word	0x08004b1d
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b12:	e0d6      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1a:	e0d2      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b22:	e0ce      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e0ca      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e0c6      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7d      	ldr	r2, [pc, #500]	; (8004d30 <UART_SetConfig+0x2ec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d138      	bne.n	8004bb0 <UART_SetConfig+0x16c>
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <UART_SetConfig+0x2e8>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d82d      	bhi.n	8004ba8 <UART_SetConfig+0x164>
 8004b4c:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x110>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004ba9 	.word	0x08004ba9
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004ba9 	.word	0x08004ba9
 8004b6c:	08004ba9 	.word	0x08004ba9
 8004b70:	08004ba9 	.word	0x08004ba9
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	08004ba9 	.word	0x08004ba9
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e098      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e094      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e090      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e08c      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e088      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a5f      	ldr	r2, [pc, #380]	; (8004d34 <UART_SetConfig+0x2f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d125      	bne.n	8004c06 <UART_SetConfig+0x1c2>
 8004bba:	4b5c      	ldr	r3, [pc, #368]	; (8004d2c <UART_SetConfig+0x2e8>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc4:	2b30      	cmp	r3, #48	; 0x30
 8004bc6:	d016      	beq.n	8004bf6 <UART_SetConfig+0x1b2>
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d818      	bhi.n	8004bfe <UART_SetConfig+0x1ba>
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d00a      	beq.n	8004be6 <UART_SetConfig+0x1a2>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d814      	bhi.n	8004bfe <UART_SetConfig+0x1ba>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <UART_SetConfig+0x19a>
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d008      	beq.n	8004bee <UART_SetConfig+0x1aa>
 8004bdc:	e00f      	b.n	8004bfe <UART_SetConfig+0x1ba>
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be4:	e06d      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bec:	e069      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf4:	e065      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfc:	e061      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c04:	e05d      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <UART_SetConfig+0x2f4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d125      	bne.n	8004c5c <UART_SetConfig+0x218>
 8004c10:	4b46      	ldr	r3, [pc, #280]	; (8004d2c <UART_SetConfig+0x2e8>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c1c:	d016      	beq.n	8004c4c <UART_SetConfig+0x208>
 8004c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c20:	d818      	bhi.n	8004c54 <UART_SetConfig+0x210>
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d00a      	beq.n	8004c3c <UART_SetConfig+0x1f8>
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d814      	bhi.n	8004c54 <UART_SetConfig+0x210>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <UART_SetConfig+0x1f0>
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d008      	beq.n	8004c44 <UART_SetConfig+0x200>
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x210>
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	e042      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e03e      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4a:	e03a      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c52:	e036      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5a:	e032      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <UART_SetConfig+0x2e0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d12a      	bne.n	8004cbc <UART_SetConfig+0x278>
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <UART_SetConfig+0x2e8>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c74:	d01a      	beq.n	8004cac <UART_SetConfig+0x268>
 8004c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c7a:	d81b      	bhi.n	8004cb4 <UART_SetConfig+0x270>
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c80:	d00c      	beq.n	8004c9c <UART_SetConfig+0x258>
 8004c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c86:	d815      	bhi.n	8004cb4 <UART_SetConfig+0x270>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <UART_SetConfig+0x250>
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d008      	beq.n	8004ca4 <UART_SetConfig+0x260>
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x270>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e012      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e00e      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e00a      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb2:	e006      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cba:	e002      	b.n	8004cc2 <UART_SetConfig+0x27e>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <UART_SetConfig+0x2e0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	f040 80a8 	bne.w	8004e1e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d834      	bhi.n	8004d40 <UART_SetConfig+0x2fc>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x298>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d41 	.word	0x08004d41
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d0f 	.word	0x08004d0f
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d41 	.word	0x08004d41
 8004cf8:	08004d41 	.word	0x08004d41
 8004cfc:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe fa0e 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d06:	e021      	b.n	8004d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <UART_SetConfig+0x2f8>)
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d0c:	e01e      	b.n	8004d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe f999 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d14:	e01a      	b.n	8004d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d1c:	e016      	b.n	8004d4c <UART_SetConfig+0x308>
 8004d1e:	bf00      	nop
 8004d20:	cfff69f3 	.word	0xcfff69f3
 8004d24:	40008000 	.word	0x40008000
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	40004800 	.word	0x40004800
 8004d38:	40004c00 	.word	0x40004c00
 8004d3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 812a 	beq.w	8004fa8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	4a9e      	ldr	r2, [pc, #632]	; (8004fd4 <UART_SetConfig+0x590>)
 8004d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d305      	bcc.n	8004d84 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d903      	bls.n	8004d8c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d8a:	e10d      	b.n	8004fa8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	60fa      	str	r2, [r7, #12]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	4a8e      	ldr	r2, [pc, #568]	; (8004fd4 <UART_SetConfig+0x590>)
 8004d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2200      	movs	r2, #0
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dae:	f7fb fa8f 	bl	80002d0 <__aeabi_uldivmod>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	020b      	lsls	r3, r1, #8
 8004dc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dc8:	0202      	lsls	r2, r0, #8
 8004dca:	6979      	ldr	r1, [r7, #20]
 8004dcc:	6849      	ldr	r1, [r1, #4]
 8004dce:	0849      	lsrs	r1, r1, #1
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	eb12 0804 	adds.w	r8, r2, r4
 8004dda:	eb43 0905 	adc.w	r9, r3, r5
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	469a      	mov	sl, r3
 8004de6:	4693      	mov	fp, r2
 8004de8:	4652      	mov	r2, sl
 8004dea:	465b      	mov	r3, fp
 8004dec:	4640      	mov	r0, r8
 8004dee:	4649      	mov	r1, r9
 8004df0:	f7fb fa6e 	bl	80002d0 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e02:	d308      	bcc.n	8004e16 <UART_SetConfig+0x3d2>
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d204      	bcs.n	8004e16 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e0c8      	b.n	8004fa8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e1c:	e0c4      	b.n	8004fa8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e26:	d167      	bne.n	8004ef8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x43e>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x3f4>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe f960 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe f972 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <UART_SetConfig+0x594>)
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e70:	e00d      	b.n	8004e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe f8e7 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8089 	beq.w	8004fa8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <UART_SetConfig+0x590>)
 8004e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea8:	005a      	lsls	r2, r3, #1
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	441a      	add	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d916      	bls.n	8004ef0 <UART_SetConfig+0x4ac>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d212      	bcs.n	8004ef0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f023 030f 	bic.w	r3, r3, #15
 8004ed2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	8bfb      	ldrh	r3, [r7, #30]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	8bfa      	ldrh	r2, [r7, #30]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e05b      	b.n	8004fa8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ef6:	e057      	b.n	8004fa8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d828      	bhi.n	8004f52 <UART_SetConfig+0x50e>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x4c4>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f53 	.word	0x08004f53
 8004f18:	08004f43 	.word	0x08004f43
 8004f1c:	08004f53 	.word	0x08004f53
 8004f20:	08004f53 	.word	0x08004f53
 8004f24:	08004f53 	.word	0x08004f53
 8004f28:	08004f4b 	.word	0x08004f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7fe f8f8 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f32:	e014      	b.n	8004f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f34:	f7fe f90a 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f3a:	e010      	b.n	8004f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <UART_SetConfig+0x594>)
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f40:	e00d      	b.n	8004f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f42:	f7fe f87f 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f48:	e009      	b.n	8004f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f50:	e005      	b.n	8004f5e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d021      	beq.n	8004fa8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <UART_SetConfig+0x590>)
 8004f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	441a      	add	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d909      	bls.n	8004fa2 <UART_SetConfig+0x55e>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f94:	d205      	bcs.n	8004fa2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	e002      	b.n	8004fa8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3730      	adds	r7, #48	; 0x30
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08007260 	.word	0x08007260
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d10a      	bne.n	80050f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b098      	sub	sp, #96	; 0x60
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fb ffc8 	bl	80010c4 <HAL_GetTick>
 8005134:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d12f      	bne.n	80051a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f88e 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d022      	beq.n	80051a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800516c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005172:	653b      	str	r3, [r7, #80]	; 0x50
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517c:	647b      	str	r3, [r7, #68]	; 0x44
 800517e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e063      	b.n	800526c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d149      	bne.n	8005246 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ba:	2200      	movs	r2, #0
 80051bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f857 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d03c      	beq.n	8005246 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	623b      	str	r3, [r7, #32]
   return(result);
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
 80051ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	60fb      	str	r3, [r7, #12]
   return(result);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521e:	61fa      	str	r2, [r7, #28]
 8005220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	617b      	str	r3, [r7, #20]
   return(result);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e012      	b.n	800526c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3758      	adds	r7, #88	; 0x58
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	e04f      	b.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d04b      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fb ff19 	bl	80010c4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e04e      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d037      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d034      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d031      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d110      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2208      	movs	r2, #8
 80052d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f95b 	bl	8005594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2208      	movs	r2, #8
 80052e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e029      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d111      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f941 	bl	8005594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e00f      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	429a      	cmp	r2, r3
 8005342:	d0a0      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005350:	b480      	push	{r7}
 8005352:	b0a3      	sub	sp, #140	; 0x8c
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d10e      	bne.n	80053a2 <UART_Start_Receive_IT+0x52>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <UART_Start_Receive_IT+0x48>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005392:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005396:	e02d      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053a0:	e028      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <UART_Start_Receive_IT+0x76>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <UART_Start_Receive_IT+0x6c>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053ba:	e01b      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	227f      	movs	r2, #127	; 0x7f
 80053c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053c4:	e016      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ce:	d10d      	bne.n	80053ec <UART_Start_Receive_IT+0x9c>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <UART_Start_Receive_IT+0x92>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	227f      	movs	r2, #127	; 0x7f
 80053dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053e0:	e008      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	223f      	movs	r2, #63	; 0x3f
 80053e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053ea:	e003      	b.n	80053f4 <UART_Start_Receive_IT+0xa4>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2222      	movs	r2, #34	; 0x22
 8005400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005428:	673a      	str	r2, [r7, #112]	; 0x70
 800542a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800542e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e3      	bne.n	8005404 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005444:	d14f      	bne.n	80054e6 <UART_Start_Receive_IT+0x196>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	429a      	cmp	r2, r3
 8005450:	d349      	bcc.n	80054e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d107      	bne.n	800546c <UART_Start_Receive_IT+0x11c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a47      	ldr	r2, [pc, #284]	; (8005584 <UART_Start_Receive_IT+0x234>)
 8005468:	675a      	str	r2, [r3, #116]	; 0x74
 800546a:	e002      	b.n	8005472 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a46      	ldr	r2, [pc, #280]	; (8005588 <UART_Start_Receive_IT+0x238>)
 8005470:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01a      	beq.n	80054b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e4      	bne.n	800547a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80054d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_Start_Receive_IT+0x160>
 80054e4:	e046      	b.n	8005574 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d107      	bne.n	8005500 <UART_Start_Receive_IT+0x1b0>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a24      	ldr	r2, [pc, #144]	; (800558c <UART_Start_Receive_IT+0x23c>)
 80054fc:	675a      	str	r2, [r3, #116]	; 0x74
 80054fe:	e002      	b.n	8005506 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a23      	ldr	r2, [pc, #140]	; (8005590 <UART_Start_Receive_IT+0x240>)
 8005504:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d019      	beq.n	8005542 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005522:	677b      	str	r3, [r7, #116]	; 0x74
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
 800552e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e6      	bne.n	800550e <UART_Start_Receive_IT+0x1be>
 8005540:	e018      	b.n	8005574 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	613b      	str	r3, [r7, #16]
   return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f043 0320 	orr.w	r3, r3, #32
 8005556:	67bb      	str	r3, [r7, #120]	; 0x78
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005560:	623b      	str	r3, [r7, #32]
 8005562:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	61bb      	str	r3, [r7, #24]
   return(result);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	378c      	adds	r7, #140	; 0x8c
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	08005db5 	.word	0x08005db5
 8005588:	08005a55 	.word	0x08005a55
 800558c:	0800589d 	.word	0x0800589d
 8005590:	080056e5 	.word	0x080056e5

08005594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b095      	sub	sp, #84	; 0x54
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
 80055bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d118      	bne.n	8005640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	60bb      	str	r3, [r7, #8]
   return(result);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0310 	bic.w	r3, r3, #16
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005654:	bf00      	nop
 8005656:	3754      	adds	r7, #84	; 0x54
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff f9ca 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff f995 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056da:	bf00      	nop
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b09c      	sub	sp, #112	; 0x70
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fc:	2b22      	cmp	r3, #34	; 0x22
 80056fe:	f040 80be 	bne.w	800587e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800570c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005710:	b2d9      	uxtb	r1, r3
 8005712:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	400a      	ands	r2, r1
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 80a1 	bne.w	800588e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800575a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005760:	66bb      	str	r3, [r7, #104]	; 0x68
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800576a:	65bb      	str	r3, [r7, #88]	; 0x58
 800576c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e6      	bne.n	800574c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	667b      	str	r3, [r7, #100]	; 0x64
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800579e:	647a      	str	r2, [r7, #68]	; 0x44
 80057a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e5      	bne.n	800577e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a33      	ldr	r2, [pc, #204]	; (8005898 <UART_RxISR_8BIT+0x1b4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d01f      	beq.n	8005810 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d018      	beq.n	8005810 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	623b      	str	r3, [r7, #32]
   return(result);
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057f2:	663b      	str	r3, [r7, #96]	; 0x60
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
 80057fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d12e      	bne.n	8005876 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60fb      	str	r3, [r7, #12]
   return(result);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	617b      	str	r3, [r7, #20]
   return(result);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b10      	cmp	r3, #16
 800585c:	d103      	bne.n	8005866 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2210      	movs	r2, #16
 8005864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f8dc 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005874:	e00b      	b.n	800588e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fa fea8 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 800587c:	e007      	b.n	800588e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0208 	orr.w	r2, r2, #8
 800588c:	619a      	str	r2, [r3, #24]
}
 800588e:	bf00      	nop
 8005890:	3770      	adds	r7, #112	; 0x70
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40008000 	.word	0x40008000

0800589c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b09c      	sub	sp, #112	; 0x70
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b4:	2b22      	cmp	r3, #34	; 0x22
 80058b6:	f040 80be 	bne.w	8005a36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058d2:	4013      	ands	r3, r2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 80a1 	bne.w	8005a46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005918:	667b      	str	r3, [r7, #100]	; 0x64
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3308      	adds	r3, #8
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	663b      	str	r3, [r7, #96]	; 0x60
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005956:	643a      	str	r2, [r7, #64]	; 0x40
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800595c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e5      	bne.n	8005936 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a33      	ldr	r2, [pc, #204]	; (8005a50 <UART_RxISR_16BIT+0x1b4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d01f      	beq.n	80059c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d12e      	bne.n	8005a2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	613b      	str	r3, [r7, #16]
   return(result);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e6      	bne.n	80059d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d103      	bne.n	8005a1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff f800 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a2c:	e00b      	b.n	8005a46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fa fdcc 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 8005a34:	e007      	b.n	8005a46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0208 	orr.w	r2, r2, #8
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	bf00      	nop
 8005a48:	3770      	adds	r7, #112	; 0x70
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40008000 	.word	0x40008000

08005a54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b0ac      	sub	sp, #176	; 0xb0
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8a:	2b22      	cmp	r3, #34	; 0x22
 8005a8c:	f040 8182 	bne.w	8005d94 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a96:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a9a:	e125      	b.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005aa6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005aaa:	b2d9      	uxtb	r1, r3
 8005aac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d053      	beq.n	8005b96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b14:	f043 0201 	orr.w	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	f043 0204 	orr.w	r2, r3, #4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f043 0202 	orr.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fe ff45 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 80a2 	bne.w	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bc8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005bcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e4      	bne.n	8005ba4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8005c04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e1      	bne.n	8005bda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5f      	ldr	r2, [pc, #380]	; (8005dac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d021      	beq.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01a      	beq.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c64:	657b      	str	r3, [r7, #84]	; 0x54
 8005c66:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e4      	bne.n	8005c42 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d130      	bne.n	8005ce2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8005caa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e4      	bne.n	8005c86 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d103      	bne.n	8005cd2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fe fea6 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
 8005ce0:	e002      	b.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fa fc72 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ce8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d006      	beq.n	8005cfe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f aecf 	bne.w	8005a9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d049      	beq.n	8005da4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d16:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d242      	bcs.n	8005da4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e3      	bne.n	8005d1e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005d5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e4      	bne.n	8005d5c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d92:	e007      	b.n	8005da4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0208 	orr.w	r2, r2, #8
 8005da2:	619a      	str	r2, [r3, #24]
}
 8005da4:	bf00      	nop
 8005da6:	37b0      	adds	r7, #176	; 0xb0
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40008000 	.word	0x40008000
 8005db0:	080056e5 	.word	0x080056e5

08005db4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b0ae      	sub	sp, #184	; 0xb8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dc2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	f040 8186 	bne.w	80060fc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005df6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dfa:	e129      	b.n	8006050 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005e12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	1c9a      	adds	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d053      	beq.n	8005efa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f043 0201 	orr.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f043 0204 	orr.w	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d011      	beq.n	8005ee2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	f043 0202 	orr.w	r2, r3, #2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fe fd93 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 80a4 	bne.w	8006050 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f2e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e2      	bne.n	8005f08 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e1      	bne.n	8005f42 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5f      	ldr	r2, [pc, #380]	; (8006114 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d021      	beq.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01a      	beq.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e4      	bne.n	8005faa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d130      	bne.n	800604a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006010:	647b      	str	r3, [r7, #68]	; 0x44
 8006012:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e4      	bne.n	8005fee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d103      	bne.n	800603a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2210      	movs	r2, #16
 8006038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fe fcf2 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
 8006048:	e002      	b.n	8006050 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fa fabe 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006050:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f aecb 	bne.w	8005dfc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800606c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006070:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006074:	2b00      	cmp	r3, #0
 8006076:	d049      	beq.n	800610c <UART_RxISR_16BIT_FIFOEN+0x358>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800607e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006082:	429a      	cmp	r2, r3
 8006084:	d242      	bcs.n	800610c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	623b      	str	r3, [r7, #32]
   return(result);
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80060aa:	633a      	str	r2, [r7, #48]	; 0x30
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e3      	bne.n	8006086 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a15      	ldr	r2, [pc, #84]	; (8006118 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80060c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f043 0320 	orr.w	r3, r3, #32
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	617b      	str	r3, [r7, #20]
   return(result);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e4      	bne.n	80060c4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060fa:	e007      	b.n	800610c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]
}
 800610c:	bf00      	nop
 800610e:	37b8      	adds	r7, #184	; 0xb8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40008000 	.word	0x40008000
 8006118:	0800589d 	.word	0x0800589d

0800611c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UARTEx_DisableFifoMode+0x16>
 800616a:	2302      	movs	r3, #2
 800616c:	e027      	b.n	80061be <HAL_UARTEx_DisableFifoMode+0x66>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2224      	movs	r2, #36	; 0x24
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800619c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061de:	2302      	movs	r3, #2
 80061e0:	e02d      	b.n	800623e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2224      	movs	r2, #36	; 0x24
 80061ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f850 	bl	80062c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800625a:	2302      	movs	r3, #2
 800625c:	e02d      	b.n	80062ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2224      	movs	r2, #36	; 0x24
 800626a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f812 	bl	80062c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062e4:	e031      	b.n	800634a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062e6:	2308      	movs	r3, #8
 80062e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ea:	2308      	movs	r3, #8
 80062ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	0e5b      	lsrs	r3, r3, #25
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	0f5b      	lsrs	r3, r3, #29
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	7b3a      	ldrb	r2, [r7, #12]
 8006312:	4911      	ldr	r1, [pc, #68]	; (8006358 <UARTEx_SetNbDataToProcess+0x94>)
 8006314:	5c8a      	ldrb	r2, [r1, r2]
 8006316:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800631a:	7b3a      	ldrb	r2, [r7, #12]
 800631c:	490f      	ldr	r1, [pc, #60]	; (800635c <UARTEx_SetNbDataToProcess+0x98>)
 800631e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006320:	fb93 f3f2 	sdiv	r3, r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	7b7a      	ldrb	r2, [r7, #13]
 8006330:	4909      	ldr	r1, [pc, #36]	; (8006358 <UARTEx_SetNbDataToProcess+0x94>)
 8006332:	5c8a      	ldrb	r2, [r1, r2]
 8006334:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006338:	7b7a      	ldrb	r2, [r7, #13]
 800633a:	4908      	ldr	r1, [pc, #32]	; (800635c <UARTEx_SetNbDataToProcess+0x98>)
 800633c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800633e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	08007278 	.word	0x08007278
 800635c:	08007280 	.word	0x08007280

08006360 <OLED_ClearBuffer>:
static uint8_t oled_buffer[2048];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	81fb      	strh	r3, [r7, #14]
 800636e:	e006      	b.n	800637e <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	4908      	ldr	r1, [pc, #32]	; (8006394 <OLED_ClearBuffer+0x34>)
 8006374:	79fa      	ldrb	r2, [r7, #7]
 8006376:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8006378:	89fb      	ldrh	r3, [r7, #14]
 800637a:	3301      	adds	r3, #1
 800637c:	81fb      	strh	r3, [r7, #14]
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d3f4      	bcc.n	8006370 <OLED_ClearBuffer+0x10>
	}
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	2000026c 	.word	0x2000026c

08006398 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af02      	add	r7, sp, #8
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 80063a2:	2300      	movs	r3, #0
 80063a4:	733b      	strb	r3, [r7, #12]
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <OLED_SendCommand+0x30>)
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f107 020c 	add.w	r2, r7, #12
 80063b2:	230a      	movs	r3, #10
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2302      	movs	r3, #2
 80063b8:	2178      	movs	r1, #120	; 0x78
 80063ba:	f7fb fc8b 	bl	8001cd4 <HAL_I2C_Master_Transmit>
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000a6c 	.word	0x20000a6c

080063cc <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 80063d6:	2340      	movs	r3, #64	; 0x40
 80063d8:	733b      	strb	r3, [r7, #12]
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <OLED_SendData+0x30>)
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f107 020c 	add.w	r2, r7, #12
 80063e6:	230a      	movs	r3, #10
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2302      	movs	r3, #2
 80063ec:	2178      	movs	r1, #120	; 0x78
 80063ee:	f7fb fc71 	bl	8001cd4 <HAL_I2C_Master_Transmit>
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000a6c 	.word	0x20000a6c

08006400 <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8006408:	4a30      	ldr	r2, [pc, #192]	; (80064cc <OLED_Init+0xcc>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 800640e:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <OLED_Init+0xcc>)
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	2364      	movs	r3, #100	; 0x64
 8006414:	220a      	movs	r2, #10
 8006416:	2178      	movs	r1, #120	; 0x78
 8006418:	f7fb fd74 	bl	8001f04 <HAL_I2C_IsDeviceReady>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <OLED_Init+0x26>
	{
		return 0;
 8006422:	2300      	movs	r3, #0
 8006424:	e04e      	b.n	80064c4 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8006426:	20ae      	movs	r0, #174	; 0xae
 8006428:	f7ff ffb6 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 800642c:	20d5      	movs	r0, #213	; 0xd5
 800642e:	f7ff ffb3 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 8006432:	2080      	movs	r0, #128	; 0x80
 8006434:	f7ff ffb0 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 8006438:	20a8      	movs	r0, #168	; 0xa8
 800643a:	f7ff ffad 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 800643e:	203f      	movs	r0, #63	; 0x3f
 8006440:	f7ff ffaa 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 8006444:	20d3      	movs	r0, #211	; 0xd3
 8006446:	f7ff ffa7 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 800644a:	2000      	movs	r0, #0
 800644c:	f7ff ffa4 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 8006450:	2040      	movs	r0, #64	; 0x40
 8006452:	f7ff ffa1 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8006456:	208d      	movs	r0, #141	; 0x8d
 8006458:	f7ff ff9e 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 800645c:	2014      	movs	r0, #20
 800645e:	f7ff ff9b 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 8006462:	2020      	movs	r0, #32
 8006464:	f7ff ff98 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8006468:	2000      	movs	r0, #0
 800646a:	f7ff ff95 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 800646e:	20a1      	movs	r0, #161	; 0xa1
 8006470:	f7ff ff92 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 8006474:	20c8      	movs	r0, #200	; 0xc8
 8006476:	f7ff ff8f 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 800647a:	20da      	movs	r0, #218	; 0xda
 800647c:	f7ff ff8c 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 8006480:	2012      	movs	r0, #18
 8006482:	f7ff ff89 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 8006486:	2081      	movs	r0, #129	; 0x81
 8006488:	f7ff ff86 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 800648c:	20ff      	movs	r0, #255	; 0xff
 800648e:	f7ff ff83 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 8006492:	20d9      	movs	r0, #217	; 0xd9
 8006494:	f7ff ff80 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8006498:	20f1      	movs	r0, #241	; 0xf1
 800649a:	f7ff ff7d 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 800649e:	20db      	movs	r0, #219	; 0xdb
 80064a0:	f7ff ff7a 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 80064a4:	2040      	movs	r0, #64	; 0x40
 80064a6:	f7ff ff77 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 80064aa:	20a4      	movs	r0, #164	; 0xa4
 80064ac:	f7ff ff74 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 80064b0:	20a6      	movs	r0, #166	; 0xa6
 80064b2:	f7ff ff71 	bl	8006398 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 80064b6:	20af      	movs	r0, #175	; 0xaf
 80064b8:	f7ff ff6e 	bl	8006398 <OLED_SendCommand>

	OLED_Clear(0);
 80064bc:	2000      	movs	r0, #0
 80064be:	f000 f807 	bl	80064d0 <OLED_Clear>
	
	return 1;
 80064c2:	2301      	movs	r3, #1
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000a6c 	.word	0x20000a6c

080064d0 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <OLED_Clear+0x18>
 80064e0:	20ff      	movs	r0, #255	; 0xff
 80064e2:	f7ff ff3d 	bl	8006360 <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 80064e6:	e002      	b.n	80064ee <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7ff ff39 	bl	8006360 <OLED_ClearBuffer>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	71fb      	strb	r3, [r7, #7]
 8006502:	460b      	mov	r3, r1
 8006504:	71bb      	strb	r3, [r7, #6]
 8006506:	4613      	mov	r3, r2
 8006508:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 800650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650e:	2b00      	cmp	r3, #0
 8006510:	db3d      	blt.n	800658e <OLED_DrawPixelStatus+0x96>
 8006512:	79bb      	ldrb	r3, [r7, #6]
 8006514:	2b3f      	cmp	r3, #63	; 0x3f
 8006516:	d83a      	bhi.n	800658e <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8006518:	797b      	ldrb	r3, [r7, #5]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01a      	beq.n	8006554 <OLED_DrawPixelStatus+0x5c>
 800651e:	79fa      	ldrb	r2, [r7, #7]
 8006520:	79bb      	ldrb	r3, [r7, #6]
 8006522:	08db      	lsrs	r3, r3, #3
 8006524:	b2d8      	uxtb	r0, r3
 8006526:	4603      	mov	r3, r0
 8006528:	01db      	lsls	r3, r3, #7
 800652a:	4413      	add	r3, r2
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <OLED_DrawPixelStatus+0xa4>)
 800652e:	5cd3      	ldrb	r3, [r2, r3]
 8006530:	b25a      	sxtb	r2, r3
 8006532:	79bb      	ldrb	r3, [r7, #6]
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	b25b      	sxtb	r3, r3
 8006540:	4313      	orrs	r3, r2
 8006542:	b259      	sxtb	r1, r3
 8006544:	79fa      	ldrb	r2, [r7, #7]
 8006546:	4603      	mov	r3, r0
 8006548:	01db      	lsls	r3, r3, #7
 800654a:	4413      	add	r3, r2
 800654c:	b2c9      	uxtb	r1, r1
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <OLED_DrawPixelStatus+0xa4>)
 8006550:	54d1      	strb	r1, [r2, r3]
 8006552:	e01d      	b.n	8006590 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 8006554:	79fa      	ldrb	r2, [r7, #7]
 8006556:	79bb      	ldrb	r3, [r7, #6]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	b2d8      	uxtb	r0, r3
 800655c:	4603      	mov	r3, r0
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4413      	add	r3, r2
 8006562:	4a0e      	ldr	r2, [pc, #56]	; (800659c <OLED_DrawPixelStatus+0xa4>)
 8006564:	5cd3      	ldrb	r3, [r2, r3]
 8006566:	b25a      	sxtb	r2, r3
 8006568:	79bb      	ldrb	r3, [r7, #6]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2101      	movs	r1, #1
 8006570:	fa01 f303 	lsl.w	r3, r1, r3
 8006574:	b25b      	sxtb	r3, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	b25b      	sxtb	r3, r3
 800657a:	4013      	ands	r3, r2
 800657c:	b259      	sxtb	r1, r3
 800657e:	79fa      	ldrb	r2, [r7, #7]
 8006580:	4603      	mov	r3, r0
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	4413      	add	r3, r2
 8006586:	b2c9      	uxtb	r1, r1
 8006588:	4a04      	ldr	r2, [pc, #16]	; (800659c <OLED_DrawPixelStatus+0xa4>)
 800658a:	54d1      	strb	r1, [r2, r3]
 800658c:	e000      	b.n	8006590 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 800658e:	bf00      	nop
}
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000026c 	.word	0x2000026c

080065a0 <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7f9 fe39 	bl	8000220 <strlen>
 80065ae:	4603      	mov	r3, r0
 80065b0:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	73bb      	strb	r3, [r7, #14]
 80065ba:	e01a      	b.n	80065f2 <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <OLED_GetWidthStr+0x64>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <OLED_GetWidthStr+0x64>)
 80065c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80065c6:	4619      	mov	r1, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <OLED_GetWidthStr+0x64>)
 80065d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065d4:	1ac3      	subs	r3, r0, r3
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	3304      	adds	r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	4413      	add	r3, r2
 80065e4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	3301      	adds	r3, #1
 80065ea:	73bb      	strb	r3, [r7, #14]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3301      	adds	r3, #1
 80065f0:	607b      	str	r3, [r7, #4]
 80065f2:	7bba      	ldrb	r2, [r7, #14]
 80065f4:	7b7b      	ldrb	r3, [r7, #13]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d3e0      	bcc.n	80065bc <OLED_GetWidthStr+0x1c>
	}

	return len;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000a70 	.word	0x20000a70

08006608 <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4623      	mov	r3, r4
 8006618:	71fb      	strb	r3, [r7, #7]
 800661a:	4603      	mov	r3, r0
 800661c:	71bb      	strb	r3, [r7, #6]
 800661e:	460b      	mov	r3, r1
 8006620:	717b      	strb	r3, [r7, #5]
 8006622:	4613      	mov	r3, r2
 8006624:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 8006626:	4b37      	ldr	r3, [pc, #220]	; (8006704 <OLED_DrawChar+0xfc>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <OLED_DrawChar+0xfc>)
 800662c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006630:	4618      	mov	r0, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	4933      	ldr	r1, [pc, #204]	; (8006704 <OLED_DrawChar+0xfc>)
 8006636:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800663a:	1a5b      	subs	r3, r3, r1
 800663c:	fb00 f303 	mul.w	r3, r0, r3
 8006640:	3304      	adds	r3, #4
 8006642:	4413      	add	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	e050      	b.n	80066ee <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 800664c:	2300      	movs	r3, #0
 800664e:	73bb      	strb	r3, [r7, #14]
 8006650:	e044      	b.n	80066dc <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	08db      	lsrs	r3, r3, #3
 8006656:	b2db      	uxtb	r3, r3
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	4929      	ldr	r1, [pc, #164]	; (8006704 <OLED_DrawChar+0xfc>)
 800665e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8006662:	3901      	subs	r1, #1
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4926      	ldr	r1, [pc, #152]	; (8006704 <OLED_DrawChar+0xfc>)
 800666a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800666e:	fb93 f3f1 	sdiv	r3, r3, r1
 8006672:	4413      	add	r3, r2
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	fa42 f303 	asr.w	r3, r2, r3
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d011      	beq.n	80066b4 <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8006690:	79ba      	ldrb	r2, [r7, #6]
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	4413      	add	r3, r2
 8006696:	b2d8      	uxtb	r0, r3
 8006698:	797a      	ldrb	r2, [r7, #5]
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	4413      	add	r3, r2
 800669e:	b2d9      	uxtb	r1, r3
 80066a0:	793b      	ldrb	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bf14      	ite	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	2300      	moveq	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	f7ff ff23 	bl	80064f8 <OLED_DrawPixelStatus>
 80066b2:	e010      	b.n	80066d6 <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 80066b4:	79ba      	ldrb	r2, [r7, #6]
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4413      	add	r3, r2
 80066ba:	b2d8      	uxtb	r0, r3
 80066bc:	797a      	ldrb	r2, [r7, #5]
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	4413      	add	r3, r2
 80066c2:	b2d9      	uxtb	r1, r3
 80066c4:	793b      	ldrb	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	f7ff ff11 	bl	80064f8 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	3301      	adds	r3, #1
 80066da:	73bb      	strb	r3, [r7, #14]
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	4a09      	ldr	r2, [pc, #36]	; (8006704 <OLED_DrawChar+0xfc>)
 80066e0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	dbb4      	blt.n	8006652 <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	3301      	adds	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3a9      	bcc.n	800664c <OLED_DrawChar+0x44>
		}
	}
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	20000a70 	.word	0x20000a70

08006708 <OLED_DrawStr>:

	OLED_DrawStr(buf, x, y, mode);
}

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	4603      	mov	r3, r0
 8006718:	70fb      	strb	r3, [r7, #3]
 800671a:	460b      	mov	r3, r1
 800671c:	70bb      	strb	r3, [r7, #2]
 800671e:	4613      	mov	r3, r2
 8006720:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7f9 fd7c 	bl	8000220 <strlen>
 8006728:	4603      	mov	r3, r0
 800672a:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2bfe      	cmp	r3, #254	; 0xfe
 8006734:	d106      	bne.n	8006744 <OLED_DrawStr+0x3c>
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ff32 	bl	80065a0 <OLED_GetWidthStr>
 800673c:	4603      	mov	r3, r0
 800673e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8006742:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	d109      	bne.n	800675e <OLED_DrawStr+0x56>
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ff28 	bl	80065a0 <OLED_GetWidthStr>
 8006750:	4603      	mov	r3, r0
 8006752:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8006756:	0fda      	lsrs	r2, r3, #31
 8006758:	4413      	add	r3, r2
 800675a:	105b      	asrs	r3, r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 800675e:	78bb      	ldrb	r3, [r7, #2]
 8006760:	2bff      	cmp	r3, #255	; 0xff
 8006762:	d108      	bne.n	8006776 <OLED_DrawStr+0x6e>
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <OLED_DrawStr+0xcc>)
 8006766:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800676a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800676e:	0fda      	lsrs	r2, r3, #31
 8006770:	4413      	add	r3, r2
 8006772:	105b      	asrs	r3, r3, #1
 8006774:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8006776:	2300      	movs	r3, #0
 8006778:	73bb      	strb	r3, [r7, #14]
 800677a:	e021      	b.n	80067c0 <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7818      	ldrb	r0, [r3, #0]
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	78ba      	ldrb	r2, [r7, #2]
 8006784:	7bf9      	ldrb	r1, [r7, #15]
 8006786:	f7ff ff3f 	bl	8006608 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 800678a:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <OLED_DrawStr+0xcc>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <OLED_DrawStr+0xcc>)
 8006790:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006794:	4619      	mov	r1, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <OLED_DrawStr+0xcc>)
 800679e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067a2:	1ac3      	subs	r3, r0, r3
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	3304      	adds	r3, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	4413      	add	r3, r2
 80067b2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	3301      	adds	r3, #1
 80067b8:	73bb      	strb	r3, [r7, #14]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3301      	adds	r3, #1
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	7bba      	ldrb	r2, [r7, #14]
 80067c2:	7b7b      	ldrb	r3, [r7, #13]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d3d9      	bcc.n	800677c <OLED_DrawStr+0x74>
	}
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000a70 	.word	0x20000a70

080067d8 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 80067de:	2300      	movs	r3, #0
 80067e0:	71fb      	strb	r3, [r7, #7]
 80067e2:	e032      	b.n	800684a <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 80067e4:	4b1d      	ldr	r3, [pc, #116]	; (800685c <OLED_UpdateScreen+0x84>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fdd2 	bl	8006398 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <OLED_UpdateScreen+0x84>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f043 0310 	orr.w	r3, r3, #16
 8006800:	b2db      	uxtb	r3, r3
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fdc8 	bl	8006398 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800680e:	b2db      	uxtb	r3, r3
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fdc1 	bl	8006398 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8006816:	2300      	movs	r3, #0
 8006818:	80bb      	strh	r3, [r7, #4]
 800681a:	e00f      	b.n	800683c <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	01da      	lsls	r2, r3, #7
 8006820:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <OLED_UpdateScreen+0x88>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fdce 	bl	80063cc <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8006830:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006834:	b29b      	uxth	r3, r3
 8006836:	3301      	adds	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	80bb      	strh	r3, [r7, #4]
 800683c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006840:	2b7f      	cmp	r3, #127	; 0x7f
 8006842:	ddeb      	ble.n	800681c <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	3301      	adds	r3, #1
 8006848:	71fb      	strb	r3, [r7, #7]
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	2b07      	cmp	r3, #7
 800684e:	d9c9      	bls.n	80067e4 <OLED_UpdateScreen+0xc>
		}
	}
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000268 	.word	0x20000268
 8006860:	2000026c 	.word	0x2000026c

08006864 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	Font.font = new_font;
 800686c:	4a13      	ldr	r2, [pc, #76]	; (80068bc <FontSet+0x58>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
	Font.width = (int16_t)fontbyte(0); //*LARGURA DA FONTE*//
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <FontSet+0x58>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b21a      	sxth	r2, r3
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <FontSet+0x58>)
 800687c:	809a      	strh	r2, [r3, #4]
	Font.height = (int16_t)fontbyte(1);//*ALTURA DA FONNTE*//
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <FontSet+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b21a      	sxth	r2, r3
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <FontSet+0x58>)
 800688a:	80da      	strh	r2, [r3, #6]
	Font.offset = (int16_t)fontbyte(2);/*PRIMEIRA LINHA DO VETOR É REFERENTE A QUAL POSIÇÃO DA TABELA ASC?*/
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <FontSet+0x58>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3302      	adds	r3, #2
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	b21a      	sxth	r2, r3
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <FontSet+0x58>)
 8006898:	811a      	strh	r2, [r3, #8]
	Font.numchars = (int16_t)fontbyte(3);	/*NUMERO DE COMPONENTES NUMA LINHA DO VETOR*/
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <FontSet+0x58>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3303      	adds	r3, #3
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b21a      	sxth	r2, r3
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <FontSet+0x58>)
 80068a6:	815a      	strh	r2, [r3, #10]
	Font.inverted = NORMAL;
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <FontSet+0x58>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	731a      	strb	r2, [r3, #12]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000a70 	.word	0x20000a70

080068c0 <siprintf>:
 80068c0:	b40e      	push	{r1, r2, r3}
 80068c2:	b500      	push	{lr}
 80068c4:	b09c      	sub	sp, #112	; 0x70
 80068c6:	ab1d      	add	r3, sp, #116	; 0x74
 80068c8:	9002      	str	r0, [sp, #8]
 80068ca:	9006      	str	r0, [sp, #24]
 80068cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d0:	4809      	ldr	r0, [pc, #36]	; (80068f8 <siprintf+0x38>)
 80068d2:	9107      	str	r1, [sp, #28]
 80068d4:	9104      	str	r1, [sp, #16]
 80068d6:	4909      	ldr	r1, [pc, #36]	; (80068fc <siprintf+0x3c>)
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	6800      	ldr	r0, [r0, #0]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	a902      	add	r1, sp, #8
 80068e4:	f000 f992 	bl	8006c0c <_svfiprintf_r>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	b01c      	add	sp, #112	; 0x70
 80068f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f4:	b003      	add	sp, #12
 80068f6:	4770      	bx	lr
 80068f8:	20000064 	.word	0x20000064
 80068fc:	ffff0208 	.word	0xffff0208

08006900 <memset>:
 8006900:	4402      	add	r2, r0
 8006902:	4603      	mov	r3, r0
 8006904:	4293      	cmp	r3, r2
 8006906:	d100      	bne.n	800690a <memset+0xa>
 8006908:	4770      	bx	lr
 800690a:	f803 1b01 	strb.w	r1, [r3], #1
 800690e:	e7f9      	b.n	8006904 <memset+0x4>

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000064 	.word	0x20000064

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4d0d      	ldr	r5, [pc, #52]	; (8006954 <__libc_init_array+0x38>)
 8006920:	4c0d      	ldr	r4, [pc, #52]	; (8006958 <__libc_init_array+0x3c>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	2600      	movs	r6, #0
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	4d0b      	ldr	r5, [pc, #44]	; (800695c <__libc_init_array+0x40>)
 800692e:	4c0c      	ldr	r4, [pc, #48]	; (8006960 <__libc_init_array+0x44>)
 8006930:	f000 fc6a 	bl	8007208 <_init>
 8006934:	1b64      	subs	r4, r4, r5
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	2600      	movs	r6, #0
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	08008528 	.word	0x08008528
 8006958:	08008528 	.word	0x08008528
 800695c:	08008528 	.word	0x08008528
 8006960:	0800852c 	.word	0x0800852c

08006964 <__retarget_lock_acquire_recursive>:
 8006964:	4770      	bx	lr

08006966 <__retarget_lock_release_recursive>:
 8006966:	4770      	bx	lr

08006968 <_free_r>:
 8006968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800696a:	2900      	cmp	r1, #0
 800696c:	d044      	beq.n	80069f8 <_free_r+0x90>
 800696e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006972:	9001      	str	r0, [sp, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f1a1 0404 	sub.w	r4, r1, #4
 800697a:	bfb8      	it	lt
 800697c:	18e4      	addlt	r4, r4, r3
 800697e:	f000 f8df 	bl	8006b40 <__malloc_lock>
 8006982:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <_free_r+0x94>)
 8006984:	9801      	ldr	r0, [sp, #4]
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	b933      	cbnz	r3, 8006998 <_free_r+0x30>
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	6014      	str	r4, [r2, #0]
 800698e:	b003      	add	sp, #12
 8006990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006994:	f000 b8da 	b.w	8006b4c <__malloc_unlock>
 8006998:	42a3      	cmp	r3, r4
 800699a:	d908      	bls.n	80069ae <_free_r+0x46>
 800699c:	6825      	ldr	r5, [r4, #0]
 800699e:	1961      	adds	r1, r4, r5
 80069a0:	428b      	cmp	r3, r1
 80069a2:	bf01      	itttt	eq
 80069a4:	6819      	ldreq	r1, [r3, #0]
 80069a6:	685b      	ldreq	r3, [r3, #4]
 80069a8:	1949      	addeq	r1, r1, r5
 80069aa:	6021      	streq	r1, [r4, #0]
 80069ac:	e7ed      	b.n	800698a <_free_r+0x22>
 80069ae:	461a      	mov	r2, r3
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	b10b      	cbz	r3, 80069b8 <_free_r+0x50>
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d9fa      	bls.n	80069ae <_free_r+0x46>
 80069b8:	6811      	ldr	r1, [r2, #0]
 80069ba:	1855      	adds	r5, r2, r1
 80069bc:	42a5      	cmp	r5, r4
 80069be:	d10b      	bne.n	80069d8 <_free_r+0x70>
 80069c0:	6824      	ldr	r4, [r4, #0]
 80069c2:	4421      	add	r1, r4
 80069c4:	1854      	adds	r4, r2, r1
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	6011      	str	r1, [r2, #0]
 80069ca:	d1e0      	bne.n	800698e <_free_r+0x26>
 80069cc:	681c      	ldr	r4, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	6053      	str	r3, [r2, #4]
 80069d2:	440c      	add	r4, r1
 80069d4:	6014      	str	r4, [r2, #0]
 80069d6:	e7da      	b.n	800698e <_free_r+0x26>
 80069d8:	d902      	bls.n	80069e0 <_free_r+0x78>
 80069da:	230c      	movs	r3, #12
 80069dc:	6003      	str	r3, [r0, #0]
 80069de:	e7d6      	b.n	800698e <_free_r+0x26>
 80069e0:	6825      	ldr	r5, [r4, #0]
 80069e2:	1961      	adds	r1, r4, r5
 80069e4:	428b      	cmp	r3, r1
 80069e6:	bf04      	itt	eq
 80069e8:	6819      	ldreq	r1, [r3, #0]
 80069ea:	685b      	ldreq	r3, [r3, #4]
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	bf04      	itt	eq
 80069f0:	1949      	addeq	r1, r1, r5
 80069f2:	6021      	streq	r1, [r4, #0]
 80069f4:	6054      	str	r4, [r2, #4]
 80069f6:	e7ca      	b.n	800698e <_free_r+0x26>
 80069f8:	b003      	add	sp, #12
 80069fa:	bd30      	pop	{r4, r5, pc}
 80069fc:	20000bc0 	.word	0x20000bc0

08006a00 <sbrk_aligned>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4e0e      	ldr	r6, [pc, #56]	; (8006a3c <sbrk_aligned+0x3c>)
 8006a04:	460c      	mov	r4, r1
 8006a06:	6831      	ldr	r1, [r6, #0]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	b911      	cbnz	r1, 8006a12 <sbrk_aligned+0x12>
 8006a0c:	f000 fba6 	bl	800715c <_sbrk_r>
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 fba1 	bl	800715c <_sbrk_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	d00a      	beq.n	8006a34 <sbrk_aligned+0x34>
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d007      	beq.n	8006a38 <sbrk_aligned+0x38>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 fb96 	bl	800715c <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d101      	bne.n	8006a38 <sbrk_aligned+0x38>
 8006a34:	f04f 34ff 	mov.w	r4, #4294967295
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	20000bc4 	.word	0x20000bc4

08006a40 <_malloc_r>:
 8006a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a44:	1ccd      	adds	r5, r1, #3
 8006a46:	f025 0503 	bic.w	r5, r5, #3
 8006a4a:	3508      	adds	r5, #8
 8006a4c:	2d0c      	cmp	r5, #12
 8006a4e:	bf38      	it	cc
 8006a50:	250c      	movcc	r5, #12
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	4607      	mov	r7, r0
 8006a56:	db01      	blt.n	8006a5c <_malloc_r+0x1c>
 8006a58:	42a9      	cmp	r1, r5
 8006a5a:	d905      	bls.n	8006a68 <_malloc_r+0x28>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	2600      	movs	r6, #0
 8006a62:	4630      	mov	r0, r6
 8006a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b3c <_malloc_r+0xfc>
 8006a6c:	f000 f868 	bl	8006b40 <__malloc_lock>
 8006a70:	f8d8 3000 	ldr.w	r3, [r8]
 8006a74:	461c      	mov	r4, r3
 8006a76:	bb5c      	cbnz	r4, 8006ad0 <_malloc_r+0x90>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	f7ff ffc0 	bl	8006a00 <sbrk_aligned>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	4604      	mov	r4, r0
 8006a84:	d155      	bne.n	8006b32 <_malloc_r+0xf2>
 8006a86:	f8d8 4000 	ldr.w	r4, [r8]
 8006a8a:	4626      	mov	r6, r4
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	d145      	bne.n	8006b1c <_malloc_r+0xdc>
 8006a90:	2c00      	cmp	r4, #0
 8006a92:	d048      	beq.n	8006b26 <_malloc_r+0xe6>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	4631      	mov	r1, r6
 8006a98:	4638      	mov	r0, r7
 8006a9a:	eb04 0903 	add.w	r9, r4, r3
 8006a9e:	f000 fb5d 	bl	800715c <_sbrk_r>
 8006aa2:	4581      	cmp	r9, r0
 8006aa4:	d13f      	bne.n	8006b26 <_malloc_r+0xe6>
 8006aa6:	6821      	ldr	r1, [r4, #0]
 8006aa8:	1a6d      	subs	r5, r5, r1
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4638      	mov	r0, r7
 8006aae:	f7ff ffa7 	bl	8006a00 <sbrk_aligned>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d037      	beq.n	8006b26 <_malloc_r+0xe6>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	442b      	add	r3, r5
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d038      	beq.n	8006b36 <_malloc_r+0xf6>
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	42a2      	cmp	r2, r4
 8006ac8:	d12b      	bne.n	8006b22 <_malloc_r+0xe2>
 8006aca:	2200      	movs	r2, #0
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	e00f      	b.n	8006af0 <_malloc_r+0xb0>
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	1b52      	subs	r2, r2, r5
 8006ad4:	d41f      	bmi.n	8006b16 <_malloc_r+0xd6>
 8006ad6:	2a0b      	cmp	r2, #11
 8006ad8:	d917      	bls.n	8006b0a <_malloc_r+0xca>
 8006ada:	1961      	adds	r1, r4, r5
 8006adc:	42a3      	cmp	r3, r4
 8006ade:	6025      	str	r5, [r4, #0]
 8006ae0:	bf18      	it	ne
 8006ae2:	6059      	strne	r1, [r3, #4]
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	bf08      	it	eq
 8006ae8:	f8c8 1000 	streq.w	r1, [r8]
 8006aec:	5162      	str	r2, [r4, r5]
 8006aee:	604b      	str	r3, [r1, #4]
 8006af0:	4638      	mov	r0, r7
 8006af2:	f104 060b 	add.w	r6, r4, #11
 8006af6:	f000 f829 	bl	8006b4c <__malloc_unlock>
 8006afa:	f026 0607 	bic.w	r6, r6, #7
 8006afe:	1d23      	adds	r3, r4, #4
 8006b00:	1af2      	subs	r2, r6, r3
 8006b02:	d0ae      	beq.n	8006a62 <_malloc_r+0x22>
 8006b04:	1b9b      	subs	r3, r3, r6
 8006b06:	50a3      	str	r3, [r4, r2]
 8006b08:	e7ab      	b.n	8006a62 <_malloc_r+0x22>
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	d1dd      	bne.n	8006acc <_malloc_r+0x8c>
 8006b10:	f8c8 2000 	str.w	r2, [r8]
 8006b14:	e7ec      	b.n	8006af0 <_malloc_r+0xb0>
 8006b16:	4623      	mov	r3, r4
 8006b18:	6864      	ldr	r4, [r4, #4]
 8006b1a:	e7ac      	b.n	8006a76 <_malloc_r+0x36>
 8006b1c:	4634      	mov	r4, r6
 8006b1e:	6876      	ldr	r6, [r6, #4]
 8006b20:	e7b4      	b.n	8006a8c <_malloc_r+0x4c>
 8006b22:	4613      	mov	r3, r2
 8006b24:	e7cc      	b.n	8006ac0 <_malloc_r+0x80>
 8006b26:	230c      	movs	r3, #12
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f000 f80e 	bl	8006b4c <__malloc_unlock>
 8006b30:	e797      	b.n	8006a62 <_malloc_r+0x22>
 8006b32:	6025      	str	r5, [r4, #0]
 8006b34:	e7dc      	b.n	8006af0 <_malloc_r+0xb0>
 8006b36:	605b      	str	r3, [r3, #4]
 8006b38:	deff      	udf	#255	; 0xff
 8006b3a:	bf00      	nop
 8006b3c:	20000bc0 	.word	0x20000bc0

08006b40 <__malloc_lock>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__malloc_lock+0x8>)
 8006b42:	f7ff bf0f 	b.w	8006964 <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	20000bbc 	.word	0x20000bbc

08006b4c <__malloc_unlock>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__malloc_unlock+0x8>)
 8006b4e:	f7ff bf0a 	b.w	8006966 <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	20000bbc 	.word	0x20000bbc

08006b58 <__ssputs_r>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	688e      	ldr	r6, [r1, #8]
 8006b5e:	461f      	mov	r7, r3
 8006b60:	42be      	cmp	r6, r7
 8006b62:	680b      	ldr	r3, [r1, #0]
 8006b64:	4682      	mov	sl, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	4690      	mov	r8, r2
 8006b6a:	d82c      	bhi.n	8006bc6 <__ssputs_r+0x6e>
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b72:	d026      	beq.n	8006bc2 <__ssputs_r+0x6a>
 8006b74:	6965      	ldr	r5, [r4, #20]
 8006b76:	6909      	ldr	r1, [r1, #16]
 8006b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b7c:	eba3 0901 	sub.w	r9, r3, r1
 8006b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b84:	1c7b      	adds	r3, r7, #1
 8006b86:	444b      	add	r3, r9
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	429d      	cmp	r5, r3
 8006b8c:	bf38      	it	cc
 8006b8e:	461d      	movcc	r5, r3
 8006b90:	0553      	lsls	r3, r2, #21
 8006b92:	d527      	bpl.n	8006be4 <__ssputs_r+0x8c>
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7ff ff53 	bl	8006a40 <_malloc_r>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	b360      	cbz	r0, 8006bf8 <__ssputs_r+0xa0>
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	464a      	mov	r2, r9
 8006ba2:	f000 faeb 	bl	800717c <memcpy>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	6126      	str	r6, [r4, #16]
 8006bb4:	6165      	str	r5, [r4, #20]
 8006bb6:	444e      	add	r6, r9
 8006bb8:	eba5 0509 	sub.w	r5, r5, r9
 8006bbc:	6026      	str	r6, [r4, #0]
 8006bbe:	60a5      	str	r5, [r4, #8]
 8006bc0:	463e      	mov	r6, r7
 8006bc2:	42be      	cmp	r6, r7
 8006bc4:	d900      	bls.n	8006bc8 <__ssputs_r+0x70>
 8006bc6:	463e      	mov	r6, r7
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	4632      	mov	r2, r6
 8006bcc:	4641      	mov	r1, r8
 8006bce:	f000 faab 	bl	8007128 <memmove>
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4433      	add	r3, r6
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	2000      	movs	r0, #0
 8006be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be4:	462a      	mov	r2, r5
 8006be6:	f000 fad7 	bl	8007198 <_realloc_r>
 8006bea:	4606      	mov	r6, r0
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1e0      	bne.n	8006bb2 <__ssputs_r+0x5a>
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	f7ff feb8 	bl	8006968 <_free_r>
 8006bf8:	230c      	movs	r3, #12
 8006bfa:	f8ca 3000 	str.w	r3, [sl]
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	e7e9      	b.n	8006be0 <__ssputs_r+0x88>

08006c0c <_svfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4698      	mov	r8, r3
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	b09d      	sub	sp, #116	; 0x74
 8006c18:	4607      	mov	r7, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	d50e      	bpl.n	8006c3e <_svfiprintf_r+0x32>
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	b963      	cbnz	r3, 8006c3e <_svfiprintf_r+0x32>
 8006c24:	2140      	movs	r1, #64	; 0x40
 8006c26:	f7ff ff0b 	bl	8006a40 <_malloc_r>
 8006c2a:	6028      	str	r0, [r5, #0]
 8006c2c:	6128      	str	r0, [r5, #16]
 8006c2e:	b920      	cbnz	r0, 8006c3a <_svfiprintf_r+0x2e>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e0d0      	b.n	8006ddc <_svfiprintf_r+0x1d0>
 8006c3a:	2340      	movs	r3, #64	; 0x40
 8006c3c:	616b      	str	r3, [r5, #20]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9309      	str	r3, [sp, #36]	; 0x24
 8006c42:	2320      	movs	r3, #32
 8006c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4c:	2330      	movs	r3, #48	; 0x30
 8006c4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006df4 <_svfiprintf_r+0x1e8>
 8006c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c56:	f04f 0901 	mov.w	r9, #1
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c62:	b10a      	cbz	r2, 8006c68 <_svfiprintf_r+0x5c>
 8006c64:	2a25      	cmp	r2, #37	; 0x25
 8006c66:	d1f9      	bne.n	8006c5c <_svfiprintf_r+0x50>
 8006c68:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6c:	d00b      	beq.n	8006c86 <_svfiprintf_r+0x7a>
 8006c6e:	465b      	mov	r3, fp
 8006c70:	4622      	mov	r2, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ff6f 	bl	8006b58 <__ssputs_r>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f000 80a9 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c82:	445a      	add	r2, fp
 8006c84:	9209      	str	r2, [sp, #36]	; 0x24
 8006c86:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80a1 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f04f 32ff 	mov.w	r2, #4294967295
 8006c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9a:	f10a 0a01 	add.w	sl, sl, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2205      	movs	r2, #5
 8006cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb0:	4850      	ldr	r0, [pc, #320]	; (8006df4 <_svfiprintf_r+0x1e8>)
 8006cb2:	f7f9 fabd 	bl	8000230 <memchr>
 8006cb6:	9a04      	ldr	r2, [sp, #16]
 8006cb8:	b9d8      	cbnz	r0, 8006cf2 <_svfiprintf_r+0xe6>
 8006cba:	06d0      	lsls	r0, r2, #27
 8006cbc:	bf44      	itt	mi
 8006cbe:	2320      	movmi	r3, #32
 8006cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc4:	0711      	lsls	r1, r2, #28
 8006cc6:	bf44      	itt	mi
 8006cc8:	232b      	movmi	r3, #43	; 0x2b
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cce:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd4:	d015      	beq.n	8006d02 <_svfiprintf_r+0xf6>
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	4654      	mov	r4, sl
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f04f 0c0a 	mov.w	ip, #10
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce6:	3b30      	subs	r3, #48	; 0x30
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d94d      	bls.n	8006d88 <_svfiprintf_r+0x17c>
 8006cec:	b1b0      	cbz	r0, 8006d1c <_svfiprintf_r+0x110>
 8006cee:	9207      	str	r2, [sp, #28]
 8006cf0:	e014      	b.n	8006d1c <_svfiprintf_r+0x110>
 8006cf2:	eba0 0308 	sub.w	r3, r0, r8
 8006cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	46a2      	mov	sl, r4
 8006d00:	e7d2      	b.n	8006ca8 <_svfiprintf_r+0x9c>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d19      	adds	r1, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9103      	str	r1, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfbb      	ittet	lt
 8006d0e:	425b      	neglt	r3, r3
 8006d10:	f042 0202 	orrlt.w	r2, r2, #2
 8006d14:	9307      	strge	r3, [sp, #28]
 8006d16:	9307      	strlt	r3, [sp, #28]
 8006d18:	bfb8      	it	lt
 8006d1a:	9204      	strlt	r2, [sp, #16]
 8006d1c:	7823      	ldrb	r3, [r4, #0]
 8006d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d20:	d10c      	bne.n	8006d3c <_svfiprintf_r+0x130>
 8006d22:	7863      	ldrb	r3, [r4, #1]
 8006d24:	2b2a      	cmp	r3, #42	; 0x2a
 8006d26:	d134      	bne.n	8006d92 <_svfiprintf_r+0x186>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	1d1a      	adds	r2, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	9203      	str	r2, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bfb8      	it	lt
 8006d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d38:	3402      	adds	r4, #2
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e04 <_svfiprintf_r+0x1f8>
 8006d40:	7821      	ldrb	r1, [r4, #0]
 8006d42:	2203      	movs	r2, #3
 8006d44:	4650      	mov	r0, sl
 8006d46:	f7f9 fa73 	bl	8000230 <memchr>
 8006d4a:	b138      	cbz	r0, 8006d5c <_svfiprintf_r+0x150>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	eba0 000a 	sub.w	r0, r0, sl
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	4082      	lsls	r2, r0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	3401      	adds	r4, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4825      	ldr	r0, [pc, #148]	; (8006df8 <_svfiprintf_r+0x1ec>)
 8006d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d66:	2206      	movs	r2, #6
 8006d68:	f7f9 fa62 	bl	8000230 <memchr>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d038      	beq.n	8006de2 <_svfiprintf_r+0x1d6>
 8006d70:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <_svfiprintf_r+0x1f0>)
 8006d72:	bb1b      	cbnz	r3, 8006dbc <_svfiprintf_r+0x1b0>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	3307      	adds	r3, #7
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	4433      	add	r3, r6
 8006d84:	9309      	str	r3, [sp, #36]	; 0x24
 8006d86:	e768      	b.n	8006c5a <_svfiprintf_r+0x4e>
 8006d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e7a6      	b.n	8006ce0 <_svfiprintf_r+0xd4>
 8006d92:	2300      	movs	r3, #0
 8006d94:	3401      	adds	r4, #1
 8006d96:	9305      	str	r3, [sp, #20]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da4:	3a30      	subs	r2, #48	; 0x30
 8006da6:	2a09      	cmp	r2, #9
 8006da8:	d903      	bls.n	8006db2 <_svfiprintf_r+0x1a6>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c6      	beq.n	8006d3c <_svfiprintf_r+0x130>
 8006dae:	9105      	str	r1, [sp, #20]
 8006db0:	e7c4      	b.n	8006d3c <_svfiprintf_r+0x130>
 8006db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db6:	4604      	mov	r4, r0
 8006db8:	2301      	movs	r3, #1
 8006dba:	e7f0      	b.n	8006d9e <_svfiprintf_r+0x192>
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <_svfiprintf_r+0x1f4>)
 8006dc4:	a904      	add	r1, sp, #16
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f3af 8000 	nop.w
 8006dcc:	1c42      	adds	r2, r0, #1
 8006dce:	4606      	mov	r6, r0
 8006dd0:	d1d6      	bne.n	8006d80 <_svfiprintf_r+0x174>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	f53f af2d 	bmi.w	8006c34 <_svfiprintf_r+0x28>
 8006dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ddc:	b01d      	add	sp, #116	; 0x74
 8006dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de2:	ab03      	add	r3, sp, #12
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	462a      	mov	r2, r5
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <_svfiprintf_r+0x1f4>)
 8006dea:	a904      	add	r1, sp, #16
 8006dec:	4638      	mov	r0, r7
 8006dee:	f000 f879 	bl	8006ee4 <_printf_i>
 8006df2:	e7eb      	b.n	8006dcc <_svfiprintf_r+0x1c0>
 8006df4:	080084ec 	.word	0x080084ec
 8006df8:	080084f6 	.word	0x080084f6
 8006dfc:	00000000 	.word	0x00000000
 8006e00:	08006b59 	.word	0x08006b59
 8006e04:	080084f2 	.word	0x080084f2

08006e08 <_printf_common>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	4699      	mov	r9, r3
 8006e10:	688a      	ldr	r2, [r1, #8]
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bfb8      	it	lt
 8006e1c:	4613      	movlt	r3, r2
 8006e1e:	6033      	str	r3, [r6, #0]
 8006e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e24:	4607      	mov	r7, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b10a      	cbz	r2, 8006e2e <_printf_common+0x26>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	0699      	lsls	r1, r3, #26
 8006e32:	bf42      	ittt	mi
 8006e34:	6833      	ldrmi	r3, [r6, #0]
 8006e36:	3302      	addmi	r3, #2
 8006e38:	6033      	strmi	r3, [r6, #0]
 8006e3a:	6825      	ldr	r5, [r4, #0]
 8006e3c:	f015 0506 	ands.w	r5, r5, #6
 8006e40:	d106      	bne.n	8006e50 <_printf_common+0x48>
 8006e42:	f104 0a19 	add.w	sl, r4, #25
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	6832      	ldr	r2, [r6, #0]
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dc26      	bgt.n	8006e9e <_printf_common+0x96>
 8006e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e54:	1e13      	subs	r3, r2, #0
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	bf18      	it	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	0692      	lsls	r2, r2, #26
 8006e5e:	d42b      	bmi.n	8006eb8 <_printf_common+0xb0>
 8006e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e64:	4649      	mov	r1, r9
 8006e66:	4638      	mov	r0, r7
 8006e68:	47c0      	blx	r8
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d01e      	beq.n	8006eac <_printf_common+0xa4>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	6922      	ldr	r2, [r4, #16]
 8006e72:	f003 0306 	and.w	r3, r3, #6
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	bf02      	ittt	eq
 8006e7a:	68e5      	ldreq	r5, [r4, #12]
 8006e7c:	6833      	ldreq	r3, [r6, #0]
 8006e7e:	1aed      	subeq	r5, r5, r3
 8006e80:	68a3      	ldr	r3, [r4, #8]
 8006e82:	bf0c      	ite	eq
 8006e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e88:	2500      	movne	r5, #0
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bfc4      	itt	gt
 8006e8e:	1a9b      	subgt	r3, r3, r2
 8006e90:	18ed      	addgt	r5, r5, r3
 8006e92:	2600      	movs	r6, #0
 8006e94:	341a      	adds	r4, #26
 8006e96:	42b5      	cmp	r5, r6
 8006e98:	d11a      	bne.n	8006ed0 <_printf_common+0xc8>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e008      	b.n	8006eb0 <_printf_common+0xa8>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	47c0      	blx	r8
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d103      	bne.n	8006eb4 <_printf_common+0xac>
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	e7c6      	b.n	8006e46 <_printf_common+0x3e>
 8006eb8:	18e1      	adds	r1, r4, r3
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	2030      	movs	r0, #48	; 0x30
 8006ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ec2:	4422      	add	r2, r4
 8006ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ecc:	3302      	adds	r3, #2
 8006ece:	e7c7      	b.n	8006e60 <_printf_common+0x58>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	3001      	adds	r0, #1
 8006edc:	d0e6      	beq.n	8006eac <_printf_common+0xa4>
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7d9      	b.n	8006e96 <_printf_common+0x8e>
	...

08006ee4 <_printf_i>:
 8006ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	7e0f      	ldrb	r7, [r1, #24]
 8006eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006eec:	2f78      	cmp	r7, #120	; 0x78
 8006eee:	4691      	mov	r9, r2
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	469a      	mov	sl, r3
 8006ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006efa:	d807      	bhi.n	8006f0c <_printf_i+0x28>
 8006efc:	2f62      	cmp	r7, #98	; 0x62
 8006efe:	d80a      	bhi.n	8006f16 <_printf_i+0x32>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	f000 80d4 	beq.w	80070ae <_printf_i+0x1ca>
 8006f06:	2f58      	cmp	r7, #88	; 0x58
 8006f08:	f000 80c0 	beq.w	800708c <_printf_i+0x1a8>
 8006f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f14:	e03a      	b.n	8006f8c <_printf_i+0xa8>
 8006f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f1a:	2b15      	cmp	r3, #21
 8006f1c:	d8f6      	bhi.n	8006f0c <_printf_i+0x28>
 8006f1e:	a101      	add	r1, pc, #4	; (adr r1, 8006f24 <_printf_i+0x40>)
 8006f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f0d 	.word	0x08006f0d
 8006f30:	08006f0d 	.word	0x08006f0d
 8006f34:	08006f0d 	.word	0x08006f0d
 8006f38:	08006f0d 	.word	0x08006f0d
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006f0d 	.word	0x08006f0d
 8006f44:	08006f0d 	.word	0x08006f0d
 8006f48:	08006f0d 	.word	0x08006f0d
 8006f4c:	08006f0d 	.word	0x08006f0d
 8006f50:	08007095 	.word	0x08007095
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	0800704f 	.word	0x0800704f
 8006f5c:	08006f0d 	.word	0x08006f0d
 8006f60:	08006f0d 	.word	0x08006f0d
 8006f64:	080070b7 	.word	0x080070b7
 8006f68:	08006f0d 	.word	0x08006f0d
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006f0d 	.word	0x08006f0d
 8006f74:	08006f0d 	.word	0x08006f0d
 8006f78:	08007057 	.word	0x08007057
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	602a      	str	r2, [r5, #0]
 8006f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e09f      	b.n	80070d0 <_printf_i+0x1ec>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	0607      	lsls	r7, r0, #24
 8006f96:	f103 0104 	add.w	r1, r3, #4
 8006f9a:	6029      	str	r1, [r5, #0]
 8006f9c:	d501      	bpl.n	8006fa2 <_printf_i+0xbe>
 8006f9e:	681e      	ldr	r6, [r3, #0]
 8006fa0:	e003      	b.n	8006faa <_printf_i+0xc6>
 8006fa2:	0646      	lsls	r6, r0, #25
 8006fa4:	d5fb      	bpl.n	8006f9e <_printf_i+0xba>
 8006fa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006faa:	2e00      	cmp	r6, #0
 8006fac:	da03      	bge.n	8006fb6 <_printf_i+0xd2>
 8006fae:	232d      	movs	r3, #45	; 0x2d
 8006fb0:	4276      	negs	r6, r6
 8006fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb6:	485a      	ldr	r0, [pc, #360]	; (8007120 <_printf_i+0x23c>)
 8006fb8:	230a      	movs	r3, #10
 8006fba:	e012      	b.n	8006fe2 <_printf_i+0xfe>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	1d19      	adds	r1, r3, #4
 8006fc2:	6029      	str	r1, [r5, #0]
 8006fc4:	0605      	lsls	r5, r0, #24
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0xe8>
 8006fc8:	681e      	ldr	r6, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0xee>
 8006fcc:	0641      	lsls	r1, r0, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0xe4>
 8006fd0:	881e      	ldrh	r6, [r3, #0]
 8006fd2:	4853      	ldr	r0, [pc, #332]	; (8007120 <_printf_i+0x23c>)
 8006fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2308      	moveq	r3, #8
 8006fda:	230a      	movne	r3, #10
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fe2:	6865      	ldr	r5, [r4, #4]
 8006fe4:	60a5      	str	r5, [r4, #8]
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	bfa2      	ittt	ge
 8006fea:	6821      	ldrge	r1, [r4, #0]
 8006fec:	f021 0104 	bicge.w	r1, r1, #4
 8006ff0:	6021      	strge	r1, [r4, #0]
 8006ff2:	b90e      	cbnz	r6, 8006ff8 <_printf_i+0x114>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	d04b      	beq.n	8007090 <_printf_i+0x1ac>
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8007002:	5dc7      	ldrb	r7, [r0, r7]
 8007004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007008:	4637      	mov	r7, r6
 800700a:	42bb      	cmp	r3, r7
 800700c:	460e      	mov	r6, r1
 800700e:	d9f4      	bls.n	8006ffa <_printf_i+0x116>
 8007010:	2b08      	cmp	r3, #8
 8007012:	d10b      	bne.n	800702c <_printf_i+0x148>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07de      	lsls	r6, r3, #31
 8007018:	d508      	bpl.n	800702c <_printf_i+0x148>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	6861      	ldr	r1, [r4, #4]
 800701e:	4299      	cmp	r1, r3
 8007020:	bfde      	ittt	le
 8007022:	2330      	movle	r3, #48	; 0x30
 8007024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800702c:	1b52      	subs	r2, r2, r5
 800702e:	6122      	str	r2, [r4, #16]
 8007030:	f8cd a000 	str.w	sl, [sp]
 8007034:	464b      	mov	r3, r9
 8007036:	aa03      	add	r2, sp, #12
 8007038:	4621      	mov	r1, r4
 800703a:	4640      	mov	r0, r8
 800703c:	f7ff fee4 	bl	8006e08 <_printf_common>
 8007040:	3001      	adds	r0, #1
 8007042:	d14a      	bne.n	80070da <_printf_i+0x1f6>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	b004      	add	sp, #16
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	f043 0320 	orr.w	r3, r3, #32
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	4833      	ldr	r0, [pc, #204]	; (8007124 <_printf_i+0x240>)
 8007058:	2778      	movs	r7, #120	; 0x78
 800705a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	6829      	ldr	r1, [r5, #0]
 8007062:	061f      	lsls	r7, r3, #24
 8007064:	f851 6b04 	ldr.w	r6, [r1], #4
 8007068:	d402      	bmi.n	8007070 <_printf_i+0x18c>
 800706a:	065f      	lsls	r7, r3, #25
 800706c:	bf48      	it	mi
 800706e:	b2b6      	uxthmi	r6, r6
 8007070:	07df      	lsls	r7, r3, #31
 8007072:	bf48      	it	mi
 8007074:	f043 0320 	orrmi.w	r3, r3, #32
 8007078:	6029      	str	r1, [r5, #0]
 800707a:	bf48      	it	mi
 800707c:	6023      	strmi	r3, [r4, #0]
 800707e:	b91e      	cbnz	r6, 8007088 <_printf_i+0x1a4>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	f023 0320 	bic.w	r3, r3, #32
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	2310      	movs	r3, #16
 800708a:	e7a7      	b.n	8006fdc <_printf_i+0xf8>
 800708c:	4824      	ldr	r0, [pc, #144]	; (8007120 <_printf_i+0x23c>)
 800708e:	e7e4      	b.n	800705a <_printf_i+0x176>
 8007090:	4615      	mov	r5, r2
 8007092:	e7bd      	b.n	8007010 <_printf_i+0x12c>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	6826      	ldr	r6, [r4, #0]
 8007098:	6961      	ldr	r1, [r4, #20]
 800709a:	1d18      	adds	r0, r3, #4
 800709c:	6028      	str	r0, [r5, #0]
 800709e:	0635      	lsls	r5, r6, #24
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	d501      	bpl.n	80070a8 <_printf_i+0x1c4>
 80070a4:	6019      	str	r1, [r3, #0]
 80070a6:	e002      	b.n	80070ae <_printf_i+0x1ca>
 80070a8:	0670      	lsls	r0, r6, #25
 80070aa:	d5fb      	bpl.n	80070a4 <_printf_i+0x1c0>
 80070ac:	8019      	strh	r1, [r3, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	4615      	mov	r5, r2
 80070b4:	e7bc      	b.n	8007030 <_printf_i+0x14c>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	681d      	ldr	r5, [r3, #0]
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7f9 f8b4 	bl	8000230 <memchr>
 80070c8:	b108      	cbz	r0, 80070ce <_printf_i+0x1ea>
 80070ca:	1b40      	subs	r0, r0, r5
 80070cc:	6060      	str	r0, [r4, #4]
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	2300      	movs	r3, #0
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d8:	e7aa      	b.n	8007030 <_printf_i+0x14c>
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	462a      	mov	r2, r5
 80070de:	4649      	mov	r1, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	47d0      	blx	sl
 80070e4:	3001      	adds	r0, #1
 80070e6:	d0ad      	beq.n	8007044 <_printf_i+0x160>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	079b      	lsls	r3, r3, #30
 80070ec:	d413      	bmi.n	8007116 <_printf_i+0x232>
 80070ee:	68e0      	ldr	r0, [r4, #12]
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	4298      	cmp	r0, r3
 80070f4:	bfb8      	it	lt
 80070f6:	4618      	movlt	r0, r3
 80070f8:	e7a6      	b.n	8007048 <_printf_i+0x164>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4632      	mov	r2, r6
 80070fe:	4649      	mov	r1, r9
 8007100:	4640      	mov	r0, r8
 8007102:	47d0      	blx	sl
 8007104:	3001      	adds	r0, #1
 8007106:	d09d      	beq.n	8007044 <_printf_i+0x160>
 8007108:	3501      	adds	r5, #1
 800710a:	68e3      	ldr	r3, [r4, #12]
 800710c:	9903      	ldr	r1, [sp, #12]
 800710e:	1a5b      	subs	r3, r3, r1
 8007110:	42ab      	cmp	r3, r5
 8007112:	dcf2      	bgt.n	80070fa <_printf_i+0x216>
 8007114:	e7eb      	b.n	80070ee <_printf_i+0x20a>
 8007116:	2500      	movs	r5, #0
 8007118:	f104 0619 	add.w	r6, r4, #25
 800711c:	e7f5      	b.n	800710a <_printf_i+0x226>
 800711e:	bf00      	nop
 8007120:	080084fd 	.word	0x080084fd
 8007124:	0800850e 	.word	0x0800850e

08007128 <memmove>:
 8007128:	4288      	cmp	r0, r1
 800712a:	b510      	push	{r4, lr}
 800712c:	eb01 0402 	add.w	r4, r1, r2
 8007130:	d902      	bls.n	8007138 <memmove+0x10>
 8007132:	4284      	cmp	r4, r0
 8007134:	4623      	mov	r3, r4
 8007136:	d807      	bhi.n	8007148 <memmove+0x20>
 8007138:	1e43      	subs	r3, r0, #1
 800713a:	42a1      	cmp	r1, r4
 800713c:	d008      	beq.n	8007150 <memmove+0x28>
 800713e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007146:	e7f8      	b.n	800713a <memmove+0x12>
 8007148:	4402      	add	r2, r0
 800714a:	4601      	mov	r1, r0
 800714c:	428a      	cmp	r2, r1
 800714e:	d100      	bne.n	8007152 <memmove+0x2a>
 8007150:	bd10      	pop	{r4, pc}
 8007152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800715a:	e7f7      	b.n	800714c <memmove+0x24>

0800715c <_sbrk_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d06      	ldr	r5, [pc, #24]	; (8007178 <_sbrk_r+0x1c>)
 8007160:	2300      	movs	r3, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7f9 fed6 	bl	8000f18 <_sbrk>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_sbrk_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_sbrk_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000bb8 	.word	0x20000bb8

0800717c <memcpy>:
 800717c:	440a      	add	r2, r1
 800717e:	4291      	cmp	r1, r2
 8007180:	f100 33ff 	add.w	r3, r0, #4294967295
 8007184:	d100      	bne.n	8007188 <memcpy+0xc>
 8007186:	4770      	bx	lr
 8007188:	b510      	push	{r4, lr}
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	4291      	cmp	r1, r2
 8007194:	d1f9      	bne.n	800718a <memcpy+0xe>
 8007196:	bd10      	pop	{r4, pc}

08007198 <_realloc_r>:
 8007198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719c:	4680      	mov	r8, r0
 800719e:	4614      	mov	r4, r2
 80071a0:	460e      	mov	r6, r1
 80071a2:	b921      	cbnz	r1, 80071ae <_realloc_r+0x16>
 80071a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	4611      	mov	r1, r2
 80071aa:	f7ff bc49 	b.w	8006a40 <_malloc_r>
 80071ae:	b92a      	cbnz	r2, 80071bc <_realloc_r+0x24>
 80071b0:	f7ff fbda 	bl	8006968 <_free_r>
 80071b4:	4625      	mov	r5, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	f000 f81b 	bl	80071f6 <_malloc_usable_size_r>
 80071c0:	4284      	cmp	r4, r0
 80071c2:	4607      	mov	r7, r0
 80071c4:	d802      	bhi.n	80071cc <_realloc_r+0x34>
 80071c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071ca:	d812      	bhi.n	80071f2 <_realloc_r+0x5a>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff fc36 	bl	8006a40 <_malloc_r>
 80071d4:	4605      	mov	r5, r0
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0ed      	beq.n	80071b6 <_realloc_r+0x1e>
 80071da:	42bc      	cmp	r4, r7
 80071dc:	4622      	mov	r2, r4
 80071de:	4631      	mov	r1, r6
 80071e0:	bf28      	it	cs
 80071e2:	463a      	movcs	r2, r7
 80071e4:	f7ff ffca 	bl	800717c <memcpy>
 80071e8:	4631      	mov	r1, r6
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff fbbc 	bl	8006968 <_free_r>
 80071f0:	e7e1      	b.n	80071b6 <_realloc_r+0x1e>
 80071f2:	4635      	mov	r5, r6
 80071f4:	e7df      	b.n	80071b6 <_realloc_r+0x1e>

080071f6 <_malloc_usable_size_r>:
 80071f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fa:	1f18      	subs	r0, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfbc      	itt	lt
 8007200:	580b      	ldrlt	r3, [r1, r0]
 8007202:	18c0      	addlt	r0, r0, r3
 8007204:	4770      	bx	lr
	...

08007208 <_init>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr

08007214 <_fini>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr
