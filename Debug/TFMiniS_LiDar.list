
TFMiniS_LiDar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000130c  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d8  080087d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e0  080087e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e0  080087e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080087e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  20000068  08008850  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000c5c  08008850  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187c4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb7  00000000  00000000  0003889f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001108  00000000  00000000  0003ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020031  00000000  00000000  0003df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a637  00000000  00000000  0005df41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc19  00000000  00000000  00078578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061d8  00000000  00000000  00148194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080074b4 	.word	0x080074b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080074b4 	.word	0x080074b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <HAL_UART_RxCpltCallback>:
void transmite_tfmini(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_UART_RxCpltCallback+0x54>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d11c      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x4c>
		lidar_rx_buff[auxbuff] = rcv_byte;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x5c>)
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_UART_RxCpltCallback+0x60>)
 80005ea:	5499      	strb	r1, [r3, r2]
		auxbuff++;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005f6:	701a      	strb	r2, [r3, #0]
		if(auxbuff>=9){
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d906      	bls.n	800060e <HAL_UART_RxCpltCallback+0x42>
			flag_pacote_completo = 1;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_UART_RxCpltCallback+0x64>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
			auxbuff = 0;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_UART_RxCpltCallback+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
		}
		else
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
	}
}
 800060c:	e004      	b.n	8000618 <HAL_UART_RxCpltCallback+0x4c>
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
 800060e:	2201      	movs	r2, #1
 8000610:	4905      	ldr	r1, [pc, #20]	; (8000628 <HAL_UART_RxCpltCallback+0x5c>)
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <HAL_UART_RxCpltCallback+0x68>)
 8000614:	f003 ffdc 	bl	80045d0 <HAL_UART_Receive_IT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004800 	.word	0x40004800
 8000624:	200002df 	.word	0x200002df
 8000628:	200002dd 	.word	0x200002dd
 800062c:	200002d4 	.word	0x200002d4
 8000630:	200002de 	.word	0x200002de
 8000634:	200001e0 	.word	0x200001e0

08000638 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){//ENDEREÇO DE HTIM COMO PARAMETRO
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){ 										/*IR�? LER O MEMBRO DA ESTRUTURA APONTADO PELO PONTEIRO PASSADO COMO ARGUMENTO (*htim/nome da estrutura) DA FUNC CALL BACK*/
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d111      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x36>
		/*FUNÇÃO DE TRATAMENTO DE INTERRUPÇÃO POR OVERFLOW TIMER3*/ /*Instance É A FLAG QUE INDICA QUAL TIMER GEROU A INTERRUPÇÃO*/
		/*DELAYS POR INTERRUPÇÃO - CONTADORES*/
		/*------------------INCREMENTO DOS CONTADORES--------------------*/
		cont[0]++;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000654:	801a      	strh	r2, [r3, #0]
		if(cont[0]>=250){
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2bf9      	cmp	r3, #249	; 0xf9
 800065c:	d907      	bls.n	800066e <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000664:	f001 fb48 	bl	8001cf8 <HAL_GPIO_TogglePin>
			cont[0] = 0;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40000400 	.word	0x40000400
 800067c:	200002e4 	.word	0x200002e4
 8000680:	48000400 	.word	0x48000400

08000684 <leitura_buffer>:
uint8_t leitura_buffer(void){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	for(int i = 0; i<7; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e020      	b.n	80006d2 <leitura_buffer+0x4e>
		if(lidar_rx_buff[i] == 0x59 && lidar_rx_buff[i+1] == 0x59){
 8000690:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <leitura_buffer+0x64>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b59      	cmp	r3, #89	; 0x59
 800069a:	d117      	bne.n	80006cc <leitura_buffer+0x48>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <leitura_buffer+0x64>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	2b59      	cmp	r3, #89	; 0x59
 80006a6:	d111      	bne.n	80006cc <leitura_buffer+0x48>
			altura_sensor = (lidar_rx_buff[i+3] << 8) | lidar_rx_buff[i+2];
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3303      	adds	r3, #3
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <leitura_buffer+0x64>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3302      	adds	r3, #2
 80006b8:	490b      	ldr	r1, [pc, #44]	; (80006e8 <leitura_buffer+0x64>)
 80006ba:	5ccb      	ldrb	r3, [r1, r3]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <leitura_buffer+0x68>)
 80006c6:	801a      	strh	r2, [r3, #0]
			return 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e006      	b.n	80006da <leitura_buffer+0x56>
	for(int i = 0; i<7; i++){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	dddb      	ble.n	8000690 <leitura_buffer+0xc>
		}
	}
	return 1;
 80006d8:	2301      	movs	r3, #1
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	200002d4 	.word	0x200002d4
 80006ec:	200002e0 	.word	0x200002e0

080006f0 <trata_uart>:
void trata_uart(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	leitura_buffer();
 80006f4:	f7ff ffc6 	bl	8000684 <leitura_buffer>
	flag_pacote_completo = 0;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <trata_uart+0x14>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200002de 	.word	0x200002de

08000708 <transmite_tfmini>:
void trata_string(void){
	char altura[6] = {0};
	sprintf(altura,"%04d",altura_sensor);
}
/*SER�? IMPLEMENTADO DEPOIS*/
void transmite_tfmini(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	char buff1[8] = "0000 cm\n";
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <transmite_tfmini+0x38>)
 8000710:	463b      	mov	r3, r7
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	e883 0003 	stmia.w	r3, {r0, r1}
	sprintf(buff1, "%04d cm\n", altura_sensor);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <transmite_tfmini+0x3c>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	463b      	mov	r3, r7
 8000722:	4909      	ldr	r1, [pc, #36]	; (8000748 <transmite_tfmini+0x40>)
 8000724:	4618      	mov	r0, r3
 8000726:	f006 fa21 	bl	8006b6c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buff1, sizeof(buff1), 0xFF);
 800072a:	4639      	mov	r1, r7
 800072c:	23ff      	movs	r3, #255	; 0xff
 800072e:	2208      	movs	r2, #8
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <transmite_tfmini+0x44>)
 8000732:	f003 febf 	bl	80044b4 <HAL_UART_Transmit>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	080074e0 	.word	0x080074e0
 8000744:	200002e0 	.word	0x200002e0
 8000748:	080074d4 	.word	0x080074d4
 800074c:	2000014c 	.word	0x2000014c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fd19 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f862 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 fa2a 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000760:	f000 f9fe 	bl	8000b60 <MX_DMA_Init>
  MX_I2C3_Init();
 8000764:	f000 f8aa 	bl	80008bc <MX_I2C3_Init>
  MX_TIM3_Init();
 8000768:	f000 f914 	bl	8000994 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800076c:	f000 f9ac 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000770:	f000 f8e4 	bl	800093c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000774:	f000 f95c 	bl	8000a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3); //INCIA TIMER3 COM INTERRUPÇÃO NO OVERFLOW
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <main+0xa8>)
 800077a:	f003 f96f 	bl	8003a5c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	491e      	ldr	r1, [pc, #120]	; (80007fc <main+0xac>)
 8000782:	481f      	ldr	r0, [pc, #124]	; (8000800 <main+0xb0>)
 8000784:	f003 ff24 	bl	80045d0 <HAL_UART_Receive_IT>
	OLED_Init(&hi2c3); //INICIANDO DISPLAY
 8000788:	481e      	ldr	r0, [pc, #120]	; (8000804 <main+0xb4>)
 800078a:	f005 ff8f 	bl	80066ac <OLED_Init>
	OLED_Clear(0);
 800078e:	2000      	movs	r0, #0
 8000790:	f005 fff4 	bl	800677c <OLED_Clear>
	OLED_UpdateScreen();
 8000794:	f006 f976 	bl	8006a84 <OLED_UpdateScreen>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(flag_pacote_completo)
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <main+0xb8>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x54>
			trata_uart();
 80007a0:	f7ff ffa6 	bl	80006f0 <trata_uart>

		OLED_Clear(0);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f005 ffe9 	bl	800677c <OLED_Clear>
		FontSet(Lucida_14);
 80007aa:	4818      	ldr	r0, [pc, #96]	; (800080c <main+0xbc>)
 80007ac:	f006 f9b0 	bl	8006b10 <FontSet>
		OLED_DrawStr("TF Mini Plus", CENTER, 1, 1);
 80007b0:	2301      	movs	r3, #1
 80007b2:	2201      	movs	r2, #1
 80007b4:	21ff      	movs	r1, #255	; 0xff
 80007b6:	4816      	ldr	r0, [pc, #88]	; (8000810 <main+0xc0>)
 80007b8:	f006 f8fc 	bl	80069b4 <OLED_DrawStr>
		sprintf(buff, "%04d cm", altura_sensor);
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <main+0xc4>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4915      	ldr	r1, [pc, #84]	; (8000818 <main+0xc8>)
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <main+0xcc>)
 80007c6:	f006 f9d1 	bl	8006b6c <siprintf>
		OLED_DrawStr(buff, CENTER, 40,1);
 80007ca:	2301      	movs	r3, #1
 80007cc:	2228      	movs	r2, #40	; 0x28
 80007ce:	21ff      	movs	r1, #255	; 0xff
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <main+0xcc>)
 80007d2:	f006 f8ef 	bl	80069b4 <OLED_DrawStr>
		OLED_UpdateScreen();
 80007d6:	f006 f955 	bl	8006a84 <OLED_UpdateScreen>
		transmite_tfmini();
 80007da:	f7ff ff95 	bl	8000708 <transmite_tfmini>
		HAL_Delay(50);
 80007de:	2032      	movs	r0, #50	; 0x32
 80007e0:	f000 fd44 	bl	800126c <HAL_Delay>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
 80007e4:	2201      	movs	r2, #1
 80007e6:	4905      	ldr	r1, [pc, #20]	; (80007fc <main+0xac>)
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <main+0xb0>)
 80007ea:	f003 fef1 	bl	80045d0 <HAL_UART_Receive_IT>
		HAL_Delay(50);
 80007ee:	2032      	movs	r0, #50	; 0x32
 80007f0:	f000 fd3c 	bl	800126c <HAL_Delay>
		if(flag_pacote_completo)
 80007f4:	e7d0      	b.n	8000798 <main+0x48>
 80007f6:	bf00      	nop
 80007f8:	20000100 	.word	0x20000100
 80007fc:	200002dd 	.word	0x200002dd
 8000800:	200001e0 	.word	0x200001e0
 8000804:	20000084 	.word	0x20000084
 8000808:	200002de 	.word	0x200002de
 800080c:	08007540 	.word	0x08007540
 8000810:	080074e8 	.word	0x080074e8
 8000814:	200002e0 	.word	0x200002e0
 8000818:	080074f8 	.word	0x080074f8
 800081c:	20000000 	.word	0x20000000

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	2238      	movs	r2, #56	; 0x38
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 f9bc 	bl	8006bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000846:	f001 ffc3 	bl	80027d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800084a:	230a      	movs	r3, #10
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000864:	2301      	movs	r3, #1
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	4618      	mov	r0, r3
 800087e:	f002 f85b 	bl	8002938 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000888:	f000 f9e0 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2102      	movs	r1, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fb59 	bl	8002f5c <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f9cc 	bl	8000c4c <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C3_Init+0x74>)
 80008f8:	f001 fa18 	bl	8001d2c <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 f9a3 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C3_Init+0x74>)
 800090a:	f001 fec9 	bl	80026a0 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f99a 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C3_Init+0x74>)
 800091c:	f001 ff0b 	bl	8002736 <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f991 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000084 	.word	0x20000084
 8000934:	40007800 	.word	0x40007800
 8000938:	00602173 	.word	0x00602173

0800093c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_RTC_Init+0x50>)
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_RTC_Init+0x54>)
 8000944:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_RTC_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_RTC_Init+0x50>)
 800094e:	227f      	movs	r2, #127	; 0x7f
 8000950:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_RTC_Init+0x50>)
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_RTC_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_RTC_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_RTC_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_RTC_Init+0x50>)
 800096c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000970:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_RTC_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_RTC_Init+0x50>)
 800097a:	f002 fefb 	bl	8003774 <HAL_RTC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 f962 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000d8 	.word	0x200000d8
 8000990:	40002800 	.word	0x40002800

08000994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009b4:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <MX_TIM3_Init+0x98>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009ba:	22c7      	movs	r2, #199	; 0xc7
 80009bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 239;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009c6:	22ef      	movs	r2, #239	; 0xef
 80009c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009d8:	f002 ffe9 	bl	80039ae <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f933 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009f4:	f003 f9ec 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f925 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_TIM3_Init+0x94>)
 8000a10:	f003 fc38 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a1a:	f000 f917 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000100 	.word	0x20000100
 8000a2c:	40000400 	.word	0x40000400

08000a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <MX_USART1_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a7a:	f003 fccb 	bl	8004414 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f8e2 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a8c:	f005 fcf3 	bl	8006476 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f8d9 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a9e:	f005 fd28 	bl	80064f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f8d0 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000aae:	f005 fca9 	bl	8006404 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f8c8 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000014c 	.word	0x2000014c
 8000ac4:	40013800 	.word	0x40013800

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_USART3_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b12:	f003 fc7f 	bl	8004414 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f896 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b24:	f005 fca7 	bl	8006476 <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 f88d 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fcdc 	bl	80064f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 f884 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b46:	f005 fc5d 	bl	8006404 <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f87c 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001e0 	.word	0x200001e0
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6493      	str	r3, [r2, #72]	; 0x48
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6493      	str	r3, [r2, #72]	; 0x48
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_DMA_Init+0x50>)
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f000 fc63 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f000 fc7a 	bl	800149a <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_GPIO_Init+0x94>)
 8000c1a:	f001 f855 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c24:	2311      	movs	r3, #17
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0x94>)
 8000c38:	f000 fec4 	bl	80019c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c8e:	f001 fe43 	bl	8002918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09a      	sub	sp, #104	; 0x68
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2244      	movs	r2, #68	; 0x44
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 ff73 	bl	8006bac <memset>
  if(hi2c->Instance==I2C3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <HAL_I2C_MspInit+0xa8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d137      	bne.n	8000d40 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fb58 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cea:	f7ff ffaf 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_I2C_MspInit+0xb0>)
 8000d24:	f000 fe4e 	bl	80019c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d32:	6593      	str	r3, [r2, #88]	; 0x58
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_I2C_MspInit+0xac>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3768      	adds	r7, #104	; 0x68
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40007800 	.word	0x40007800
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000800 	.word	0x48000800

08000d54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2244      	movs	r2, #68	; 0x44
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 ff21 	bl	8006bac <memset>
  if(hrtc->Instance==RTC)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_RTC_MspInit+0x70>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d123      	bne.n	8000dbc <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d78:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fb05 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d90:	f7ff ff5c 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_RTC_MspInit+0x74>)
 8000d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_RTC_MspInit+0x74>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_RTC_MspInit+0x74>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_RTC_MspInit+0x74>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6593      	str	r3, [r2, #88]	; 0x58
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_RTC_MspInit+0x74>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3750      	adds	r7, #80	; 0x50
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40002800 	.word	0x40002800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x44>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d113      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2102      	movs	r1, #2
 8000dfa:	201d      	movs	r0, #29
 8000dfc:	f000 fb33 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e00:	201d      	movs	r0, #29
 8000e02:	f000 fb4a 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09e      	sub	sp, #120	; 0x78
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	2244      	movs	r2, #68	; 0x44
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 feb7 	bl	8006bac <memset>
  if(huart->Instance==USART1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a69      	ldr	r2, [pc, #420]	; (8000fe8 <HAL_UART_MspInit+0x1d0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13e      	bne.n	8000ec6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fa9d 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e60:	f7ff fef4 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e68:	4a60      	ldr	r2, [pc, #384]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e70:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a5a      	ldr	r2, [pc, #360]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e94:	2330      	movs	r3, #48	; 0x30
 8000e96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eac:	4619      	mov	r1, r3
 8000eae:	4850      	ldr	r0, [pc, #320]	; (8000ff0 <HAL_UART_MspInit+0x1d8>)
 8000eb0:	f000 fd88 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f000 fad4 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ebe:	2025      	movs	r0, #37	; 0x25
 8000ec0:	f000 faeb 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec4:	e08b      	b.n	8000fde <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a4a      	ldr	r2, [pc, #296]	; (8000ff4 <HAL_UART_MspInit+0x1dc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	f040 8086 	bne.w	8000fde <HAL_UART_MspInit+0x1c6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fa58 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8000eea:	f7ff feaf 	bl	8000c4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a38      	ldr	r2, [pc, #224]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <HAL_UART_MspInit+0x1d4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f50:	4619      	mov	r1, r3
 8000f52:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <HAL_UART_MspInit+0x1d8>)
 8000f54:	f000 fd36 	bl	80019c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f72:	4619      	mov	r1, r3
 8000f74:	4820      	ldr	r0, [pc, #128]	; (8000ff8 <HAL_UART_MspInit+0x1e0>)
 8000f76:	f000 fd25 	bl	80019c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f7c:	4a20      	ldr	r2, [pc, #128]	; (8001000 <HAL_UART_MspInit+0x1e8>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f82:	221c      	movs	r2, #28
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fb2:	f000 fa8d 	bl	80014d0 <HAL_DMA_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8000fbc:	f7ff fe46 	bl	8000c4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_UART_MspInit+0x1e4>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	; 0x27
 8000fd4:	f000 fa47 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fd8:	2027      	movs	r0, #39	; 0x27
 8000fda:	f000 fa5e 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3778      	adds	r7, #120	; 0x78
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	40004800 	.word	0x40004800
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	20000274 	.word	0x20000274
 8001000:	40020008 	.word	0x40020008

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f8ee 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Channel1_IRQHandler+0x10>)
 800105e:	f000 fb9f 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000274 	.word	0x20000274

0800106c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM3_IRQHandler+0x10>)
 8001072:	f002 fd5d 	bl	8003b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000100 	.word	0x20000100

08001080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART1_IRQHandler+0x10>)
 8001086:	f003 faef 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000014c 	.word	0x2000014c

08001094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART3_IRQHandler+0x10>)
 800109a:	f003 fae5 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001e0 	.word	0x200001e0

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f005 fd70 	bl	8006bbc <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20008000 	.word	0x20008000
 8001108:	00000600 	.word	0x00000600
 800110c:	200002f4 	.word	0x200002f4
 8001110:	20000c60 	.word	0x20000c60

08001114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	; (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f005 fd2f 	bl	8006bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff faf1 	bl	8000750 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800117c:	080087e8 	.word	0x080087e8
  ldr r2, =_sbss
 8001180:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001184:	20000c5c 	.word	0x20000c5c

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>

0800118a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f95b 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f80e 	bl	80011bc <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e001      	b.n	80011b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ac:	f7ff fd54 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b0:	79fb      	ldrb	r3, [r7, #7]

}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d022      	beq.n	8001216 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_InitTick+0x6c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f966 	bl	80014b6 <HAL_SYSTICK_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d809      	bhi.n	800120a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	f000 f932 	bl	8001466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0x70>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e007      	b.n	800121a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e004      	b.n	800121a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000014 	.word	0x20000014
 8001228:	2000000c 	.word	0x2000000c
 800122c:	20000010 	.word	0x20000010

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_IncTick+0x1c>)
 8001240:	6013      	str	r3, [r2, #0]
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200002f8 	.word	0x200002f8
 8001250:	20000014 	.word	0x20000014

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200002f8 	.word	0x200002f8

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d004      	beq.n	8001290 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_Delay+0x40>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001290:	bf00      	nop
 8001292:	f7ff ffdf 	bl	8001254 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f7      	bhi.n	8001292 <HAL_Delay+0x26>
  {
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000014 	.word	0x20000014

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff40 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa4 	bl	800140c <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e08d      	b.n	80015fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_DMA_Init+0x138>)
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d80f      	bhi.n	800150e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <HAL_DMA_Init+0x13c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_DMA_Init+0x140>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	009a      	lsls	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a42      	ldr	r2, [pc, #264]	; (8001614 <HAL_DMA_Init+0x144>)
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
 800150c:	e00e      	b.n	800152c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_DMA_Init+0x148>)
 8001516:	4413      	add	r3, r2
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_DMA_Init+0x140>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	009a      	lsls	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a3c      	ldr	r2, [pc, #240]	; (800161c <HAL_DMA_Init+0x14c>)
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001546:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f9be 	bl	8001900 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800158c:	d102      	bne.n	8001594 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <HAL_DMA_Init+0x104>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d80c      	bhi.n	80015d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f9de 	bl	800197c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e008      	b.n	80015e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40020407 	.word	0x40020407
 800160c:	bffdfff8 	.word	0xbffdfff8
 8001610:	cccccccd 	.word	0xcccccccd
 8001614:	40020000 	.word	0x40020000
 8001618:	bffdfbf8 	.word	0xbffdfbf8
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d005      	beq.n	8001644 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e037      	b.n	80016b4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001690:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d00d      	beq.n	8001706 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2204      	movs	r2, #4
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e047      	b.n	8001796 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020e 	bic.w	r2, r2, #14
 8001714:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001734:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 021f 	and.w	r2, r3, #31
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001752:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001774:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    }
  }
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2204      	movs	r2, #4
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d026      	beq.n	800181a <HAL_DMA_IRQHandler+0x7a>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d021      	beq.n	800181a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2104      	movs	r1, #4
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d071      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001818:	e06c      	b.n	80018f4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2202      	movs	r2, #2
 8001824:	409a      	lsls	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d02e      	beq.n	800188c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d029      	beq.n	800188c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10b      	bne.n	800185e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020a 	bic.w	r2, r2, #10
 8001854:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f003 021f 	and.w	r2, r3, #31
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2102      	movs	r1, #2
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d038      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800188a:	e033      	b.n	80018f4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2208      	movs	r2, #8
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02a      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d025      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 020e 	bic.w	r2, r2, #14
 80018b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 021f 	and.w	r2, r3, #31
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f202 	lsl.w	r2, r1, r2
 80018cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
}
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001910:	429a      	cmp	r2, r3
 8001912:	d802      	bhi.n	800191a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e001      	b.n	800191e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800191c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3b08      	subs	r3, #8
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	009a      	lsls	r2, r3, #2
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800194a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2201      	movs	r2, #1
 8001954:	409a      	lsls	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	651a      	str	r2, [r3, #80]	; 0x50
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40020407 	.word	0x40020407
 800196c:	40020800 	.word	0x40020800
 8001970:	40020820 	.word	0x40020820
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	40020880 	.word	0x40020880

0800197c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	2201      	movs	r2, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	1000823f 	.word	0x1000823f
 80019c0:	40020940 	.word	0x40020940

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019d2:	e15a      	b.n	8001c8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 814c 	beq.w	8001c84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d005      	beq.n	8001a04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d130      	bne.n	8001a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 0201 	and.w	r2, r3, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d017      	beq.n	8001aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d123      	bne.n	8001af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	6939      	ldr	r1, [r7, #16]
 8001af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0203 	and.w	r2, r3, #3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b38:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b7a:	d01f      	beq.n	8001bbc <HAL_GPIO_Init+0x1f8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a4c      	ldr	r2, [pc, #304]	; (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d019      	beq.n	8001bb8 <HAL_GPIO_Init+0x1f4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4b      	ldr	r2, [pc, #300]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1f0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <HAL_GPIO_Init+0x2f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1ec>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_GPIO_Init+0x2f8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1e8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a48      	ldr	r2, [pc, #288]	; (8001cc0 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1e4>
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e00a      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001ba8:	2306      	movs	r3, #6
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bce:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c00:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2a:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7e:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f ae9d 	bne.w	80019d4 <HAL_GPIO_Init+0x10>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08d      	b.n	8001e5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe ffa4 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e006      	b.n	8001db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d108      	bne.n	8001dce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	e007      	b.n	8001dde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69d9      	ldr	r1, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	460b      	mov	r3, r1
 8001e72:	817b      	strh	r3, [r7, #10]
 8001e74:	4613      	mov	r3, r2
 8001e76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	f040 80fd 	bne.w	8002080 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2C_Master_Transmit+0x30>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0f6      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e9c:	f7ff f9da 	bl	8001254 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2319      	movs	r3, #25
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fa00 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0e1      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2221      	movs	r2, #33	; 0x21
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	893a      	ldrh	r2, [r7, #8]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2bff      	cmp	r3, #255	; 0xff
 8001eee:	d906      	bls.n	8001efe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e007      	b.n	8001f0e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <HAL_I2C_Master_Transmit+0x228>)
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fb6f 	bl	800263c <I2C_TransferConfig>
 8001f5e:	e066      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_I2C_Master_Transmit+0x228>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fb64 	bl	800263c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f74:	e05b      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9f3 	bl	8002366 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07b      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d034      	beq.n	800202e <HAL_I2C_Master_Transmit+0x1ca>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d130      	bne.n	800202e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f96c 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e04d      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d90e      	bls.n	800200e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fb18 	bl	800263c <I2C_TransferConfig>
 800200c:	e00f      	b.n	800202e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fb07 	bl	800263c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d19e      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f9d9 	bl	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e01a      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_I2C_Master_Transmit+0x22c>)
 8002060:	400b      	ands	r3, r1
 8002062:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	80002000 	.word	0x80002000
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	f040 80d6 	bne.w	8002262 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0cc      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_IsDeviceReady+0x44>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0c5      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2224      	movs	r2, #36	; 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_I2C_IsDeviceReady+0x72>
 80020f6:	897b      	ldrh	r3, [r7, #10]
 80020f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002104:	e006      	b.n	8002114 <HAL_I2C_IsDeviceReady+0x80>
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002110:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800211a:	f7ff f89b 	bl	8001254 <HAL_GetTick>
 800211e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b20      	cmp	r3, #32
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800214c:	e034      	b.n	80021b8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d01a      	beq.n	800218c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002156:	f7ff f87d 	bl	8001254 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d302      	bcc.n	800216c <HAL_I2C_IsDeviceReady+0xd8>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e06b      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_I2C_IsDeviceReady+0x130>
 80021be:	7fbb      	ldrb	r3, [r7, #30]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0c4      	beq.n	800214e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d01a      	beq.n	8002208 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	2120      	movs	r1, #32
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f869 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e03b      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2220      	movs	r2, #32
 80021f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e02d      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2200      	movs	r2, #0
 8002210:	2120      	movs	r1, #32
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f84e 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e020      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2210      	movs	r2, #16
 8002228:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2220      	movs	r2, #32
 8002230:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	f63f af56 	bhi.w	80020ee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d103      	bne.n	800228a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d007      	beq.n	80022a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	619a      	str	r2, [r3, #24]
  }
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c4:	e03b      	b.n	800233e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f8d6 	bl	800247c <I2C_IsErrorOccurred>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e041      	b.n	800235e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d02d      	beq.n	800233e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe ffb7 	bl	8001254 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d122      	bne.n	800233e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	429a      	cmp	r2, r3
 8002314:	d113      	bne.n	800233e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d0b4      	beq.n	80022c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002372:	e033      	b.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f87f 	bl	800247c <I2C_IsErrorOccurred>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e031      	b.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d025      	beq.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002390:	f7fe ff60 	bl	8001254 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11a      	bne.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d013      	beq.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d1c4      	bne.n	8002374 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002400:	e02f      	b.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f838 	bl	800247c <I2C_IsErrorOccurred>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02d      	b.n	8002472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe ff1d 	bl	8001254 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11a      	bne.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b20      	cmp	r3, #32
 8002438:	d013      	beq.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e007      	b.n	8002472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d1c8      	bne.n	8002402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d068      	beq.n	800257a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024b0:	e049      	b.n	8002546 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d045      	beq.n	8002546 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7fe fecb 	bl	8001254 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_IsErrorOccurred+0x54>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d13a      	bne.n	8002546 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f2:	d121      	bne.n	8002538 <I2C_IsErrorOccurred+0xbc>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024fa:	d01d      	beq.n	8002538 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d01a      	beq.n	8002538 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002510:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002512:	f7fe fe9f 	bl	8001254 <HAL_GetTick>
 8002516:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002518:	e00e      	b.n	8002538 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800251a:	f7fe fe9b 	bl	8001254 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b19      	cmp	r3, #25
 8002526:	d907      	bls.n	8002538 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002536:	e006      	b.n	8002546 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b20      	cmp	r3, #32
 8002544:	d1e9      	bne.n	800251a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d003      	beq.n	800255c <I2C_IsErrorOccurred+0xe0>
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0aa      	beq.n	80024b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800255c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2220      	movs	r2, #32
 800256a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff fe3b 	bl	800226c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <I2C_IsErrorOccurred+0x1bc>)
 8002602:	400b      	ands	r3, r1
 8002604:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800262a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800262e:	4618      	mov	r0, r3
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	fe00e800 	.word	0xfe00e800

0800263c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	4613      	mov	r3, r2
 800264c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002654:	7a7b      	ldrb	r3, [r7, #9]
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800265c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	4313      	orrs	r3, r2
 8002666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800266a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	0d5b      	lsrs	r3, r3, #21
 8002676:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <I2C_TransferConfig+0x60>)
 800267c:	430b      	orrs	r3, r1
 800267e:	43db      	mvns	r3, r3
 8002680:	ea02 0103 	and.w	r1, r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	03ff63ff 	.word	0x03ff63ff

080026a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d138      	bne.n	8002728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e032      	b.n	800272a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d139      	bne.n	80027c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002756:	2302      	movs	r3, #2
 8002758:	e033      	b.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2224      	movs	r2, #36	; 0x24
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d141      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027de:	4b4b      	ldr	r3, [pc, #300]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d131      	bne.n	8002850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f2:	4a46      	ldr	r2, [pc, #280]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fc:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002804:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2232      	movs	r2, #50	; 0x32
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	4a3f      	ldr	r2, [pc, #252]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002822:	e002      	b.n	800282a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3b01      	subs	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002836:	d102      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f2      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d158      	bne.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e057      	b.n	8002900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002860:	e04d      	b.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d141      	bne.n	80028ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d131      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800287e:	4a23      	ldr	r2, [pc, #140]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2232      	movs	r2, #50	; 0x32
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	0c9b      	lsrs	r3, r3, #18
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ae:	e002      	b.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d102      	bne.n	80028ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f2      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d112      	bne.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e011      	b.n	8002900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028ec:	e007      	b.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40007000 	.word	0x40007000
 8002910:	2000000c 	.word	0x2000000c
 8002914:	431bde83 	.word	0x431bde83

08002918 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002926:	6093      	str	r3, [r2, #8]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000

08002938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e2fe      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b97      	ldr	r3, [pc, #604]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	4b94      	ldr	r3, [pc, #592]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d102      	bne.n	8002976 <HAL_RCC_OscConfig+0x3e>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d002      	beq.n	800297c <HAL_RCC_OscConfig+0x44>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d157      	bne.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e2d9      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x74>
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a84      	ldr	r2, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029d0:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a74      	ldr	r2, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc30 	bl	8001254 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fc2c 	bl	8001254 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e29e      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fc1c 	bl	8001254 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fc18 	bl	8001254 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e28a      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a32:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d075      	beq.n	8002b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x136>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_OscConfig+0x13c>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d11f      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x154>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e25d      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	4946      	ldr	r1, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002aa0:	4b45      	ldr	r3, [pc, #276]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fb89 	bl	80011bc <HAL_InitTick>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d043      	beq.n	8002b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e249      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fbc4 	bl	8001254 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fbc0 	bl	8001254 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e232      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	492d      	ldr	r1, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e01a      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fba0 	bl	8001254 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fb9c 	bl	8001254 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e20e      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1e0>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d041      	beq.n	8002bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fb79 	bl	8001254 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe fb75 	bl	8001254 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1e7      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ef      	beq.n	8002b66 <HAL_RCC_OscConfig+0x22e>
 8002b86:	e020      	b.n	8002bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fb5c 	bl	8001254 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9e:	e00d      	b.n	8002bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fb58 	bl	8001254 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d906      	bls.n	8002bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1ca      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ea      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bdc:	4b84      	ldr	r3, [pc, #528]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x2b4>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x2b6>
 8002bec:	2300      	movs	r3, #0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0e:	4b79      	ldr	r3, [pc, #484]	; (8002df4 <HAL_RCC_OscConfig+0x4bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x4bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x4bc>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fb15 	bl	8001254 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe fb11 	bl	8001254 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e183      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x4bc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_RCC_OscConfig+0x32e>
 8002c54:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c64:	e024      	b.n	8002cb0 <HAL_RCC_OscConfig+0x378>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d110      	bne.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c6e:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a5e      	ldr	r2, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x378>
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a56      	ldr	r2, [pc, #344]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe facc 	bl	8001254 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fac8 	bl	8001254 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e138      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ed      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x388>
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fab5 	bl	8001254 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fab1 	bl	8001254 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e121      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ed      	bne.n	8002cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	4a34      	ldr	r2, [pc, #208]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d03c      	beq.n	8002daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3e:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fa84 	bl	8001254 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d50:	f7fe fa80 	bl	8001254 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0f2      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <HAL_RCC_OscConfig+0x418>
 8002d70:	e01b      	b.n	8002daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe fa67 	bl	8001254 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8a:	f7fe fa63 	bl	8001254 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0d5      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ef      	bne.n	8002d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80c9 	beq.w	8002f46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	f000 8083 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d15e      	bne.n	8002e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fa3d 	bl	8001254 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fa39 	bl	8001254 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d905      	bls.n	8002df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ab      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ec      	bne.n	8002dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b52      	ldr	r3, [pc, #328]	; (8002f54 <HAL_RCC_OscConfig+0x61c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6a11      	ldr	r1, [r2, #32]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e1e:	0212      	lsls	r2, r2, #8
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e26:	0852      	lsrs	r2, r2, #1
 8002e28:	3a01      	subs	r2, #1
 8002e2a:	0552      	lsls	r2, r2, #21
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0652      	lsls	r2, r2, #25
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e3e:	06d2      	lsls	r2, r2, #27
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4943      	ldr	r1, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a40      	ldr	r2, [pc, #256]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e54:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a3d      	ldr	r2, [pc, #244]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f9f8 	bl	8001254 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f9f4 	bl	8001254 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e066      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x530>
 8002e86:	e05e      	b.n	8002f46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f9de 	bl	8001254 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f9da 	bl	8001254 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04c      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4924      	ldr	r1, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCC_OscConfig+0x620>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]
 8002ec6:	e03e      	b.n	8002f46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e039      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_RCC_OscConfig+0x618>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d12c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d123      	bne.n	8002f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d11b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d113      	bne.n	8002f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	019f800c 	.word	0x019f800c
 8002f58:	feeefffc 	.word	0xfeeefffc

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e11e      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d910      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b8e      	ldr	r3, [pc, #568]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	498c      	ldr	r1, [pc, #560]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b8a      	ldr	r3, [pc, #552]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e106      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d073      	beq.n	8003098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d129      	bne.n	800300c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0f4      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fc8:	f000 f99e 	bl	8003308 <RCC_GetSysClockFreqFromPLLSource>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a7c      	ldr	r2, [pc, #496]	; (80031c4 <HAL_RCC_ClockConfig+0x268>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d93f      	bls.n	8003056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d033      	beq.n	8003056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12f      	bne.n	8003056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffe:	4a70      	ldr	r2, [pc, #448]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e024      	b.n	8003056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d107      	bne.n	8003024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0c6      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0be      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003034:	f000 f8ce 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <HAL_RCC_ClockConfig+0x268>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d909      	bls.n	8003056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304a:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b5a      	ldr	r3, [pc, #360]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4957      	ldr	r1, [pc, #348]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f8f4 	bl	8001254 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fe f8f0 	bl	8001254 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e095      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a42      	ldr	r2, [pc, #264]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030d0:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4936      	ldr	r1, [pc, #216]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
 80030ea:	e008      	b.n	80030fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 80030f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d21d      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 020f 	bic.w	r2, r3, #15
 8003114:	4929      	ldr	r1, [pc, #164]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800311c:	f7fe f89a 	bl	8001254 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe f896 	bl	8001254 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e03b      	b.n	80031b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCC_ClockConfig+0x260>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d1ed      	bne.n	8003124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4917      	ldr	r1, [pc, #92]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490f      	ldr	r1, [pc, #60]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003186:	f000 f825 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_ClockConfig+0x264>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490c      	ldr	r1, [pc, #48]	; (80031c8 <HAL_RCC_ClockConfig+0x26c>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f806 	bl	80011bc <HAL_InitTick>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40022000 	.word	0x40022000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	04c4b400 	.word	0x04c4b400
 80031c8:	08007500 	.word	0x08007500
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	20000010 	.word	0x20000010

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e047      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e03e      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d136      	bne.n	8003278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3301      	adds	r3, #1
 8003220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003232:	68d2      	ldr	r2, [r2, #12]
 8003234:	0a12      	lsrs	r2, r2, #8
 8003236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
      break;
 8003240:	e00c      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	0a12      	lsrs	r2, r2, #8
 8003250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
      break;
 800325a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0e5b      	lsrs	r3, r3, #25
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e001      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800327c:	693b      	ldr	r3, [r7, #16]
}
 800327e:	4618      	mov	r0, r3
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4904      	ldr	r1, [pc, #16]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	08007510 	.word	0x08007510

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e0:	f7ff ffda 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0adb      	lsrs	r3, r3, #11
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	08007510 	.word	0x08007510

08003308 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d10c      	bne.n	8003346 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800332c:	4a17      	ldr	r2, [pc, #92]	; (800338c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a14      	ldr	r2, [pc, #80]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003336:	68d2      	ldr	r2, [r2, #12]
 8003338:	0a12      	lsrs	r2, r2, #8
 800333a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	617b      	str	r3, [r7, #20]
    break;
 8003344:	e00c      	b.n	8003360 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	0a12      	lsrs	r2, r2, #8
 8003354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    break;
 800335e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0e5b      	lsrs	r3, r3, #25
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800337a:	687b      	ldr	r3, [r7, #4]
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000
 800338c:	007a1200 	.word	0x007a1200
 8003390:	00f42400 	.word	0x00f42400

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800339c:	2300      	movs	r3, #0
 800339e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8098 	beq.w	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033de:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ea:	f7fd ff33 	bl	8001254 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f0:	e009      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fd ff2f 	bl	8001254 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
        break;
 8003404:	e005      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ef      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d159      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003418:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01e      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	d019      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd feef 	bl	8001254 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003478:	e00b      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd feeb 	bl	8001254 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d902      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	74fb      	strb	r3, [r7, #19]
            break;
 8003490:	e006      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ec      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034bc:	e008      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	74bb      	strb	r3, [r7, #18]
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d0:	7c7b      	ldrb	r3, [r7, #17]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d6:	4ba6      	ldr	r3, [pc, #664]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	4aa5      	ldr	r2, [pc, #660]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ee:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f023 0203 	bic.w	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	499c      	ldr	r1, [pc, #624]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003510:	4b97      	ldr	r3, [pc, #604]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 020c 	bic.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4994      	ldr	r1, [pc, #592]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003532:	4b8f      	ldr	r3, [pc, #572]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	498b      	ldr	r1, [pc, #556]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003554:	4b86      	ldr	r3, [pc, #536]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	4983      	ldr	r1, [pc, #524]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003576:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	497a      	ldr	r1, [pc, #488]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003598:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	4972      	ldr	r1, [pc, #456]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4961      	ldr	r1, [pc, #388]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	4958      	ldr	r1, [pc, #352]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	4950      	ldr	r1, [pc, #320]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003658:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	4942      	ldr	r1, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003676:	d105      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003678:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a3c      	ldr	r2, [pc, #240]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003682:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4934      	ldr	r1, [pc, #208]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ae:	d105      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d015      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	4926      	ldr	r1, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e6:	d105      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	4918      	ldr	r1, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800371e:	d105      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	490a      	ldr	r1, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003764:	7cbb      	ldrb	r3, [r7, #18]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d070      	beq.n	8003868 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fada 	bl	8000d54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d04f      	beq.n	8003856 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	22ca      	movs	r2, #202	; 0xca
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2253      	movs	r2, #83	; 0x53
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f878 	bl	80038bc <RTC_EnterInitMode>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d126      	bne.n	8003824 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80037e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6999      	ldr	r1, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	041a      	lsls	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f884 	bl	8003928 <RTC_ExitInitMode>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d110      	bne.n	800384c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
 8003854:	e001      	b.n	800385a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <HAL_RTC_WaitForSynchro+0x44>)
 8003882:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003884:	f7fd fce6 	bl	8001254 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800388a:	e009      	b.n	80038a0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800388c:	f7fd fce2 	bl	8001254 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800389a:	d901      	bls.n	80038a0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e007      	b.n	80038b0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	0001005f 	.word	0x0001005f

080038bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d123      	bne.n	800391e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038e6:	f7fd fcb5 	bl	8001254 <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038ec:	e00d      	b.n	800390a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80038ee:	f7fd fcb1 	bl	8001254 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038fc:	d905      	bls.n	800390a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <RTC_EnterInitMode+0x62>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d1e7      	bne.n	80038ee <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003942:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff8e 	bl	8003874 <HAL_RTC_WaitForSynchro>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d022      	beq.n	80039a4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e01b      	b.n	80039a4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0220 	bic.w	r2, r2, #32
 800397a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff79 	bl	8003874 <HAL_RTC_WaitForSynchro>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0220 	orr.w	r2, r2, #32
 80039a2:	619a      	str	r2, [r3, #24]
  }

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e049      	b.n	8003a54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fd f9f9 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f000 fb11 	bl	8004014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04a      	b.n	8003b0a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d013      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_TIM_Base_Start_IT+0xc0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d115      	bne.n	8003af4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d015      	beq.n	8003b06 <HAL_TIM_Base_Start_IT+0xaa>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d011      	beq.n	8003b06 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	e008      	b.n	8003b06 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	00010007 	.word	0x00010007

08003b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0202 	mvn.w	r2, #2
 8003b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa2c 	bl	8003fd8 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa1e 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa2f 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0204 	mvn.w	r2, #4
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa06 	bl	8003fd8 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9f8 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa09 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d020      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9e0 	bl	8003fd8 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9d2 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f9e3 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0210 	mvn.w	r2, #16
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9ba 	bl	8003fd8 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9ac 	bl	8003fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f9bd 	bl	8003fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fcce 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb69 	bl	800439c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00c      	beq.n	8003cee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb61 	bl	80043b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00c      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f977 	bl	8004000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0220 	mvn.w	r2, #32
 8003d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fb29 	bl	8004388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb35 	bl	80043c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb2d 	bl	80043d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00c      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fb25 	bl	80043ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fb1d 	bl	8004400 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0de      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x1da>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 80a9 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003e2c:	4a61      	ldr	r2, [pc, #388]	; (8003fb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f200 80ae 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e34:	4a60      	ldr	r2, [pc, #384]	; (8003fb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 80a1 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003e3c:	4a5e      	ldr	r2, [pc, #376]	; (8003fb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f200 80a6 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e44:	4a5d      	ldr	r2, [pc, #372]	; (8003fbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f000 8099 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003e4c:	4a5b      	ldr	r2, [pc, #364]	; (8003fbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f200 809e 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e54:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f000 8091 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	f200 8096 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e68:	f000 8089 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003e6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e70:	f200 808e 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d03e      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x128>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7e:	f200 8087 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_TIM_ConfigClockSource+0x1c6>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d87f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e90:	2b70      	cmp	r3, #112	; 0x70
 8003e92:	d01a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xfa>
 8003e94:	2b70      	cmp	r3, #112	; 0x70
 8003e96:	d87b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e98:	2b60      	cmp	r3, #96	; 0x60
 8003e9a:	d050      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
 8003e9c:	2b60      	cmp	r3, #96	; 0x60
 8003e9e:	d877      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d03c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x14e>
 8003ea4:	2b50      	cmp	r3, #80	; 0x50
 8003ea6:	d873      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d058      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x18e>
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d86f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003eb0:	2b30      	cmp	r3, #48	; 0x30
 8003eb2:	d064      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003eb4:	2b30      	cmp	r3, #48	; 0x30
 8003eb6:	d86b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d060      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d867      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d05a      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003ec8:	e062      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	f000 f9b3 	bl	8004244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
      break;
 8003ef6:	e04f      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	f000 f99c 	bl	8004244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f1a:	609a      	str	r2, [r3, #8]
      break;
 8003f1c:	e03c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f90e 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2150      	movs	r1, #80	; 0x50
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f967 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e02c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 f92d 	bl	80041aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2160      	movs	r1, #96	; 0x60
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f957 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e01c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 f8ee 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f947 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e00c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f000 f93e 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e000      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	00100070 	.word	0x00100070
 8003fb8:	00100040 	.word	0x00100040
 8003fbc:	00100030 	.word	0x00100030
 8003fc0:	00100020 	.word	0x00100020

08003fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a42      	ldr	r2, [pc, #264]	; (8004130 <TIM_Base_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3f      	ldr	r2, [pc, #252]	; (8004134 <TIM_Base_SetConfig+0x120>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a3e      	ldr	r2, [pc, #248]	; (8004138 <TIM_Base_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3d      	ldr	r2, [pc, #244]	; (800413c <TIM_Base_SetConfig+0x128>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a33      	ldr	r2, [pc, #204]	; (8004130 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01b      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d017      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a30      	ldr	r2, [pc, #192]	; (8004134 <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <TIM_Base_SetConfig+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00f      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2e      	ldr	r2, [pc, #184]	; (800413c <TIM_Base_SetConfig+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <TIM_Base_SetConfig+0x12c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <TIM_Base_SetConfig+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <TIM_Base_SetConfig+0x134>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <TIM_Base_SetConfig+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0xe8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_Base_SetConfig+0x128>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0xe8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_Base_SetConfig+0x12c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0xe8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <TIM_Base_SetConfig+0x130>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0xe8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <TIM_Base_SetConfig+0x134>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40013400 	.word	0x40013400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800

0800414c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 030a 	bic.w	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 0210 	bic.w	r2, r3, #16
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e065      	b.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d013      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10c      	bne.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4313      	orrs	r3, r2
 800434c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40014000 	.word	0x40014000

08004388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e042      	b.n	80044ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fc fced 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2224      	movs	r2, #36	; 0x24
 8004442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 ff12 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fc43 	bl	8004cf0 <UART_SetConfig>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e01b      	b.n	80044ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 ff91 	bl	80053cc <UART_CheckIdleState>
 80044aa:	4603      	mov	r3, r0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d17b      	bne.n	80045c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit+0x26>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e074      	b.n	80045c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2221      	movs	r2, #33	; 0x21
 80044ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ee:	f7fc feb1 	bl	8001254 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d108      	bne.n	8004520 <HAL_UART_Transmit+0x6c>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e003      	b.n	8004528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004528:	e030      	b.n	800458c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fff3 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e03d      	b.n	80045c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	3302      	adds	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e007      	b.n	800457a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1c8      	bne.n	800452a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 ffbc 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e006      	b.n	80045c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d137      	bne.n	8004658 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Receive_IT+0x24>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e030      	b.n	800465a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_UART_Receive_IT+0x94>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01f      	beq.n	8004648 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	613b      	str	r3, [r7, #16]
   return(result);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69f9      	ldr	r1, [r7, #28]
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	61bb      	str	r3, [r7, #24]
   return(result);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	461a      	mov	r2, r3
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 ffd4 	bl	80055fc <UART_Start_Receive_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	e000      	b.n	800465a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40008000 	.word	0x40008000

08004668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	; 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800468e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004692:	f640 030f 	movw	r3, #2063	; 0x80f
 8004696:	4013      	ands	r3, r2
 8004698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800469c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d11b      	bne.n	80046dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 82e3 	beq.w	8004c98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
      }
      return;
 80046da:	e2dd      	b.n	8004c98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8123 	beq.w	800492c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80046ea:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <HAL_UART_IRQHandler+0x2b8>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80046f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046f6:	4b8b      	ldr	r3, [pc, #556]	; (8004924 <HAL_UART_IRQHandler+0x2bc>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8116 	beq.w	800492c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <HAL_UART_IRQHandler+0xc8>
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d011      	beq.n	8004760 <HAL_UART_IRQHandler+0xf8>
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2202      	movs	r2, #2
 800474e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d011      	beq.n	8004790 <HAL_UART_IRQHandler+0x128>
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2204      	movs	r2, #4
 800477e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f043 0202 	orr.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80047ac:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_UART_IRQHandler+0x2b8>)
 80047ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2208      	movs	r2, #8
 80047ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f043 0208 	orr.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <HAL_UART_IRQHandler+0x196>
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8249 	beq.w	8004c9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d005      	beq.n	8004862 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800485a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d054      	beq.n	800490c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 ffec 	bl	8005840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d146      	bne.n	8004904 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800488c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1d9      	bne.n	8004876 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <HAL_UART_IRQHandler+0x2c0>)
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fc fef8 	bl	80016d2 <HAL_DMA_Abort_IT>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d019      	beq.n	800491c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80048f6:	4610      	mov	r0, r2
 80048f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fa:	e00f      	b.n	800491c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9e1 	bl	8004cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004902:	e00b      	b.n	800491c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9dd 	bl	8004cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490a:	e007      	b.n	800491c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9d9 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800491a:	e1bf      	b.n	8004c9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	bf00      	nop
    return;
 800491e:	e1bd      	b.n	8004c9c <HAL_UART_IRQHandler+0x634>
 8004920:	10000001 	.word	0x10000001
 8004924:	04000120 	.word	0x04000120
 8004928:	0800590d 	.word	0x0800590d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 8153 	bne.w	8004bdc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 814c 	beq.w	8004bdc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8145 	beq.w	8004bdc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	f040 80bb 	bne.w	8004ae0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 818f 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498c:	429a      	cmp	r2, r3
 800498e:	f080 8187 	bcs.w	8004ca0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f040 8087 	bne.w	8004abe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1da      	bne.n	80049b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e1      	bne.n	80049fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e3      	bne.n	8004a36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e4      	bne.n	8004a7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc fdb1 	bl	8001620 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f8fd 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ade:	e0df      	b.n	8004ca0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80d1 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80cc 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e4      	bne.n	8004b0c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	623b      	str	r3, [r7, #32]
   return(result);
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e1      	bne.n	8004b42 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e4      	bne.n	8004b92 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f87f 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bda:	e063      	b.n	8004ca4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <HAL_UART_IRQHandler+0x59e>
 8004be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f001 fbe2 	bl	80063c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c04:	e051      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d03a      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
    }
    return;
 8004c3a:	e035      	b.n	8004ca8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_UART_IRQHandler+0x5f4>
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe6f 	bl	8005938 <UART_EndTransmit_IT>
    return;
 8004c5a:	e026      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x614>
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 fbbb 	bl	80063f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c7a:	e016      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d010      	beq.n	8004caa <HAL_UART_IRQHandler+0x642>
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da0c      	bge.n	8004caa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 fba3 	bl	80063dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c96:	e008      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
      return;
 8004c98:	bf00      	nop
 8004c9a:	e006      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
    return;
 8004c9c:	bf00      	nop
 8004c9e:	e004      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
      return;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
      return;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <HAL_UART_IRQHandler+0x642>
    return;
 8004ca8:	bf00      	nop
  }
}
 8004caa:	37e8      	adds	r7, #232	; 0xe8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf4:	b08c      	sub	sp, #48	; 0x30
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4bab      	ldr	r3, [pc, #684]	; (8004fcc <UART_SetConfig+0x2dc>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4aa0      	ldr	r2, [pc, #640]	; (8004fd0 <UART_SetConfig+0x2e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	f023 010f 	bic.w	r1, r3, #15
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a91      	ldr	r2, [pc, #580]	; (8004fd4 <UART_SetConfig+0x2e4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d125      	bne.n	8004de0 <UART_SetConfig+0xf0>
 8004d94:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <UART_SetConfig+0x2e8>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d81a      	bhi.n	8004dd8 <UART_SetConfig+0xe8>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0xb8>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	e0d6      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc6:	e0d2      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dce:	e0ce      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd6:	e0ca      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dde:	e0c6      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7d      	ldr	r2, [pc, #500]	; (8004fdc <UART_SetConfig+0x2ec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d138      	bne.n	8004e5c <UART_SetConfig+0x16c>
 8004dea:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <UART_SetConfig+0x2e8>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d82d      	bhi.n	8004e54 <UART_SetConfig+0x164>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x110>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	08004e55 	.word	0x08004e55
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e4d 	.word	0x08004e4d
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3a:	e098      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e42:	e094      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	e090      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e52:	e08c      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5a:	e088      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5f      	ldr	r2, [pc, #380]	; (8004fe0 <UART_SetConfig+0x2f0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d125      	bne.n	8004eb2 <UART_SetConfig+0x1c2>
 8004e66:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <UART_SetConfig+0x2e8>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d016      	beq.n	8004ea2 <UART_SetConfig+0x1b2>
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d818      	bhi.n	8004eaa <UART_SetConfig+0x1ba>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d00a      	beq.n	8004e92 <UART_SetConfig+0x1a2>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d814      	bhi.n	8004eaa <UART_SetConfig+0x1ba>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <UART_SetConfig+0x19a>
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d008      	beq.n	8004e9a <UART_SetConfig+0x1aa>
 8004e88:	e00f      	b.n	8004eaa <UART_SetConfig+0x1ba>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e90:	e06d      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e98:	e069      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea0:	e065      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea8:	e061      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004eaa:	2310      	movs	r3, #16
 8004eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb0:	e05d      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4b      	ldr	r2, [pc, #300]	; (8004fe4 <UART_SetConfig+0x2f4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d125      	bne.n	8004f08 <UART_SetConfig+0x218>
 8004ebc:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <UART_SetConfig+0x2e8>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec8:	d016      	beq.n	8004ef8 <UART_SetConfig+0x208>
 8004eca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ecc:	d818      	bhi.n	8004f00 <UART_SetConfig+0x210>
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d00a      	beq.n	8004ee8 <UART_SetConfig+0x1f8>
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d814      	bhi.n	8004f00 <UART_SetConfig+0x210>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <UART_SetConfig+0x1f0>
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d008      	beq.n	8004ef0 <UART_SetConfig+0x200>
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x210>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee6:	e042      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eee:	e03e      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	e03a      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e036      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e032      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	; (8004fd0 <UART_SetConfig+0x2e0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12a      	bne.n	8004f68 <UART_SetConfig+0x278>
 8004f12:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <UART_SetConfig+0x2e8>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f20:	d01a      	beq.n	8004f58 <UART_SetConfig+0x268>
 8004f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0x270>
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	d00c      	beq.n	8004f48 <UART_SetConfig+0x258>
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d815      	bhi.n	8004f60 <UART_SetConfig+0x270>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <UART_SetConfig+0x250>
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d008      	beq.n	8004f50 <UART_SetConfig+0x260>
 8004f3e:	e00f      	b.n	8004f60 <UART_SetConfig+0x270>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f46:	e012      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4e:	e00e      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f56:	e00a      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e006      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f66:	e002      	b.n	8004f6e <UART_SetConfig+0x27e>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <UART_SetConfig+0x2e0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	f040 80a8 	bne.w	80050ca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d834      	bhi.n	8004fec <UART_SetConfig+0x2fc>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x298>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fbb 	.word	0x08004fbb
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe f980 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fb2:	e021      	b.n	8004ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <UART_SetConfig+0x2f8>)
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb8:	e01e      	b.n	8004ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fe f90b 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc0:	e01a      	b.n	8004ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc8:	e016      	b.n	8004ff8 <UART_SetConfig+0x308>
 8004fca:	bf00      	nop
 8004fcc:	cfff69f3 	.word	0xcfff69f3
 8004fd0:	40008000 	.word	0x40008000
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40004400 	.word	0x40004400
 8004fe0:	40004800 	.word	0x40004800
 8004fe4:	40004c00 	.word	0x40004c00
 8004fe8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ff6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 812a 	beq.w	8005254 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4a9e      	ldr	r2, [pc, #632]	; (8005280 <UART_SetConfig+0x590>)
 8005006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500a:	461a      	mov	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005012:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4413      	add	r3, r2
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d305      	bcc.n	8005030 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	429a      	cmp	r2, r3
 800502e:	d903      	bls.n	8005038 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005036:	e10d      	b.n	8005254 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	60fa      	str	r2, [r7, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	4a8e      	ldr	r2, [pc, #568]	; (8005280 <UART_SetConfig+0x590>)
 8005046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504a:	b29b      	uxth	r3, r3
 800504c:	2200      	movs	r2, #0
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800505a:	f7fb f939 	bl	80002d0 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	020b      	lsls	r3, r1, #8
 8005070:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005074:	0202      	lsls	r2, r0, #8
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	6849      	ldr	r1, [r1, #4]
 800507a:	0849      	lsrs	r1, r1, #1
 800507c:	2000      	movs	r0, #0
 800507e:	460c      	mov	r4, r1
 8005080:	4605      	mov	r5, r0
 8005082:	eb12 0804 	adds.w	r8, r2, r4
 8005086:	eb43 0905 	adc.w	r9, r3, r5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	469a      	mov	sl, r3
 8005092:	4693      	mov	fp, r2
 8005094:	4652      	mov	r2, sl
 8005096:	465b      	mov	r3, fp
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb f918 	bl	80002d0 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	d308      	bcc.n	80050c2 <UART_SetConfig+0x3d2>
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d204      	bcs.n	80050c2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e0c8      	b.n	8005254 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050c8:	e0c4      	b.n	8005254 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d167      	bne.n	80051a4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80050d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d828      	bhi.n	800512e <UART_SetConfig+0x43e>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x3f4>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe f8d2 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800510e:	e014      	b.n	800513a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe f8e4 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8005114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b5a      	ldr	r3, [pc, #360]	; (8005284 <UART_SetConfig+0x594>)
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fe f859 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8089 	beq.w	8005254 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <UART_SetConfig+0x590>)
 8005148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514c:	461a      	mov	r2, r3
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	fbb3 f3f2 	udiv	r3, r3, r2
 8005154:	005a      	lsls	r2, r3, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	441a      	add	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	d916      	bls.n	800519c <UART_SetConfig+0x4ac>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d212      	bcs.n	800519c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f023 030f 	bic.w	r3, r3, #15
 800517e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	b29a      	uxth	r2, r3
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	4313      	orrs	r3, r2
 8005190:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	8bfa      	ldrh	r2, [r7, #30]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e05b      	b.n	8005254 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051a2:	e057      	b.n	8005254 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d828      	bhi.n	80051fe <UART_SetConfig+0x50e>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x4c4>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ff 	.word	0x080051ff
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fe f86a 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051de:	e014      	b.n	800520a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fe f87c 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 80051e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <UART_SetConfig+0x594>)
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051ec:	e00d      	b.n	800520a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fd fff1 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f4:	e009      	b.n	800520a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051fc:	e005      	b.n	800520a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005208:	bf00      	nop
    }

    if (pclk != 0U)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d021      	beq.n	8005254 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <UART_SetConfig+0x590>)
 8005216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	441a      	add	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d909      	bls.n	800524e <UART_SetConfig+0x55e>
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d205      	bcs.n	800524e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	b29a      	uxth	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e002      	b.n	8005254 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2201      	movs	r2, #1
 8005258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2201      	movs	r2, #1
 8005260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005270:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005274:	4618      	mov	r0, r3
 8005276:	3730      	adds	r7, #48	; 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527e:	bf00      	nop
 8005280:	08007518 	.word	0x08007518
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b098      	sub	sp, #96	; 0x60
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fb ff3a 	bl	8001254 <HAL_GetTick>
 80053e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d12f      	bne.n	8005450 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f88e 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d022      	beq.n	8005450 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541e:	653b      	str	r3, [r7, #80]	; 0x50
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
 800542a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800542e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e063      	b.n	8005518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d149      	bne.n	80054f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005466:	2200      	movs	r2, #0
 8005468:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f857 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d03c      	beq.n	80054f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	623b      	str	r3, [r7, #32]
   return(result);
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
 8005498:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ca:	61fa      	str	r2, [r7, #28]
 80054cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	69b9      	ldr	r1, [r7, #24]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	617b      	str	r3, [r7, #20]
   return(result);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e5      	bne.n	80054aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e012      	b.n	8005518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3758      	adds	r7, #88	; 0x58
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005530:	e04f      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d04b      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fb fe8b 	bl	8001254 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <UART_WaitOnFlagUntilTimeout+0x30>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e04e      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d037      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d034      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d031      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d110      	bne.n	800559e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2208      	movs	r2, #8
 8005582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f95b 	bl	8005840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2208      	movs	r2, #8
 800558e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e029      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d111      	bne.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f941 	bl	8005840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e00f      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	bf0c      	ite	eq
 80055e2:	2301      	moveq	r3, #1
 80055e4:	2300      	movne	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d0a0      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b0a3      	sub	sp, #140	; 0x8c
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	d10e      	bne.n	800564e <UART_Start_Receive_IT+0x52>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <UART_Start_Receive_IT+0x48>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800563e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005642:	e02d      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800564c:	e028      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <UART_Start_Receive_IT+0x76>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <UART_Start_Receive_IT+0x6c>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005666:	e01b      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	227f      	movs	r2, #127	; 0x7f
 800566c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005670:	e016      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567a:	d10d      	bne.n	8005698 <UART_Start_Receive_IT+0x9c>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <UART_Start_Receive_IT+0x92>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	227f      	movs	r2, #127	; 0x7f
 8005688:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800568c:	e008      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	223f      	movs	r2, #63	; 0x3f
 8005692:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005696:	e003      	b.n	80056a0 <UART_Start_Receive_IT+0xa4>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2222      	movs	r2, #34	; 0x22
 80056ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80056c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80056d4:	673a      	str	r2, [r7, #112]	; 0x70
 80056d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80056da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80056e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f0:	d14f      	bne.n	8005792 <UART_Start_Receive_IT+0x196>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d349      	bcc.n	8005792 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	d107      	bne.n	8005718 <UART_Start_Receive_IT+0x11c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a47      	ldr	r2, [pc, #284]	; (8005830 <UART_Start_Receive_IT+0x234>)
 8005714:	675a      	str	r2, [r3, #116]	; 0x74
 8005716:	e002      	b.n	800571e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a46      	ldr	r2, [pc, #280]	; (8005834 <UART_Start_Receive_IT+0x238>)
 800571c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01a      	beq.n	800575c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800574e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e4      	bne.n	8005726 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800577c:	64ba      	str	r2, [r7, #72]	; 0x48
 800577e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e5      	bne.n	800575c <UART_Start_Receive_IT+0x160>
 8005790:	e046      	b.n	8005820 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d107      	bne.n	80057ac <UART_Start_Receive_IT+0x1b0>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a24      	ldr	r2, [pc, #144]	; (8005838 <UART_Start_Receive_IT+0x23c>)
 80057a8:	675a      	str	r2, [r3, #116]	; 0x74
 80057aa:	e002      	b.n	80057b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a23      	ldr	r2, [pc, #140]	; (800583c <UART_Start_Receive_IT+0x240>)
 80057b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d019      	beq.n	80057ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057ce:	677b      	str	r3, [r7, #116]	; 0x74
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_Start_Receive_IT+0x1be>
 80057ec:	e018      	b.n	8005820 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f043 0320 	orr.w	r3, r3, #32
 8005802:	67bb      	str	r3, [r7, #120]	; 0x78
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	61bb      	str	r3, [r7, #24]
   return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	378c      	adds	r7, #140	; 0x8c
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	08006061 	.word	0x08006061
 8005834:	08005d01 	.word	0x08005d01
 8005838:	08005b49 	.word	0x08005b49
 800583c:	08005991 	.word	0x08005991

08005840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b095      	sub	sp, #84	; 0x54
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800585c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	643b      	str	r3, [r7, #64]	; 0x40
 8005868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800586c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e6      	bne.n	8005848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	61fb      	str	r3, [r7, #28]
   return(result);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800589e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d118      	bne.n	80058ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005900:	bf00      	nop
 8005902:	3754      	adds	r7, #84	; 0x54
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff f9ca 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	60bb      	str	r3, [r7, #8]
   return(result);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e6      	bne.n	8005940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff f995 	bl	8004cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005986:	bf00      	nop
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b09c      	sub	sp, #112	; 0x70
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800599e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a8:	2b22      	cmp	r3, #34	; 0x22
 80059aa:	f040 80be 	bne.w	8005b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	400a      	ands	r2, r1
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80a1 	bne.w	8005b3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	667b      	str	r3, [r7, #100]	; 0x64
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a33      	ldr	r2, [pc, #204]	; (8005b44 <UART_RxISR_8BIT+0x1b4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01f      	beq.n	8005abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	623b      	str	r3, [r7, #32]
   return(result);
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d12e      	bne.n	8005b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	617b      	str	r3, [r7, #20]
   return(result);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d103      	bne.n	8005b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff f8dc 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b20:	e00b      	b.n	8005b3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fa fd52 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 8005b28:	e007      	b.n	8005b3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0208 	orr.w	r2, r2, #8
 8005b38:	619a      	str	r2, [r3, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	3770      	adds	r7, #112	; 0x70
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40008000 	.word	0x40008000

08005b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b09c      	sub	sp, #112	; 0x70
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b60:	2b22      	cmp	r3, #34	; 0x22
 8005b62:	f040 80be 	bne.w	8005ce2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005b7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b7e:	4013      	ands	r3, r2
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 80a1 	bne.w	8005cf2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e6      	bne.n	8005bb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c02:	643a      	str	r2, [r7, #64]	; 0x40
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e5      	bne.n	8005be2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <UART_RxISR_16BIT+0x1b4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01f      	beq.n	8005c74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d12e      	bne.n	8005cda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 0310 	bic.w	r3, r3, #16
 8005c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6979      	ldr	r1, [r7, #20]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e6      	bne.n	8005c82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d103      	bne.n	8005cca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff f800 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cd8:	e00b      	b.n	8005cf2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fa fc76 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 8005ce0:	e007      	b.n	8005cf2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0208 	orr.w	r2, r2, #8
 8005cf0:	619a      	str	r2, [r3, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	3770      	adds	r7, #112	; 0x70
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40008000 	.word	0x40008000

08005d00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b0ac      	sub	sp, #176	; 0xb0
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d36:	2b22      	cmp	r3, #34	; 0x22
 8005d38:	f040 8182 	bne.w	8006040 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d42:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d46:	e125      	b.n	8005f94 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005d56:	b2d9      	uxtb	r1, r3
 8005d58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	400a      	ands	r2, r1
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d053      	beq.n	8005e42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d011      	beq.n	8005dca <UART_RxISR_8BIT_FIFOEN+0xca>
 8005da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d011      	beq.n	8005dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2202      	movs	r2, #2
 8005de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f043 0204 	orr.w	r2, r3, #4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d011      	beq.n	8005e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2204      	movs	r2, #4
 8005e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f043 0202 	orr.w	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fe ff45 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 80a2 	bne.w	8005f94 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e74:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005e78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e4      	bne.n	8005e50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eae:	66ba      	str	r2, [r7, #104]	; 0x68
 8005eb0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e1      	bne.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d021      	beq.n	8005f24 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01a      	beq.n	8005f24 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f10:	657b      	str	r3, [r7, #84]	; 0x54
 8005f12:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e4      	bne.n	8005eee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d130      	bne.n	8005f8e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	f023 0310 	bic.w	r3, r3, #16
 8005f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f54:	643b      	str	r3, [r7, #64]	; 0x40
 8005f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e4      	bne.n	8005f32 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d103      	bne.n	8005f7e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fe fea6 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
 8005f8c:	e002      	b.n	8005f94 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fa fb1c 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d006      	beq.n	8005faa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f aecf 	bne.w	8005d48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d049      	beq.n	8006050 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fc2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d242      	bcs.n	8006050 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e3      	bne.n	8005fca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a15      	ldr	r2, [pc, #84]	; (800605c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006006:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	60bb      	str	r3, [r7, #8]
   return(result);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f043 0320 	orr.w	r3, r3, #32
 800601c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e4      	bne.n	8006008 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800603e:	e007      	b.n	8006050 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0208 	orr.w	r2, r2, #8
 800604e:	619a      	str	r2, [r3, #24]
}
 8006050:	bf00      	nop
 8006052:	37b0      	adds	r7, #176	; 0xb0
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40008000 	.word	0x40008000
 800605c:	08005991 	.word	0x08005991

08006060 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b0ae      	sub	sp, #184	; 0xb8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800606e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006096:	2b22      	cmp	r3, #34	; 0x22
 8006098:	f040 8186 	bne.w	80063a8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060a6:	e129      	b.n	80062fc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80060ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80060be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80060c2:	4013      	ands	r3, r2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d053      	beq.n	80061a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d011      	beq.n	800612e <UART_RxISR_16BIT_FIFOEN+0xce>
 800610a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800610e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800612e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d011      	beq.n	800615e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800613a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800615e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800616a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2204      	movs	r2, #4
 800617c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f043 0202 	orr.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fe fd93 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 80a4 	bne.w	80062fc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e2      	bne.n	80061b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006218:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800621c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e1      	bne.n	80061ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a5f      	ldr	r2, [pc, #380]	; (80063c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d021      	beq.n	800628c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01a      	beq.n	800628c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800626a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006278:	65bb      	str	r3, [r7, #88]	; 0x58
 800627a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800627e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e4      	bne.n	8006256 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d130      	bne.n	80062f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	f023 0310 	bic.w	r3, r3, #16
 80062ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062bc:	647b      	str	r3, [r7, #68]	; 0x44
 80062be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e4      	bne.n	800629a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b10      	cmp	r3, #16
 80062dc:	d103      	bne.n	80062e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2210      	movs	r2, #16
 80062e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe fcf2 	bl	8004cd8 <HAL_UARTEx_RxEventCallback>
 80062f4:	e002      	b.n	80062fc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fa f968 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f aecb 	bne.w	80060a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006318:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800631c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006320:	2b00      	cmp	r3, #0
 8006322:	d049      	beq.n	80063b8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800632a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800632e:	429a      	cmp	r2, r3
 8006330:	d242      	bcs.n	80063b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	623b      	str	r3, [r7, #32]
   return(result);
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006356:	633a      	str	r2, [r7, #48]	; 0x30
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e3      	bne.n	8006332 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800636e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	60fb      	str	r3, [r7, #12]
   return(result);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	617b      	str	r3, [r7, #20]
   return(result);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e4      	bne.n	8006370 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063a6:	e007      	b.n	80063b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0208 	orr.w	r2, r2, #8
 80063b6:	619a      	str	r2, [r3, #24]
}
 80063b8:	bf00      	nop
 80063ba:	37b8      	adds	r7, #184	; 0xb8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40008000 	.word	0x40008000
 80063c4:	08005b49 	.word	0x08005b49

080063c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UARTEx_DisableFifoMode+0x16>
 8006416:	2302      	movs	r3, #2
 8006418:	e027      	b.n	800646a <HAL_UARTEx_DisableFifoMode+0x66>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	; 0x24
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800648a:	2302      	movs	r3, #2
 800648c:	e02d      	b.n	80064ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	; 0x24
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f850 	bl	8006570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006506:	2302      	movs	r3, #2
 8006508:	e02d      	b.n	8006566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2224      	movs	r2, #36	; 0x24
 8006516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f812 	bl	8006570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006590:	e031      	b.n	80065f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006592:	2308      	movs	r3, #8
 8006594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006596:	2308      	movs	r3, #8
 8006598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	0e5b      	lsrs	r3, r3, #25
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	0f5b      	lsrs	r3, r3, #29
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	7b3a      	ldrb	r2, [r7, #12]
 80065be:	4911      	ldr	r1, [pc, #68]	; (8006604 <UARTEx_SetNbDataToProcess+0x94>)
 80065c0:	5c8a      	ldrb	r2, [r1, r2]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065c6:	7b3a      	ldrb	r2, [r7, #12]
 80065c8:	490f      	ldr	r1, [pc, #60]	; (8006608 <UARTEx_SetNbDataToProcess+0x98>)
 80065ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	7b7a      	ldrb	r2, [r7, #13]
 80065dc:	4909      	ldr	r1, [pc, #36]	; (8006604 <UARTEx_SetNbDataToProcess+0x94>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e4:	7b7a      	ldrb	r2, [r7, #13]
 80065e6:	4908      	ldr	r1, [pc, #32]	; (8006608 <UARTEx_SetNbDataToProcess+0x98>)
 80065e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	08007530 	.word	0x08007530
 8006608:	08007538 	.word	0x08007538

0800660c <OLED_ClearBuffer>:
static uint8_t oled_buffer[2048];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8006616:	2300      	movs	r3, #0
 8006618:	81fb      	strh	r3, [r7, #14]
 800661a:	e006      	b.n	800662a <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 800661c:	89fb      	ldrh	r3, [r7, #14]
 800661e:	4908      	ldr	r1, [pc, #32]	; (8006640 <OLED_ClearBuffer+0x34>)
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	3301      	adds	r3, #1
 8006628:	81fb      	strh	r3, [r7, #14]
 800662a:	89fb      	ldrh	r3, [r7, #14]
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006630:	d3f4      	bcc.n	800661c <OLED_ClearBuffer+0x10>
	}
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000300 	.word	0x20000300

08006644 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af02      	add	r7, sp, #8
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 800664e:	2300      	movs	r3, #0
 8006650:	733b      	strb	r3, [r7, #12]
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <OLED_SendCommand+0x30>)
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f107 020c 	add.w	r2, r7, #12
 800665e:	230a      	movs	r3, #10
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	2302      	movs	r3, #2
 8006664:	2178      	movs	r1, #120	; 0x78
 8006666:	f7fb fbfd 	bl	8001e64 <HAL_I2C_Master_Transmit>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000b00 	.word	0x20000b00

08006678 <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	733b      	strb	r3, [r7, #12]
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <OLED_SendData+0x30>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f107 020c 	add.w	r2, r7, #12
 8006692:	230a      	movs	r3, #10
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	2302      	movs	r3, #2
 8006698:	2178      	movs	r1, #120	; 0x78
 800669a:	f7fb fbe3 	bl	8001e64 <HAL_I2C_Master_Transmit>
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000b00 	.word	0x20000b00

080066ac <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 80066b4:	4a30      	ldr	r2, [pc, #192]	; (8006778 <OLED_Init+0xcc>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <OLED_Init+0xcc>)
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	2364      	movs	r3, #100	; 0x64
 80066c0:	220a      	movs	r2, #10
 80066c2:	2178      	movs	r1, #120	; 0x78
 80066c4:	f7fb fce6 	bl	8002094 <HAL_I2C_IsDeviceReady>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <OLED_Init+0x26>
	{
		return 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e04e      	b.n	8006770 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 80066d2:	20ae      	movs	r0, #174	; 0xae
 80066d4:	f7ff ffb6 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 80066d8:	20d5      	movs	r0, #213	; 0xd5
 80066da:	f7ff ffb3 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 80066de:	2080      	movs	r0, #128	; 0x80
 80066e0:	f7ff ffb0 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 80066e4:	20a8      	movs	r0, #168	; 0xa8
 80066e6:	f7ff ffad 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 80066ea:	203f      	movs	r0, #63	; 0x3f
 80066ec:	f7ff ffaa 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 80066f0:	20d3      	movs	r0, #211	; 0xd3
 80066f2:	f7ff ffa7 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 80066f6:	2000      	movs	r0, #0
 80066f8:	f7ff ffa4 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 80066fc:	2040      	movs	r0, #64	; 0x40
 80066fe:	f7ff ffa1 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8006702:	208d      	movs	r0, #141	; 0x8d
 8006704:	f7ff ff9e 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 8006708:	2014      	movs	r0, #20
 800670a:	f7ff ff9b 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 800670e:	2020      	movs	r0, #32
 8006710:	f7ff ff98 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8006714:	2000      	movs	r0, #0
 8006716:	f7ff ff95 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 800671a:	20a1      	movs	r0, #161	; 0xa1
 800671c:	f7ff ff92 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 8006720:	20c8      	movs	r0, #200	; 0xc8
 8006722:	f7ff ff8f 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 8006726:	20da      	movs	r0, #218	; 0xda
 8006728:	f7ff ff8c 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 800672c:	2012      	movs	r0, #18
 800672e:	f7ff ff89 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 8006732:	2081      	movs	r0, #129	; 0x81
 8006734:	f7ff ff86 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 8006738:	20ff      	movs	r0, #255	; 0xff
 800673a:	f7ff ff83 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 800673e:	20d9      	movs	r0, #217	; 0xd9
 8006740:	f7ff ff80 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8006744:	20f1      	movs	r0, #241	; 0xf1
 8006746:	f7ff ff7d 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 800674a:	20db      	movs	r0, #219	; 0xdb
 800674c:	f7ff ff7a 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 8006750:	2040      	movs	r0, #64	; 0x40
 8006752:	f7ff ff77 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 8006756:	20a4      	movs	r0, #164	; 0xa4
 8006758:	f7ff ff74 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 800675c:	20a6      	movs	r0, #166	; 0xa6
 800675e:	f7ff ff71 	bl	8006644 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 8006762:	20af      	movs	r0, #175	; 0xaf
 8006764:	f7ff ff6e 	bl	8006644 <OLED_SendCommand>

	OLED_Clear(0);
 8006768:	2000      	movs	r0, #0
 800676a:	f000 f807 	bl	800677c <OLED_Clear>
	
	return 1;
 800676e:	2301      	movs	r3, #1
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000b00 	.word	0x20000b00

0800677c <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <OLED_Clear+0x18>
 800678c:	20ff      	movs	r0, #255	; 0xff
 800678e:	f7ff ff3d 	bl	800660c <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 8006792:	e002      	b.n	800679a <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 8006794:	2000      	movs	r0, #0
 8006796:	f7ff ff39 	bl	800660c <OLED_ClearBuffer>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
 80067ae:	460b      	mov	r3, r1
 80067b0:	71bb      	strb	r3, [r7, #6]
 80067b2:	4613      	mov	r3, r2
 80067b4:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80067b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db3d      	blt.n	800683a <OLED_DrawPixelStatus+0x96>
 80067be:	79bb      	ldrb	r3, [r7, #6]
 80067c0:	2b3f      	cmp	r3, #63	; 0x3f
 80067c2:	d83a      	bhi.n	800683a <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 80067c4:	797b      	ldrb	r3, [r7, #5]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01a      	beq.n	8006800 <OLED_DrawPixelStatus+0x5c>
 80067ca:	79fa      	ldrb	r2, [r7, #7]
 80067cc:	79bb      	ldrb	r3, [r7, #6]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	b2d8      	uxtb	r0, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	01db      	lsls	r3, r3, #7
 80067d6:	4413      	add	r3, r2
 80067d8:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <OLED_DrawPixelStatus+0xa4>)
 80067da:	5cd3      	ldrb	r3, [r2, r3]
 80067dc:	b25a      	sxtb	r2, r3
 80067de:	79bb      	ldrb	r3, [r7, #6]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	2101      	movs	r1, #1
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	4313      	orrs	r3, r2
 80067ee:	b259      	sxtb	r1, r3
 80067f0:	79fa      	ldrb	r2, [r7, #7]
 80067f2:	4603      	mov	r3, r0
 80067f4:	01db      	lsls	r3, r3, #7
 80067f6:	4413      	add	r3, r2
 80067f8:	b2c9      	uxtb	r1, r1
 80067fa:	4a13      	ldr	r2, [pc, #76]	; (8006848 <OLED_DrawPixelStatus+0xa4>)
 80067fc:	54d1      	strb	r1, [r2, r3]
 80067fe:	e01d      	b.n	800683c <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 8006800:	79fa      	ldrb	r2, [r7, #7]
 8006802:	79bb      	ldrb	r3, [r7, #6]
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	b2d8      	uxtb	r0, r3
 8006808:	4603      	mov	r3, r0
 800680a:	01db      	lsls	r3, r3, #7
 800680c:	4413      	add	r3, r2
 800680e:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <OLED_DrawPixelStatus+0xa4>)
 8006810:	5cd3      	ldrb	r3, [r2, r3]
 8006812:	b25a      	sxtb	r2, r3
 8006814:	79bb      	ldrb	r3, [r7, #6]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2101      	movs	r1, #1
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	b25b      	sxtb	r3, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	b25b      	sxtb	r3, r3
 8006826:	4013      	ands	r3, r2
 8006828:	b259      	sxtb	r1, r3
 800682a:	79fa      	ldrb	r2, [r7, #7]
 800682c:	4603      	mov	r3, r0
 800682e:	01db      	lsls	r3, r3, #7
 8006830:	4413      	add	r3, r2
 8006832:	b2c9      	uxtb	r1, r1
 8006834:	4a04      	ldr	r2, [pc, #16]	; (8006848 <OLED_DrawPixelStatus+0xa4>)
 8006836:	54d1      	strb	r1, [r2, r3]
 8006838:	e000      	b.n	800683c <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 800683a:	bf00      	nop
}
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000300 	.word	0x20000300

0800684c <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7f9 fce3 	bl	8000220 <strlen>
 800685a:	4603      	mov	r3, r0
 800685c:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 8006862:	2300      	movs	r3, #0
 8006864:	73bb      	strb	r3, [r7, #14]
 8006866:	e01a      	b.n	800689e <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <OLED_GetWidthStr+0x64>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <OLED_GetWidthStr+0x64>)
 800686e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006872:	4619      	mov	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <OLED_GetWidthStr+0x64>)
 800687c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006880:	1ac3      	subs	r3, r0, r3
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	3304      	adds	r3, #4
 8006888:	4413      	add	r3, r2
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4413      	add	r3, r2
 8006890:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	3301      	adds	r3, #1
 8006896:	73bb      	strb	r3, [r7, #14]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	7bba      	ldrb	r2, [r7, #14]
 80068a0:	7b7b      	ldrb	r3, [r7, #13]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d3e0      	bcc.n	8006868 <OLED_GetWidthStr+0x1c>
	}

	return len;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000b04 	.word	0x20000b04

080068b4 <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	4623      	mov	r3, r4
 80068c4:	71fb      	strb	r3, [r7, #7]
 80068c6:	4603      	mov	r3, r0
 80068c8:	71bb      	strb	r3, [r7, #6]
 80068ca:	460b      	mov	r3, r1
 80068cc:	717b      	strb	r3, [r7, #5]
 80068ce:	4613      	mov	r3, r2
 80068d0:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <OLED_DrawChar+0xfc>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b36      	ldr	r3, [pc, #216]	; (80069b0 <OLED_DrawChar+0xfc>)
 80068d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80068dc:	4618      	mov	r0, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	4933      	ldr	r1, [pc, #204]	; (80069b0 <OLED_DrawChar+0xfc>)
 80068e2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80068e6:	1a5b      	subs	r3, r3, r1
 80068e8:	fb00 f303 	mul.w	r3, r0, r3
 80068ec:	3304      	adds	r3, #4
 80068ee:	4413      	add	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
 80068f6:	e050      	b.n	800699a <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	73bb      	strb	r3, [r7, #14]
 80068fc:	e044      	b.n	8006988 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	08db      	lsrs	r3, r3, #3
 8006902:	b2db      	uxtb	r3, r3
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	4929      	ldr	r1, [pc, #164]	; (80069b0 <OLED_DrawChar+0xfc>)
 800690a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800690e:	3901      	subs	r1, #1
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4926      	ldr	r1, [pc, #152]	; (80069b0 <OLED_DrawChar+0xfc>)
 8006916:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800691a:	fb93 f3f1 	sdiv	r3, r3, r1
 800691e:	4413      	add	r3, r2
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4413      	add	r3, r2
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	fa42 f303 	asr.w	r3, r2, r3
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 800693c:	79ba      	ldrb	r2, [r7, #6]
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	4413      	add	r3, r2
 8006942:	b2d8      	uxtb	r0, r3
 8006944:	797a      	ldrb	r2, [r7, #5]
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	4413      	add	r3, r2
 800694a:	b2d9      	uxtb	r1, r3
 800694c:	793b      	ldrb	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	f7ff ff23 	bl	80067a4 <OLED_DrawPixelStatus>
 800695e:	e010      	b.n	8006982 <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 8006960:	79ba      	ldrb	r2, [r7, #6]
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	4413      	add	r3, r2
 8006966:	b2d8      	uxtb	r0, r3
 8006968:	797a      	ldrb	r2, [r7, #5]
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	4413      	add	r3, r2
 800696e:	b2d9      	uxtb	r1, r3
 8006970:	793b      	ldrb	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	f7ff ff11 	bl	80067a4 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	73bb      	strb	r3, [r7, #14]
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <OLED_DrawChar+0xfc>)
 800698c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006990:	4293      	cmp	r3, r2
 8006992:	dbb4      	blt.n	80068fe <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	3301      	adds	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d3a9      	bcc.n	80068f8 <OLED_DrawChar+0x44>
		}
	}
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd90      	pop	{r4, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000b04 	.word	0x20000b04

080069b4 <OLED_DrawStr>:

	OLED_DrawStr(buf, x, y, mode);
}

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	4608      	mov	r0, r1
 80069be:	4611      	mov	r1, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	70fb      	strb	r3, [r7, #3]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70bb      	strb	r3, [r7, #2]
 80069ca:	4613      	mov	r3, r2
 80069cc:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7f9 fc26 	bl	8000220 <strlen>
 80069d4:	4603      	mov	r3, r0
 80069d6:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2bfe      	cmp	r3, #254	; 0xfe
 80069e0:	d106      	bne.n	80069f0 <OLED_DrawStr+0x3c>
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ff32 	bl	800684c <OLED_GetWidthStr>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80069ee:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2bff      	cmp	r3, #255	; 0xff
 80069f4:	d109      	bne.n	8006a0a <OLED_DrawStr+0x56>
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff28 	bl	800684c <OLED_GetWidthStr>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8006a02:	0fda      	lsrs	r2, r3, #31
 8006a04:	4413      	add	r3, r2
 8006a06:	105b      	asrs	r3, r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 8006a0a:	78bb      	ldrb	r3, [r7, #2]
 8006a0c:	2bff      	cmp	r3, #255	; 0xff
 8006a0e:	d108      	bne.n	8006a22 <OLED_DrawStr+0x6e>
 8006a10:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <OLED_DrawStr+0xcc>)
 8006a12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a16:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006a1a:	0fda      	lsrs	r2, r3, #31
 8006a1c:	4413      	add	r3, r2
 8006a1e:	105b      	asrs	r3, r3, #1
 8006a20:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	73bb      	strb	r3, [r7, #14]
 8006a26:	e021      	b.n	8006a6c <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7818      	ldrb	r0, [r3, #0]
 8006a2c:	787b      	ldrb	r3, [r7, #1]
 8006a2e:	78ba      	ldrb	r2, [r7, #2]
 8006a30:	7bf9      	ldrb	r1, [r7, #15]
 8006a32:	f7ff ff3f 	bl	80068b4 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <OLED_DrawStr+0xcc>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <OLED_DrawStr+0xcc>)
 8006a3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006a40:	4619      	mov	r1, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <OLED_DrawStr+0xcc>)
 8006a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a4e:	1ac3      	subs	r3, r0, r3
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	3304      	adds	r3, #4
 8006a56:	4413      	add	r3, r2
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	3301      	adds	r3, #1
 8006a64:	73bb      	strb	r3, [r7, #14]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	7bba      	ldrb	r2, [r7, #14]
 8006a6e:	7b7b      	ldrb	r3, [r7, #13]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d3d9      	bcc.n	8006a28 <OLED_DrawStr+0x74>
	}
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000b04 	.word	0x20000b04

08006a84 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	71fb      	strb	r3, [r7, #7]
 8006a8e:	e032      	b.n	8006af6 <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8006a90:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <OLED_UpdateScreen+0x84>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fdd2 	bl	8006644 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <OLED_UpdateScreen+0x84>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f043 0310 	orr.w	r3, r3, #16
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fdc8 	bl	8006644 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fdc1 	bl	8006644 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	80bb      	strh	r3, [r7, #4]
 8006ac6:	e00f      	b.n	8006ae8 <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	01da      	lsls	r2, r3, #7
 8006acc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <OLED_UpdateScreen+0x88>)
 8006ad4:	5cd3      	ldrb	r3, [r2, r3]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fdce 	bl	8006678 <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8006adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	80bb      	strh	r3, [r7, #4]
 8006ae8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006aec:	2b7f      	cmp	r3, #127	; 0x7f
 8006aee:	ddeb      	ble.n	8006ac8 <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	3301      	adds	r3, #1
 8006af4:	71fb      	strb	r3, [r7, #7]
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b07      	cmp	r3, #7
 8006afa:	d9c9      	bls.n	8006a90 <OLED_UpdateScreen+0xc>
		}
	}
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200002fc 	.word	0x200002fc
 8006b0c:	20000300 	.word	0x20000300

08006b10 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	Font.font = new_font;
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <FontSet+0x58>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
	Font.width = (int16_t)fontbyte(0); //*LARGURA DA FONTE*//
 8006b1e:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <FontSet+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b21a      	sxth	r2, r3
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <FontSet+0x58>)
 8006b28:	809a      	strh	r2, [r3, #4]
	Font.height = (int16_t)fontbyte(1);//*ALTURA DA FONNTE*//
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <FontSet+0x58>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b21a      	sxth	r2, r3
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <FontSet+0x58>)
 8006b36:	80da      	strh	r2, [r3, #6]
	Font.offset = (int16_t)fontbyte(2);/*PRIMEIRA LINHA DO VETOR É REFERENTE A QUAL POSIÇÃO DA TABELA ASC?*/
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <FontSet+0x58>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b21a      	sxth	r2, r3
 8006b42:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <FontSet+0x58>)
 8006b44:	811a      	strh	r2, [r3, #8]
	Font.numchars = (int16_t)fontbyte(3);	/*NUMERO DE COMPONENTES NUMA LINHA DO VETOR*/
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <FontSet+0x58>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3303      	adds	r3, #3
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b21a      	sxth	r2, r3
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <FontSet+0x58>)
 8006b52:	815a      	strh	r2, [r3, #10]
	Font.inverted = NORMAL;
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <FontSet+0x58>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	731a      	strb	r2, [r3, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000b04 	.word	0x20000b04

08006b6c <siprintf>:
 8006b6c:	b40e      	push	{r1, r2, r3}
 8006b6e:	b500      	push	{lr}
 8006b70:	b09c      	sub	sp, #112	; 0x70
 8006b72:	ab1d      	add	r3, sp, #116	; 0x74
 8006b74:	9002      	str	r0, [sp, #8]
 8006b76:	9006      	str	r0, [sp, #24]
 8006b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <siprintf+0x38>)
 8006b7e:	9107      	str	r1, [sp, #28]
 8006b80:	9104      	str	r1, [sp, #16]
 8006b82:	4909      	ldr	r1, [pc, #36]	; (8006ba8 <siprintf+0x3c>)
 8006b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b88:	9105      	str	r1, [sp, #20]
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	a902      	add	r1, sp, #8
 8006b90:	f000 f992 	bl	8006eb8 <_svfiprintf_r>
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	b01c      	add	sp, #112	; 0x70
 8006b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba0:	b003      	add	sp, #12
 8006ba2:	4770      	bx	lr
 8006ba4:	20000064 	.word	0x20000064
 8006ba8:	ffff0208 	.word	0xffff0208

08006bac <memset>:
 8006bac:	4402      	add	r2, r0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <memset+0xa>
 8006bb4:	4770      	bx	lr
 8006bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bba:	e7f9      	b.n	8006bb0 <memset+0x4>

08006bbc <__errno>:
 8006bbc:	4b01      	ldr	r3, [pc, #4]	; (8006bc4 <__errno+0x8>)
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000064 	.word	0x20000064

08006bc8 <__libc_init_array>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4d0d      	ldr	r5, [pc, #52]	; (8006c00 <__libc_init_array+0x38>)
 8006bcc:	4c0d      	ldr	r4, [pc, #52]	; (8006c04 <__libc_init_array+0x3c>)
 8006bce:	1b64      	subs	r4, r4, r5
 8006bd0:	10a4      	asrs	r4, r4, #2
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	42a6      	cmp	r6, r4
 8006bd6:	d109      	bne.n	8006bec <__libc_init_array+0x24>
 8006bd8:	4d0b      	ldr	r5, [pc, #44]	; (8006c08 <__libc_init_array+0x40>)
 8006bda:	4c0c      	ldr	r4, [pc, #48]	; (8006c0c <__libc_init_array+0x44>)
 8006bdc:	f000 fc6a 	bl	80074b4 <_init>
 8006be0:	1b64      	subs	r4, r4, r5
 8006be2:	10a4      	asrs	r4, r4, #2
 8006be4:	2600      	movs	r6, #0
 8006be6:	42a6      	cmp	r6, r4
 8006be8:	d105      	bne.n	8006bf6 <__libc_init_array+0x2e>
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf0:	4798      	blx	r3
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7ee      	b.n	8006bd4 <__libc_init_array+0xc>
 8006bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfa:	4798      	blx	r3
 8006bfc:	3601      	adds	r6, #1
 8006bfe:	e7f2      	b.n	8006be6 <__libc_init_array+0x1e>
 8006c00:	080087e0 	.word	0x080087e0
 8006c04:	080087e0 	.word	0x080087e0
 8006c08:	080087e0 	.word	0x080087e0
 8006c0c:	080087e4 	.word	0x080087e4

08006c10 <__retarget_lock_acquire_recursive>:
 8006c10:	4770      	bx	lr

08006c12 <__retarget_lock_release_recursive>:
 8006c12:	4770      	bx	lr

08006c14 <_free_r>:
 8006c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c16:	2900      	cmp	r1, #0
 8006c18:	d044      	beq.n	8006ca4 <_free_r+0x90>
 8006c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1e:	9001      	str	r0, [sp, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f1a1 0404 	sub.w	r4, r1, #4
 8006c26:	bfb8      	it	lt
 8006c28:	18e4      	addlt	r4, r4, r3
 8006c2a:	f000 f8df 	bl	8006dec <__malloc_lock>
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <_free_r+0x94>)
 8006c30:	9801      	ldr	r0, [sp, #4]
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	b933      	cbnz	r3, 8006c44 <_free_r+0x30>
 8006c36:	6063      	str	r3, [r4, #4]
 8006c38:	6014      	str	r4, [r2, #0]
 8006c3a:	b003      	add	sp, #12
 8006c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c40:	f000 b8da 	b.w	8006df8 <__malloc_unlock>
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d908      	bls.n	8006c5a <_free_r+0x46>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1961      	adds	r1, r4, r5
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf01      	itttt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	1949      	addeq	r1, r1, r5
 8006c56:	6021      	streq	r1, [r4, #0]
 8006c58:	e7ed      	b.n	8006c36 <_free_r+0x22>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	b10b      	cbz	r3, 8006c64 <_free_r+0x50>
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d9fa      	bls.n	8006c5a <_free_r+0x46>
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	1855      	adds	r5, r2, r1
 8006c68:	42a5      	cmp	r5, r4
 8006c6a:	d10b      	bne.n	8006c84 <_free_r+0x70>
 8006c6c:	6824      	ldr	r4, [r4, #0]
 8006c6e:	4421      	add	r1, r4
 8006c70:	1854      	adds	r4, r2, r1
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	d1e0      	bne.n	8006c3a <_free_r+0x26>
 8006c78:	681c      	ldr	r4, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	6053      	str	r3, [r2, #4]
 8006c7e:	440c      	add	r4, r1
 8006c80:	6014      	str	r4, [r2, #0]
 8006c82:	e7da      	b.n	8006c3a <_free_r+0x26>
 8006c84:	d902      	bls.n	8006c8c <_free_r+0x78>
 8006c86:	230c      	movs	r3, #12
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	e7d6      	b.n	8006c3a <_free_r+0x26>
 8006c8c:	6825      	ldr	r5, [r4, #0]
 8006c8e:	1961      	adds	r1, r4, r5
 8006c90:	428b      	cmp	r3, r1
 8006c92:	bf04      	itt	eq
 8006c94:	6819      	ldreq	r1, [r3, #0]
 8006c96:	685b      	ldreq	r3, [r3, #4]
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	bf04      	itt	eq
 8006c9c:	1949      	addeq	r1, r1, r5
 8006c9e:	6021      	streq	r1, [r4, #0]
 8006ca0:	6054      	str	r4, [r2, #4]
 8006ca2:	e7ca      	b.n	8006c3a <_free_r+0x26>
 8006ca4:	b003      	add	sp, #12
 8006ca6:	bd30      	pop	{r4, r5, pc}
 8006ca8:	20000c54 	.word	0x20000c54

08006cac <sbrk_aligned>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4e0e      	ldr	r6, [pc, #56]	; (8006ce8 <sbrk_aligned+0x3c>)
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	6831      	ldr	r1, [r6, #0]
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	b911      	cbnz	r1, 8006cbe <sbrk_aligned+0x12>
 8006cb8:	f000 fba6 	bl	8007408 <_sbrk_r>
 8006cbc:	6030      	str	r0, [r6, #0]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 fba1 	bl	8007408 <_sbrk_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	d00a      	beq.n	8006ce0 <sbrk_aligned+0x34>
 8006cca:	1cc4      	adds	r4, r0, #3
 8006ccc:	f024 0403 	bic.w	r4, r4, #3
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d007      	beq.n	8006ce4 <sbrk_aligned+0x38>
 8006cd4:	1a21      	subs	r1, r4, r0
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 fb96 	bl	8007408 <_sbrk_r>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d101      	bne.n	8006ce4 <sbrk_aligned+0x38>
 8006ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	20000c58 	.word	0x20000c58

08006cec <_malloc_r>:
 8006cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf0:	1ccd      	adds	r5, r1, #3
 8006cf2:	f025 0503 	bic.w	r5, r5, #3
 8006cf6:	3508      	adds	r5, #8
 8006cf8:	2d0c      	cmp	r5, #12
 8006cfa:	bf38      	it	cc
 8006cfc:	250c      	movcc	r5, #12
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	4607      	mov	r7, r0
 8006d02:	db01      	blt.n	8006d08 <_malloc_r+0x1c>
 8006d04:	42a9      	cmp	r1, r5
 8006d06:	d905      	bls.n	8006d14 <_malloc_r+0x28>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	2600      	movs	r6, #0
 8006d0e:	4630      	mov	r0, r6
 8006d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006de8 <_malloc_r+0xfc>
 8006d18:	f000 f868 	bl	8006dec <__malloc_lock>
 8006d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d20:	461c      	mov	r4, r3
 8006d22:	bb5c      	cbnz	r4, 8006d7c <_malloc_r+0x90>
 8006d24:	4629      	mov	r1, r5
 8006d26:	4638      	mov	r0, r7
 8006d28:	f7ff ffc0 	bl	8006cac <sbrk_aligned>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	4604      	mov	r4, r0
 8006d30:	d155      	bne.n	8006dde <_malloc_r+0xf2>
 8006d32:	f8d8 4000 	ldr.w	r4, [r8]
 8006d36:	4626      	mov	r6, r4
 8006d38:	2e00      	cmp	r6, #0
 8006d3a:	d145      	bne.n	8006dc8 <_malloc_r+0xdc>
 8006d3c:	2c00      	cmp	r4, #0
 8006d3e:	d048      	beq.n	8006dd2 <_malloc_r+0xe6>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	4631      	mov	r1, r6
 8006d44:	4638      	mov	r0, r7
 8006d46:	eb04 0903 	add.w	r9, r4, r3
 8006d4a:	f000 fb5d 	bl	8007408 <_sbrk_r>
 8006d4e:	4581      	cmp	r9, r0
 8006d50:	d13f      	bne.n	8006dd2 <_malloc_r+0xe6>
 8006d52:	6821      	ldr	r1, [r4, #0]
 8006d54:	1a6d      	subs	r5, r5, r1
 8006d56:	4629      	mov	r1, r5
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ffa7 	bl	8006cac <sbrk_aligned>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d037      	beq.n	8006dd2 <_malloc_r+0xe6>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	442b      	add	r3, r5
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	f8d8 3000 	ldr.w	r3, [r8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d038      	beq.n	8006de2 <_malloc_r+0xf6>
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	42a2      	cmp	r2, r4
 8006d74:	d12b      	bne.n	8006dce <_malloc_r+0xe2>
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	e00f      	b.n	8006d9c <_malloc_r+0xb0>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	1b52      	subs	r2, r2, r5
 8006d80:	d41f      	bmi.n	8006dc2 <_malloc_r+0xd6>
 8006d82:	2a0b      	cmp	r2, #11
 8006d84:	d917      	bls.n	8006db6 <_malloc_r+0xca>
 8006d86:	1961      	adds	r1, r4, r5
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	6025      	str	r5, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	6059      	strne	r1, [r3, #4]
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	bf08      	it	eq
 8006d94:	f8c8 1000 	streq.w	r1, [r8]
 8006d98:	5162      	str	r2, [r4, r5]
 8006d9a:	604b      	str	r3, [r1, #4]
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f104 060b 	add.w	r6, r4, #11
 8006da2:	f000 f829 	bl	8006df8 <__malloc_unlock>
 8006da6:	f026 0607 	bic.w	r6, r6, #7
 8006daa:	1d23      	adds	r3, r4, #4
 8006dac:	1af2      	subs	r2, r6, r3
 8006dae:	d0ae      	beq.n	8006d0e <_malloc_r+0x22>
 8006db0:	1b9b      	subs	r3, r3, r6
 8006db2:	50a3      	str	r3, [r4, r2]
 8006db4:	e7ab      	b.n	8006d0e <_malloc_r+0x22>
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	6862      	ldr	r2, [r4, #4]
 8006dba:	d1dd      	bne.n	8006d78 <_malloc_r+0x8c>
 8006dbc:	f8c8 2000 	str.w	r2, [r8]
 8006dc0:	e7ec      	b.n	8006d9c <_malloc_r+0xb0>
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	6864      	ldr	r4, [r4, #4]
 8006dc6:	e7ac      	b.n	8006d22 <_malloc_r+0x36>
 8006dc8:	4634      	mov	r4, r6
 8006dca:	6876      	ldr	r6, [r6, #4]
 8006dcc:	e7b4      	b.n	8006d38 <_malloc_r+0x4c>
 8006dce:	4613      	mov	r3, r2
 8006dd0:	e7cc      	b.n	8006d6c <_malloc_r+0x80>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f000 f80e 	bl	8006df8 <__malloc_unlock>
 8006ddc:	e797      	b.n	8006d0e <_malloc_r+0x22>
 8006dde:	6025      	str	r5, [r4, #0]
 8006de0:	e7dc      	b.n	8006d9c <_malloc_r+0xb0>
 8006de2:	605b      	str	r3, [r3, #4]
 8006de4:	deff      	udf	#255	; 0xff
 8006de6:	bf00      	nop
 8006de8:	20000c54 	.word	0x20000c54

08006dec <__malloc_lock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_lock+0x8>)
 8006dee:	f7ff bf0f 	b.w	8006c10 <__retarget_lock_acquire_recursive>
 8006df2:	bf00      	nop
 8006df4:	20000c50 	.word	0x20000c50

08006df8 <__malloc_unlock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_unlock+0x8>)
 8006dfa:	f7ff bf0a 	b.w	8006c12 <__retarget_lock_release_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20000c50 	.word	0x20000c50

08006e04 <__ssputs_r>:
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	688e      	ldr	r6, [r1, #8]
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	42be      	cmp	r6, r7
 8006e0e:	680b      	ldr	r3, [r1, #0]
 8006e10:	4682      	mov	sl, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	4690      	mov	r8, r2
 8006e16:	d82c      	bhi.n	8006e72 <__ssputs_r+0x6e>
 8006e18:	898a      	ldrh	r2, [r1, #12]
 8006e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e1e:	d026      	beq.n	8006e6e <__ssputs_r+0x6a>
 8006e20:	6965      	ldr	r5, [r4, #20]
 8006e22:	6909      	ldr	r1, [r1, #16]
 8006e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e28:	eba3 0901 	sub.w	r9, r3, r1
 8006e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e30:	1c7b      	adds	r3, r7, #1
 8006e32:	444b      	add	r3, r9
 8006e34:	106d      	asrs	r5, r5, #1
 8006e36:	429d      	cmp	r5, r3
 8006e38:	bf38      	it	cc
 8006e3a:	461d      	movcc	r5, r3
 8006e3c:	0553      	lsls	r3, r2, #21
 8006e3e:	d527      	bpl.n	8006e90 <__ssputs_r+0x8c>
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7ff ff53 	bl	8006cec <_malloc_r>
 8006e46:	4606      	mov	r6, r0
 8006e48:	b360      	cbz	r0, 8006ea4 <__ssputs_r+0xa0>
 8006e4a:	6921      	ldr	r1, [r4, #16]
 8006e4c:	464a      	mov	r2, r9
 8006e4e:	f000 faeb 	bl	8007428 <memcpy>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	6126      	str	r6, [r4, #16]
 8006e60:	6165      	str	r5, [r4, #20]
 8006e62:	444e      	add	r6, r9
 8006e64:	eba5 0509 	sub.w	r5, r5, r9
 8006e68:	6026      	str	r6, [r4, #0]
 8006e6a:	60a5      	str	r5, [r4, #8]
 8006e6c:	463e      	mov	r6, r7
 8006e6e:	42be      	cmp	r6, r7
 8006e70:	d900      	bls.n	8006e74 <__ssputs_r+0x70>
 8006e72:	463e      	mov	r6, r7
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	4632      	mov	r2, r6
 8006e78:	4641      	mov	r1, r8
 8006e7a:	f000 faab 	bl	80073d4 <memmove>
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	1b9b      	subs	r3, r3, r6
 8006e82:	60a3      	str	r3, [r4, #8]
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	4433      	add	r3, r6
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e90:	462a      	mov	r2, r5
 8006e92:	f000 fad7 	bl	8007444 <_realloc_r>
 8006e96:	4606      	mov	r6, r0
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1e0      	bne.n	8006e5e <__ssputs_r+0x5a>
 8006e9c:	6921      	ldr	r1, [r4, #16]
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	f7ff feb8 	bl	8006c14 <_free_r>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	f8ca 3000 	str.w	r3, [sl]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb6:	e7e9      	b.n	8006e8c <__ssputs_r+0x88>

08006eb8 <_svfiprintf_r>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	4698      	mov	r8, r3
 8006ebe:	898b      	ldrh	r3, [r1, #12]
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	b09d      	sub	sp, #116	; 0x74
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	d50e      	bpl.n	8006eea <_svfiprintf_r+0x32>
 8006ecc:	690b      	ldr	r3, [r1, #16]
 8006ece:	b963      	cbnz	r3, 8006eea <_svfiprintf_r+0x32>
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	f7ff ff0b 	bl	8006cec <_malloc_r>
 8006ed6:	6028      	str	r0, [r5, #0]
 8006ed8:	6128      	str	r0, [r5, #16]
 8006eda:	b920      	cbnz	r0, 8006ee6 <_svfiprintf_r+0x2e>
 8006edc:	230c      	movs	r3, #12
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e0d0      	b.n	8007088 <_svfiprintf_r+0x1d0>
 8006ee6:	2340      	movs	r3, #64	; 0x40
 8006ee8:	616b      	str	r3, [r5, #20]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	2320      	movs	r3, #32
 8006ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef8:	2330      	movs	r3, #48	; 0x30
 8006efa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070a0 <_svfiprintf_r+0x1e8>
 8006efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f02:	f04f 0901 	mov.w	r9, #1
 8006f06:	4623      	mov	r3, r4
 8006f08:	469a      	mov	sl, r3
 8006f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0e:	b10a      	cbz	r2, 8006f14 <_svfiprintf_r+0x5c>
 8006f10:	2a25      	cmp	r2, #37	; 0x25
 8006f12:	d1f9      	bne.n	8006f08 <_svfiprintf_r+0x50>
 8006f14:	ebba 0b04 	subs.w	fp, sl, r4
 8006f18:	d00b      	beq.n	8006f32 <_svfiprintf_r+0x7a>
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4638      	mov	r0, r7
 8006f22:	f7ff ff6f 	bl	8006e04 <__ssputs_r>
 8006f26:	3001      	adds	r0, #1
 8006f28:	f000 80a9 	beq.w	800707e <_svfiprintf_r+0x1c6>
 8006f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f2e:	445a      	add	r2, fp
 8006f30:	9209      	str	r2, [sp, #36]	; 0x24
 8006f32:	f89a 3000 	ldrb.w	r3, [sl]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80a1 	beq.w	800707e <_svfiprintf_r+0x1c6>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f46:	f10a 0a01 	add.w	sl, sl, #1
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	9307      	str	r3, [sp, #28]
 8006f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f52:	931a      	str	r3, [sp, #104]	; 0x68
 8006f54:	4654      	mov	r4, sl
 8006f56:	2205      	movs	r2, #5
 8006f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5c:	4850      	ldr	r0, [pc, #320]	; (80070a0 <_svfiprintf_r+0x1e8>)
 8006f5e:	f7f9 f967 	bl	8000230 <memchr>
 8006f62:	9a04      	ldr	r2, [sp, #16]
 8006f64:	b9d8      	cbnz	r0, 8006f9e <_svfiprintf_r+0xe6>
 8006f66:	06d0      	lsls	r0, r2, #27
 8006f68:	bf44      	itt	mi
 8006f6a:	2320      	movmi	r3, #32
 8006f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f70:	0711      	lsls	r1, r2, #28
 8006f72:	bf44      	itt	mi
 8006f74:	232b      	movmi	r3, #43	; 0x2b
 8006f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f80:	d015      	beq.n	8006fae <_svfiprintf_r+0xf6>
 8006f82:	9a07      	ldr	r2, [sp, #28]
 8006f84:	4654      	mov	r4, sl
 8006f86:	2000      	movs	r0, #0
 8006f88:	f04f 0c0a 	mov.w	ip, #10
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f92:	3b30      	subs	r3, #48	; 0x30
 8006f94:	2b09      	cmp	r3, #9
 8006f96:	d94d      	bls.n	8007034 <_svfiprintf_r+0x17c>
 8006f98:	b1b0      	cbz	r0, 8006fc8 <_svfiprintf_r+0x110>
 8006f9a:	9207      	str	r2, [sp, #28]
 8006f9c:	e014      	b.n	8006fc8 <_svfiprintf_r+0x110>
 8006f9e:	eba0 0308 	sub.w	r3, r0, r8
 8006fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	46a2      	mov	sl, r4
 8006fac:	e7d2      	b.n	8006f54 <_svfiprintf_r+0x9c>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	9103      	str	r1, [sp, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfbb      	ittet	lt
 8006fba:	425b      	neglt	r3, r3
 8006fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc0:	9307      	strge	r3, [sp, #28]
 8006fc2:	9307      	strlt	r3, [sp, #28]
 8006fc4:	bfb8      	it	lt
 8006fc6:	9204      	strlt	r2, [sp, #16]
 8006fc8:	7823      	ldrb	r3, [r4, #0]
 8006fca:	2b2e      	cmp	r3, #46	; 0x2e
 8006fcc:	d10c      	bne.n	8006fe8 <_svfiprintf_r+0x130>
 8006fce:	7863      	ldrb	r3, [r4, #1]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d134      	bne.n	800703e <_svfiprintf_r+0x186>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	9203      	str	r2, [sp, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb8      	it	lt
 8006fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe4:	3402      	adds	r4, #2
 8006fe6:	9305      	str	r3, [sp, #20]
 8006fe8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80070b0 <_svfiprintf_r+0x1f8>
 8006fec:	7821      	ldrb	r1, [r4, #0]
 8006fee:	2203      	movs	r2, #3
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f7f9 f91d 	bl	8000230 <memchr>
 8006ff6:	b138      	cbz	r0, 8007008 <_svfiprintf_r+0x150>
 8006ff8:	9b04      	ldr	r3, [sp, #16]
 8006ffa:	eba0 000a 	sub.w	r0, r0, sl
 8006ffe:	2240      	movs	r2, #64	; 0x40
 8007000:	4082      	lsls	r2, r0
 8007002:	4313      	orrs	r3, r2
 8007004:	3401      	adds	r4, #1
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700c:	4825      	ldr	r0, [pc, #148]	; (80070a4 <_svfiprintf_r+0x1ec>)
 800700e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007012:	2206      	movs	r2, #6
 8007014:	f7f9 f90c 	bl	8000230 <memchr>
 8007018:	2800      	cmp	r0, #0
 800701a:	d038      	beq.n	800708e <_svfiprintf_r+0x1d6>
 800701c:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <_svfiprintf_r+0x1f0>)
 800701e:	bb1b      	cbnz	r3, 8007068 <_svfiprintf_r+0x1b0>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	3307      	adds	r3, #7
 8007024:	f023 0307 	bic.w	r3, r3, #7
 8007028:	3308      	adds	r3, #8
 800702a:	9303      	str	r3, [sp, #12]
 800702c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702e:	4433      	add	r3, r6
 8007030:	9309      	str	r3, [sp, #36]	; 0x24
 8007032:	e768      	b.n	8006f06 <_svfiprintf_r+0x4e>
 8007034:	fb0c 3202 	mla	r2, ip, r2, r3
 8007038:	460c      	mov	r4, r1
 800703a:	2001      	movs	r0, #1
 800703c:	e7a6      	b.n	8006f8c <_svfiprintf_r+0xd4>
 800703e:	2300      	movs	r3, #0
 8007040:	3401      	adds	r4, #1
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	4619      	mov	r1, r3
 8007046:	f04f 0c0a 	mov.w	ip, #10
 800704a:	4620      	mov	r0, r4
 800704c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007050:	3a30      	subs	r2, #48	; 0x30
 8007052:	2a09      	cmp	r2, #9
 8007054:	d903      	bls.n	800705e <_svfiprintf_r+0x1a6>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0c6      	beq.n	8006fe8 <_svfiprintf_r+0x130>
 800705a:	9105      	str	r1, [sp, #20]
 800705c:	e7c4      	b.n	8006fe8 <_svfiprintf_r+0x130>
 800705e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007062:	4604      	mov	r4, r0
 8007064:	2301      	movs	r3, #1
 8007066:	e7f0      	b.n	800704a <_svfiprintf_r+0x192>
 8007068:	ab03      	add	r3, sp, #12
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	462a      	mov	r2, r5
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <_svfiprintf_r+0x1f4>)
 8007070:	a904      	add	r1, sp, #16
 8007072:	4638      	mov	r0, r7
 8007074:	f3af 8000 	nop.w
 8007078:	1c42      	adds	r2, r0, #1
 800707a:	4606      	mov	r6, r0
 800707c:	d1d6      	bne.n	800702c <_svfiprintf_r+0x174>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	065b      	lsls	r3, r3, #25
 8007082:	f53f af2d 	bmi.w	8006ee0 <_svfiprintf_r+0x28>
 8007086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007088:	b01d      	add	sp, #116	; 0x74
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	ab03      	add	r3, sp, #12
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	462a      	mov	r2, r5
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <_svfiprintf_r+0x1f4>)
 8007096:	a904      	add	r1, sp, #16
 8007098:	4638      	mov	r0, r7
 800709a:	f000 f879 	bl	8007190 <_printf_i>
 800709e:	e7eb      	b.n	8007078 <_svfiprintf_r+0x1c0>
 80070a0:	080087a4 	.word	0x080087a4
 80070a4:	080087ae 	.word	0x080087ae
 80070a8:	00000000 	.word	0x00000000
 80070ac:	08006e05 	.word	0x08006e05
 80070b0:	080087aa 	.word	0x080087aa

080070b4 <_printf_common>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	4616      	mov	r6, r2
 80070ba:	4699      	mov	r9, r3
 80070bc:	688a      	ldr	r2, [r1, #8]
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bfb8      	it	lt
 80070c8:	4613      	movlt	r3, r2
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070d0:	4607      	mov	r7, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	b10a      	cbz	r2, 80070da <_printf_common+0x26>
 80070d6:	3301      	adds	r3, #1
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	0699      	lsls	r1, r3, #26
 80070de:	bf42      	ittt	mi
 80070e0:	6833      	ldrmi	r3, [r6, #0]
 80070e2:	3302      	addmi	r3, #2
 80070e4:	6033      	strmi	r3, [r6, #0]
 80070e6:	6825      	ldr	r5, [r4, #0]
 80070e8:	f015 0506 	ands.w	r5, r5, #6
 80070ec:	d106      	bne.n	80070fc <_printf_common+0x48>
 80070ee:	f104 0a19 	add.w	sl, r4, #25
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	6832      	ldr	r2, [r6, #0]
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dc26      	bgt.n	800714a <_printf_common+0x96>
 80070fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007100:	1e13      	subs	r3, r2, #0
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	bf18      	it	ne
 8007106:	2301      	movne	r3, #1
 8007108:	0692      	lsls	r2, r2, #26
 800710a:	d42b      	bmi.n	8007164 <_printf_common+0xb0>
 800710c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007110:	4649      	mov	r1, r9
 8007112:	4638      	mov	r0, r7
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d01e      	beq.n	8007158 <_printf_common+0xa4>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	6922      	ldr	r2, [r4, #16]
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	2b04      	cmp	r3, #4
 8007124:	bf02      	ittt	eq
 8007126:	68e5      	ldreq	r5, [r4, #12]
 8007128:	6833      	ldreq	r3, [r6, #0]
 800712a:	1aed      	subeq	r5, r5, r3
 800712c:	68a3      	ldr	r3, [r4, #8]
 800712e:	bf0c      	ite	eq
 8007130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007134:	2500      	movne	r5, #0
 8007136:	4293      	cmp	r3, r2
 8007138:	bfc4      	itt	gt
 800713a:	1a9b      	subgt	r3, r3, r2
 800713c:	18ed      	addgt	r5, r5, r3
 800713e:	2600      	movs	r6, #0
 8007140:	341a      	adds	r4, #26
 8007142:	42b5      	cmp	r5, r6
 8007144:	d11a      	bne.n	800717c <_printf_common+0xc8>
 8007146:	2000      	movs	r0, #0
 8007148:	e008      	b.n	800715c <_printf_common+0xa8>
 800714a:	2301      	movs	r3, #1
 800714c:	4652      	mov	r2, sl
 800714e:	4649      	mov	r1, r9
 8007150:	4638      	mov	r0, r7
 8007152:	47c0      	blx	r8
 8007154:	3001      	adds	r0, #1
 8007156:	d103      	bne.n	8007160 <_printf_common+0xac>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	3501      	adds	r5, #1
 8007162:	e7c6      	b.n	80070f2 <_printf_common+0x3e>
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	2030      	movs	r0, #48	; 0x30
 800716a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716e:	4422      	add	r2, r4
 8007170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007178:	3302      	adds	r3, #2
 800717a:	e7c7      	b.n	800710c <_printf_common+0x58>
 800717c:	2301      	movs	r3, #1
 800717e:	4622      	mov	r2, r4
 8007180:	4649      	mov	r1, r9
 8007182:	4638      	mov	r0, r7
 8007184:	47c0      	blx	r8
 8007186:	3001      	adds	r0, #1
 8007188:	d0e6      	beq.n	8007158 <_printf_common+0xa4>
 800718a:	3601      	adds	r6, #1
 800718c:	e7d9      	b.n	8007142 <_printf_common+0x8e>
	...

08007190 <_printf_i>:
 8007190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	7e0f      	ldrb	r7, [r1, #24]
 8007196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007198:	2f78      	cmp	r7, #120	; 0x78
 800719a:	4691      	mov	r9, r2
 800719c:	4680      	mov	r8, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	469a      	mov	sl, r3
 80071a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071a6:	d807      	bhi.n	80071b8 <_printf_i+0x28>
 80071a8:	2f62      	cmp	r7, #98	; 0x62
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x32>
 80071ac:	2f00      	cmp	r7, #0
 80071ae:	f000 80d4 	beq.w	800735a <_printf_i+0x1ca>
 80071b2:	2f58      	cmp	r7, #88	; 0x58
 80071b4:	f000 80c0 	beq.w	8007338 <_printf_i+0x1a8>
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071c0:	e03a      	b.n	8007238 <_printf_i+0xa8>
 80071c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c6:	2b15      	cmp	r3, #21
 80071c8:	d8f6      	bhi.n	80071b8 <_printf_i+0x28>
 80071ca:	a101      	add	r1, pc, #4	; (adr r1, 80071d0 <_printf_i+0x40>)
 80071cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071d0:	08007229 	.word	0x08007229
 80071d4:	0800723d 	.word	0x0800723d
 80071d8:	080071b9 	.word	0x080071b9
 80071dc:	080071b9 	.word	0x080071b9
 80071e0:	080071b9 	.word	0x080071b9
 80071e4:	080071b9 	.word	0x080071b9
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080071b9 	.word	0x080071b9
 80071f0:	080071b9 	.word	0x080071b9
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	08007341 	.word	0x08007341
 8007200:	08007269 	.word	0x08007269
 8007204:	080072fb 	.word	0x080072fb
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	08007363 	.word	0x08007363
 8007214:	080071b9 	.word	0x080071b9
 8007218:	08007269 	.word	0x08007269
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	08007303 	.word	0x08007303
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	602a      	str	r2, [r5, #0]
 8007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007238:	2301      	movs	r3, #1
 800723a:	e09f      	b.n	800737c <_printf_i+0x1ec>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	0607      	lsls	r7, r0, #24
 8007242:	f103 0104 	add.w	r1, r3, #4
 8007246:	6029      	str	r1, [r5, #0]
 8007248:	d501      	bpl.n	800724e <_printf_i+0xbe>
 800724a:	681e      	ldr	r6, [r3, #0]
 800724c:	e003      	b.n	8007256 <_printf_i+0xc6>
 800724e:	0646      	lsls	r6, r0, #25
 8007250:	d5fb      	bpl.n	800724a <_printf_i+0xba>
 8007252:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007256:	2e00      	cmp	r6, #0
 8007258:	da03      	bge.n	8007262 <_printf_i+0xd2>
 800725a:	232d      	movs	r3, #45	; 0x2d
 800725c:	4276      	negs	r6, r6
 800725e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007262:	485a      	ldr	r0, [pc, #360]	; (80073cc <_printf_i+0x23c>)
 8007264:	230a      	movs	r3, #10
 8007266:	e012      	b.n	800728e <_printf_i+0xfe>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	1d19      	adds	r1, r3, #4
 800726e:	6029      	str	r1, [r5, #0]
 8007270:	0605      	lsls	r5, r0, #24
 8007272:	d501      	bpl.n	8007278 <_printf_i+0xe8>
 8007274:	681e      	ldr	r6, [r3, #0]
 8007276:	e002      	b.n	800727e <_printf_i+0xee>
 8007278:	0641      	lsls	r1, r0, #25
 800727a:	d5fb      	bpl.n	8007274 <_printf_i+0xe4>
 800727c:	881e      	ldrh	r6, [r3, #0]
 800727e:	4853      	ldr	r0, [pc, #332]	; (80073cc <_printf_i+0x23c>)
 8007280:	2f6f      	cmp	r7, #111	; 0x6f
 8007282:	bf0c      	ite	eq
 8007284:	2308      	moveq	r3, #8
 8007286:	230a      	movne	r3, #10
 8007288:	2100      	movs	r1, #0
 800728a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800728e:	6865      	ldr	r5, [r4, #4]
 8007290:	60a5      	str	r5, [r4, #8]
 8007292:	2d00      	cmp	r5, #0
 8007294:	bfa2      	ittt	ge
 8007296:	6821      	ldrge	r1, [r4, #0]
 8007298:	f021 0104 	bicge.w	r1, r1, #4
 800729c:	6021      	strge	r1, [r4, #0]
 800729e:	b90e      	cbnz	r6, 80072a4 <_printf_i+0x114>
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	d04b      	beq.n	800733c <_printf_i+0x1ac>
 80072a4:	4615      	mov	r5, r2
 80072a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072aa:	fb03 6711 	mls	r7, r3, r1, r6
 80072ae:	5dc7      	ldrb	r7, [r0, r7]
 80072b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072b4:	4637      	mov	r7, r6
 80072b6:	42bb      	cmp	r3, r7
 80072b8:	460e      	mov	r6, r1
 80072ba:	d9f4      	bls.n	80072a6 <_printf_i+0x116>
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d10b      	bne.n	80072d8 <_printf_i+0x148>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	07de      	lsls	r6, r3, #31
 80072c4:	d508      	bpl.n	80072d8 <_printf_i+0x148>
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	4299      	cmp	r1, r3
 80072cc:	bfde      	ittt	le
 80072ce:	2330      	movle	r3, #48	; 0x30
 80072d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072d8:	1b52      	subs	r2, r2, r5
 80072da:	6122      	str	r2, [r4, #16]
 80072dc:	f8cd a000 	str.w	sl, [sp]
 80072e0:	464b      	mov	r3, r9
 80072e2:	aa03      	add	r2, sp, #12
 80072e4:	4621      	mov	r1, r4
 80072e6:	4640      	mov	r0, r8
 80072e8:	f7ff fee4 	bl	80070b4 <_printf_common>
 80072ec:	3001      	adds	r0, #1
 80072ee:	d14a      	bne.n	8007386 <_printf_i+0x1f6>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	b004      	add	sp, #16
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f043 0320 	orr.w	r3, r3, #32
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	4833      	ldr	r0, [pc, #204]	; (80073d0 <_printf_i+0x240>)
 8007304:	2778      	movs	r7, #120	; 0x78
 8007306:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	6829      	ldr	r1, [r5, #0]
 800730e:	061f      	lsls	r7, r3, #24
 8007310:	f851 6b04 	ldr.w	r6, [r1], #4
 8007314:	d402      	bmi.n	800731c <_printf_i+0x18c>
 8007316:	065f      	lsls	r7, r3, #25
 8007318:	bf48      	it	mi
 800731a:	b2b6      	uxthmi	r6, r6
 800731c:	07df      	lsls	r7, r3, #31
 800731e:	bf48      	it	mi
 8007320:	f043 0320 	orrmi.w	r3, r3, #32
 8007324:	6029      	str	r1, [r5, #0]
 8007326:	bf48      	it	mi
 8007328:	6023      	strmi	r3, [r4, #0]
 800732a:	b91e      	cbnz	r6, 8007334 <_printf_i+0x1a4>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	f023 0320 	bic.w	r3, r3, #32
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	2310      	movs	r3, #16
 8007336:	e7a7      	b.n	8007288 <_printf_i+0xf8>
 8007338:	4824      	ldr	r0, [pc, #144]	; (80073cc <_printf_i+0x23c>)
 800733a:	e7e4      	b.n	8007306 <_printf_i+0x176>
 800733c:	4615      	mov	r5, r2
 800733e:	e7bd      	b.n	80072bc <_printf_i+0x12c>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	6826      	ldr	r6, [r4, #0]
 8007344:	6961      	ldr	r1, [r4, #20]
 8007346:	1d18      	adds	r0, r3, #4
 8007348:	6028      	str	r0, [r5, #0]
 800734a:	0635      	lsls	r5, r6, #24
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	d501      	bpl.n	8007354 <_printf_i+0x1c4>
 8007350:	6019      	str	r1, [r3, #0]
 8007352:	e002      	b.n	800735a <_printf_i+0x1ca>
 8007354:	0670      	lsls	r0, r6, #25
 8007356:	d5fb      	bpl.n	8007350 <_printf_i+0x1c0>
 8007358:	8019      	strh	r1, [r3, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	4615      	mov	r5, r2
 8007360:	e7bc      	b.n	80072dc <_printf_i+0x14c>
 8007362:	682b      	ldr	r3, [r5, #0]
 8007364:	1d1a      	adds	r2, r3, #4
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	681d      	ldr	r5, [r3, #0]
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	2100      	movs	r1, #0
 800736e:	4628      	mov	r0, r5
 8007370:	f7f8 ff5e 	bl	8000230 <memchr>
 8007374:	b108      	cbz	r0, 800737a <_printf_i+0x1ea>
 8007376:	1b40      	subs	r0, r0, r5
 8007378:	6060      	str	r0, [r4, #4]
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	2300      	movs	r3, #0
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	e7aa      	b.n	80072dc <_printf_i+0x14c>
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	462a      	mov	r2, r5
 800738a:	4649      	mov	r1, r9
 800738c:	4640      	mov	r0, r8
 800738e:	47d0      	blx	sl
 8007390:	3001      	adds	r0, #1
 8007392:	d0ad      	beq.n	80072f0 <_printf_i+0x160>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	079b      	lsls	r3, r3, #30
 8007398:	d413      	bmi.n	80073c2 <_printf_i+0x232>
 800739a:	68e0      	ldr	r0, [r4, #12]
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	4298      	cmp	r0, r3
 80073a0:	bfb8      	it	lt
 80073a2:	4618      	movlt	r0, r3
 80073a4:	e7a6      	b.n	80072f4 <_printf_i+0x164>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4632      	mov	r2, r6
 80073aa:	4649      	mov	r1, r9
 80073ac:	4640      	mov	r0, r8
 80073ae:	47d0      	blx	sl
 80073b0:	3001      	adds	r0, #1
 80073b2:	d09d      	beq.n	80072f0 <_printf_i+0x160>
 80073b4:	3501      	adds	r5, #1
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	9903      	ldr	r1, [sp, #12]
 80073ba:	1a5b      	subs	r3, r3, r1
 80073bc:	42ab      	cmp	r3, r5
 80073be:	dcf2      	bgt.n	80073a6 <_printf_i+0x216>
 80073c0:	e7eb      	b.n	800739a <_printf_i+0x20a>
 80073c2:	2500      	movs	r5, #0
 80073c4:	f104 0619 	add.w	r6, r4, #25
 80073c8:	e7f5      	b.n	80073b6 <_printf_i+0x226>
 80073ca:	bf00      	nop
 80073cc:	080087b5 	.word	0x080087b5
 80073d0:	080087c6 	.word	0x080087c6

080073d4 <memmove>:
 80073d4:	4288      	cmp	r0, r1
 80073d6:	b510      	push	{r4, lr}
 80073d8:	eb01 0402 	add.w	r4, r1, r2
 80073dc:	d902      	bls.n	80073e4 <memmove+0x10>
 80073de:	4284      	cmp	r4, r0
 80073e0:	4623      	mov	r3, r4
 80073e2:	d807      	bhi.n	80073f4 <memmove+0x20>
 80073e4:	1e43      	subs	r3, r0, #1
 80073e6:	42a1      	cmp	r1, r4
 80073e8:	d008      	beq.n	80073fc <memmove+0x28>
 80073ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073f2:	e7f8      	b.n	80073e6 <memmove+0x12>
 80073f4:	4402      	add	r2, r0
 80073f6:	4601      	mov	r1, r0
 80073f8:	428a      	cmp	r2, r1
 80073fa:	d100      	bne.n	80073fe <memmove+0x2a>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007406:	e7f7      	b.n	80073f8 <memmove+0x24>

08007408 <_sbrk_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d06      	ldr	r5, [pc, #24]	; (8007424 <_sbrk_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	f7f9 fe48 	bl	80010a8 <_sbrk>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_sbrk_r+0x1a>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_sbrk_r+0x1a>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20000c4c 	.word	0x20000c4c

08007428 <memcpy>:
 8007428:	440a      	add	r2, r1
 800742a:	4291      	cmp	r1, r2
 800742c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007430:	d100      	bne.n	8007434 <memcpy+0xc>
 8007432:	4770      	bx	lr
 8007434:	b510      	push	{r4, lr}
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800743e:	4291      	cmp	r1, r2
 8007440:	d1f9      	bne.n	8007436 <memcpy+0xe>
 8007442:	bd10      	pop	{r4, pc}

08007444 <_realloc_r>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	4680      	mov	r8, r0
 800744a:	4614      	mov	r4, r2
 800744c:	460e      	mov	r6, r1
 800744e:	b921      	cbnz	r1, 800745a <_realloc_r+0x16>
 8007450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	4611      	mov	r1, r2
 8007456:	f7ff bc49 	b.w	8006cec <_malloc_r>
 800745a:	b92a      	cbnz	r2, 8007468 <_realloc_r+0x24>
 800745c:	f7ff fbda 	bl	8006c14 <_free_r>
 8007460:	4625      	mov	r5, r4
 8007462:	4628      	mov	r0, r5
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	f000 f81b 	bl	80074a2 <_malloc_usable_size_r>
 800746c:	4284      	cmp	r4, r0
 800746e:	4607      	mov	r7, r0
 8007470:	d802      	bhi.n	8007478 <_realloc_r+0x34>
 8007472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007476:	d812      	bhi.n	800749e <_realloc_r+0x5a>
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fc36 	bl	8006cec <_malloc_r>
 8007480:	4605      	mov	r5, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d0ed      	beq.n	8007462 <_realloc_r+0x1e>
 8007486:	42bc      	cmp	r4, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4631      	mov	r1, r6
 800748c:	bf28      	it	cs
 800748e:	463a      	movcs	r2, r7
 8007490:	f7ff ffca 	bl	8007428 <memcpy>
 8007494:	4631      	mov	r1, r6
 8007496:	4640      	mov	r0, r8
 8007498:	f7ff fbbc 	bl	8006c14 <_free_r>
 800749c:	e7e1      	b.n	8007462 <_realloc_r+0x1e>
 800749e:	4635      	mov	r5, r6
 80074a0:	e7df      	b.n	8007462 <_realloc_r+0x1e>

080074a2 <_malloc_usable_size_r>:
 80074a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a6:	1f18      	subs	r0, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bfbc      	itt	lt
 80074ac:	580b      	ldrlt	r3, [r1, r0]
 80074ae:	18c0      	addlt	r0, r0, r3
 80074b0:	4770      	bx	lr
	...

080074b4 <_init>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr

080074c0 <_fini>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr
